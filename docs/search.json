[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Winston Chang. Author, maintainer. Joe Cheng. Author. JJ Allaire. Author. Carson Sievert. Author. Barret Schloerke. Author. Yihui Xie. Author. Jeff Allen. Author. Jonathan McPherson. Author. Alan Dipert. Author. Barbara Borges. Author. Posit Software, PBC. Copyright holder, funder. jQuery Foundation. Copyright holder.            jQuery library jQuery UI library jQuery contributors. Contributor, copyright holder.            jQuery library; authors listed inst/www/shared/jquery-AUTHORS.txt jQuery UI contributors. Contributor, copyright holder.            jQuery UI library; authors listed inst/www/shared/jqueryui/AUTHORS.txt Mark Otto. Contributor.            Bootstrap library Jacob Thornton. Contributor.            Bootstrap library Bootstrap contributors. Contributor.            Bootstrap library Twitter, Inc. Copyright holder.            Bootstrap library Prem Nawaz Khan. Contributor.            Bootstrap accessibility plugin Victor Tsaran. Contributor.            Bootstrap accessibility plugin Dennis Lembree. Contributor.            Bootstrap accessibility plugin Srinivasu Chakravarthula. Contributor.            Bootstrap accessibility plugin Cathy O'Connor. Contributor.            Bootstrap accessibility plugin PayPal, Inc. Copyright holder.            Bootstrap accessibility plugin Stefan Petre. Contributor, copyright holder.            Bootstrap-datepicker library Andrew Rowls. Contributor, copyright holder.            Bootstrap-datepicker library Brian Reavis. Contributor, copyright holder.            selectize.js library Salmen Bejaoui. Contributor, copyright holder.            selectize-plugin-a11y library Denis Ineshin. Contributor, copyright holder.            ion.rangeSlider library Sami Samhuri. Contributor, copyright holder.            Javascript strftime library SpryMedia Limited. Contributor, copyright holder.            DataTables library John Fraser. Contributor, copyright holder.            showdown.js library John Gruber. Contributor, copyright holder.            showdown.js library Ivan Sagalaev. Contributor, copyright holder.            highlight.js library R Core Team. Contributor, copyright holder.            tar implementation R","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chang W, Cheng J, Allaire J, Sievert C, Schloerke B, Xie Y, Allen J, McPherson J, Dipert , Borges B (2024). shiny: Web Application Framework R. R package version 1.8.1.9001,  https://github.com/rstudio/shiny, https://shiny.posit.co/.","code":"@Manual{,   title = {shiny: Web Application Framework for R},   author = {Winston Chang and Joe Cheng and JJ Allaire and Carson Sievert and Barret Schloerke and Yihui Xie and Jeff Allen and Jonathan McPherson and Alan Dipert and Barbara Borges},   year = {2024},   note = {R package version 1.8.1.9001,  https://github.com/rstudio/shiny},   url = {https://shiny.posit.co/}, }"},{"path":"/CONTRIBUTING.html","id":"how-to-make-changes","dir":"","previous_headings":"","what":"How to make changes","title":"NA","text":"submit pull request, please following: Add entry NEWS.md concisely describing changed. appropriate, add unit tests tests/ directory. made changes JavaScript files srcjs/ directory, make sure build output JavaScript files. See tools/README.md file information using build system. Run Build->Check Package RStudio IDE, devtools::check(), make sure change add messages, warnings, errors. things make easier Shiny development team evaluate pull request. Even , may still decide modify code even merge . Factors may prevent us merging pull request include: breaking backward compatibility adding feature consider relevant Shiny hard understand hard maintain future computationally expensive intuitive people use try responsive provide feedback case decide merge pull request.","code":""},{"path":"/CONTRIBUTING.html","id":"filing-issues","dir":"","previous_headings":"","what":"Filing issues","title":"NA","text":"find bug Shiny, can also file issue. Please provide much relevant information can, include minimal reproducible example possible.","code":""},{"path":"/index.html","id":"shiny-","dir":"","previous_headings":"","what":"Web Application Framework for R","title":"Web Application Framework for R","text":"Easily build rich productive interactive web apps R — HTML/CSS/JavaScript required.","code":""},{"path":"/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Web Application Framework for R","text":"Compared event-based programming, reactivity allows Shiny minimum amount work input(s) change, allows humans easily reason complex MVC logic. prebuilt set highly sophisticated, customizable, easy--use widgets (e.g., plots, tables, sliders, dropdowns, date pickers, ). attractive default look based Bootstrap can also easily customized bslib package avoided entirely direct R bindings HTML/CSS/JavaScript. Seamless integration R Markdown, making easy embed numerous applications natively within larger dynamic document. Tools improving monitoring performance, including native support async programming, caching, load testing, . Modules: framework reducing code duplication complexity. ability bookmark application state /generate code reproduce output(s). rich ecosystem extension packages custom widgets, input validation, unit testing, .","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Web Application Framework for R","text":"install stable version CRAN:","code":"install.packages(\"shiny\")"},{"path":"/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Web Application Framework for R","text":"installed, load library run example: examples inspiration, check Shiny User Gallery. help learning fundamental Shiny programming concepts, check Mastering Shiny book Shiny Tutorial. former currently --date modern Shiny features, whereas latter takes deeper, visual, dive fundamental concepts.","code":"library(shiny) # Launches an app, with the app's source code included runExample(\"06_tabsets\") # Lists more prepackaged examples runExample()"},{"path":"/index.html","id":"join-the-conversation","dir":"","previous_headings":"","what":"Join the conversation","title":"Web Application Framework for R","text":"want chat Shiny, meet developers, help us decide work next, join us Discord.","code":""},{"path":"/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Web Application Framework for R","text":"ask question Shiny, please use RStudio Community website. bug reports, please use issue tracker also keep mind writing good bug report, ’re likely get help problem.","code":""},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Web Application Framework for R","text":"welcome contributions shiny package. Please see CONTRIBUTING.md file detailed guidelines contribute.","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Web Application Framework for R","text":"shiny package whole licensed GPLv3. See LICENSE file details.","code":""},{"path":"/index.html","id":"r-version-support","dir":"","previous_headings":"","what":"R version support","title":"Web Application Framework for R","text":"Shiny supported latest release version R, well previous four minor release versions R. example, latest release R version 4.1, version supported, well 4.0, 3.6, 3.5, 3.4.","code":""},{"path":"/reference/absolutePanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Panel with absolute positioning — absolutePanel","title":"Panel with absolute positioning — absolutePanel","text":"Creates panel whose contents absolutely positioned.","code":""},{"path":"/reference/absolutePanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panel with absolute positioning — absolutePanel","text":"","code":"absolutePanel(   ...,   top = NULL,   left = NULL,   right = NULL,   bottom = NULL,   width = NULL,   height = NULL,   draggable = FALSE,   fixed = FALSE,   cursor = c(\"auto\", \"move\", \"default\", \"inherit\") )  fixedPanel(   ...,   top = NULL,   left = NULL,   right = NULL,   bottom = NULL,   width = NULL,   height = NULL,   draggable = FALSE,   cursor = c(\"auto\", \"move\", \"default\", \"inherit\") )"},{"path":"/reference/absolutePanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panel with absolute positioning — absolutePanel","text":"... Attributes (named arguments) children (unnamed arguments) included panel. top Distance top panel, top page parent container. left Distance left side panel, left page parent container. right Distance right side panel, right page parent container. bottom Distance bottom panel, bottom page parent container. width Width panel. height Height panel. draggable TRUE, allows user move panel clicking dragging. fixed Positions panel relative browser window prevents scrolled rest page. cursor type cursor appear user mouses panel. Use \"move\" north-east-south-west icon, \"default\" usual cursor arrow, \"inherit\" usual cursor behavior (including changing -beam cursor text). default \"auto\", equivalent ifelse(draggable, \"move\", \"inherit\").","code":""},{"path":"/reference/absolutePanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Panel with absolute positioning — absolutePanel","text":"HTML element list elements.","code":""},{"path":"/reference/absolutePanel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Panel with absolute positioning — absolutePanel","text":"absolutePanel function creates <div> tag whose CSS position set absolute (fixed fixed = TRUE). way absolute positioning works HTML absolute coordinates specified relative nearest parent element whose position set static (default), parent found, relative page borders. sure means, just keep mind may get strange results use absolutePanel inside certain types panels. fixedPanel function absolutePanel fixed = TRUE. position (top, left, right, bottom) size (width, height) parameters optional, specify exactly two top, bottom, height exactly two left, right, width predictable results. Like distance parameters Shiny, position size parameters take number (interpreted pixels) valid CSS size string, \"100px\" (100 pixels) \"25%\". arcane HTML reasons, panel fill page parent specify 0 top, left, right, bottom rather obvious width = \"100%\" height = \"100%\".","code":""},{"path":"/reference/actionButton.html","id":null,"dir":"Reference","previous_headings":"","what":"Action button/link — actionButton","title":"Action button/link — actionButton","text":"Creates action button link whose value initially zero, increments one time pressed.","code":""},{"path":"/reference/actionButton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Action button/link — actionButton","text":"","code":"actionButton(inputId, label, icon = NULL, width = NULL, disabled = FALSE, ...)  actionLink(inputId, label, icon = NULL, ...)"},{"path":"/reference/actionButton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Action button/link — actionButton","text":"inputId input slot used access value. label contents button link--usually text label, also use HTML, like image. icon optional icon() appear button. width width input, e.g. '400px', '100%'; see validateCssUnit(). disabled TRUE, button clickable. Use updateActionButton() dynamically enable/disable button. ... Named attributes applied button link.","code":""},{"path":"/reference/actionButton.html","id":"server-value","dir":"Reference","previous_headings":"","what":"Server value","title":"Action button/link — actionButton","text":"integer class \"shinyActionButtonValue\". class differs ordinary integers value 0 considered \"falsy\". implies two things: Event handlers (e.g., observeEvent(), eventReactive()) execute initial load. Input validation (e.g., req(), need()) fail initial load.","code":""},{"path":[]},{"path":"/reference/actionButton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Action button/link — actionButton","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   sliderInput(\"obs\", \"Number of observations\", 0, 1000, 500),   actionButton(\"goButton\", \"Go!\", class = \"btn-success\"),   plotOutput(\"distPlot\") )  server <- function(input, output) {   output$distPlot <- renderPlot({     # Take a dependency on input$goButton. This will run once initially,     # because the value changes from NULL to 0.     input$goButton      # Use isolate() to avoid dependency on input$obs     dist <- isolate(rnorm(input$obs))     hist(dist)   }) }  shinyApp(ui, server)  }  ## Example of adding extra class values actionButton(\"largeButton\", \"Large Primary Button\", class = \"btn-primary btn-lg\") #> <button class=\"btn btn-default action-button btn-primary btn-lg\" id=\"largeButton\" type=\"button\">Large Primary Button<\/button> actionLink(\"infoLink\", \"Information Link\", class = \"btn-info\") #> <a class=\"action-button btn-info\" href=\"#\" id=\"infoLink\">Information Link<\/a>"},{"path":"/reference/applyInputHandlers.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply input handlers to raw input values — applyInputHandlers","title":"Apply input handlers to raw input values — applyInputHandlers","text":"purpose function make possible external packages test Shiny inputs. takes named list raw input values, applies input handlers values, returns named list processed values.","code":""},{"path":"/reference/applyInputHandlers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply input handlers to raw input values — applyInputHandlers","text":"","code":"applyInputHandlers(inputs, shinysession = getDefaultReactiveDomain())"},{"path":"/reference/applyInputHandlers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply input handlers to raw input values — applyInputHandlers","text":"inputs named list input values. shinysession Shiny session object.","code":""},{"path":"/reference/applyInputHandlers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply input handlers to raw input values — applyInputHandlers","text":"raw input values named list. values may names like \"x:shiny.date\". function apply \"shiny.date\" input handler value, rename result \"x\", output.","code":""},{"path":[]},{"path":"/reference/bindCache.html","id":null,"dir":"Reference","previous_headings":"","what":"Add caching with reactivity to an object — bindCache","title":"Add caching with reactivity to an object — bindCache","text":"bindCache() adds caching reactive() expressions render* functions (like renderText(), renderTable(), ...). Ordinary reactive() expressions automatically cache recent value, helps  avoid redundant computation downstream reactives. bindCache() cache previous values (long fit cache) can shared across user sessions. allows bindCache() dramatically improve performance used correctly.","code":""},{"path":"/reference/bindCache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add caching with reactivity to an object — bindCache","text":"","code":"bindCache(x, ..., cache = \"app\")"},{"path":"/reference/bindCache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add caching with reactivity to an object — bindCache","text":"x object add caching . ... One expressions use caching key. cache scope cache, cache object. can \"app\" (default), \"session\", cache object like cachem::cache_disk(). See Cache Scoping section information.","code":""},{"path":"/reference/bindCache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add caching with reactivity to an object — bindCache","text":"bindCache() requires one expressions used generate cache key, used determine computation occurred hence can retrieved cache. familiar concept memoizing pure functions (e.g., memoise package), can think cache key input(s) pure function. , one take care make sure use bindCache() pure sense, namely: given key, return value always . Evaluation side-effects. example , bindCache() key consists input$x input$y combined, value input$x * input$y. simple example, given key, one possible returned value.   largest performance improvements occur cache key fast compute reactive expression slow compute. see value computed, cached reactive evaluates key, serializes hashes result. resulting hashed key cache, cached reactive simply retrieves previously calculated value returns ; , value computed result stored cache returned. compute cache key, bindCache() hashes contents ..., best avoid including large objects cache key since can result slow hashing. also best avoid reference objects like environments R6 objects, since serialization objects may capture relevant changes. want use large object part cache key, may make sense sort reduction data still captures information whether value can retrieved cache. example, large data set timestamps, might make sense extract recent timestamp return . , instead hashing entire data object, cached reactive needs hash timestamp.   computations slow, often makes sense pair bindCache() bindEvent() computation performed user explicitly requests (, see Details section bindEvent()).","code":"r <- reactive({ input$x * input$y }) %>%    bindCache(input$x, input$y) r <- reactive({ compute(bigdata()) } %>%    bindCache({ extract_most_recent_time(bigdata()) })"},{"path":"/reference/bindCache.html","id":"cache-keys-and-reactivity","dir":"Reference","previous_headings":"","what":"Cache keys and reactivity","title":"Add caching with reactivity to an object — bindCache","text":"value expression (original reactive()) cached, necessarily re-executed someone retrieves value, therefore used decide objects take reactive dependencies . Instead, key used figure objects take reactive dependencies . short, key expression reactive, value expression longer reactive. example : key input$x value expression reactive({input$x + input$y}), resulting cached reactive  take reactive dependency input$x -- recompute {input$x + input$y} just input$y changes. Moreover, cache use input$y part key, return incorrect values future retrieves values cache. (See examples example .) better cache key something like input$x, input$y. two things: ensures reactive dependency taken input$x input$y, also makes sure values represented cache key. general, key use reactive inputs value, computation simpler. (non-reactive) values consumed, external data sources, used key well. Note key large, can make sense sort reduction serialization hashing cache key expensive. Remember key reactive, re-executed every single time someone accesses cached reactive. re-executed invalidated one reactives depends . example, suppose cached reactive:   case, key expression essentially reactive(list(input$x, input$y)) (bit , good enough approximation). first time r() called, executes key, fails find cache, executes value expression, { input$x + input$y }. r() called , need re-execute key expression, invalidated via change input$x input$y; simply returns previous value. However, input$x input$y changes, reactive expression invalidated, next time someone calls r(), key expression need re-executed. Note cached reactive passed bindEvent(), key expression longer reactive; instead, event expression reactive.","code":"r <- reactive({ input$x * input$y }) %>%   bindCache(input$x, input$y)"},{"path":"/reference/bindCache.html","id":"cache-scope","dir":"Reference","previous_headings":"","what":"Cache scope","title":"Add caching with reactivity to an object — bindCache","text":"default, bindCache() used, scoped running application. means shares cache user sessions connected application (within R process). done cache parameter's default value, \"app\". app-level cache scope, one user can benefit work done another user's session. cases, best way get performance improvements caching. However, cases, leak information sessions. example, cache key fully encompass inputs used value, data leak sessions. user sees cached reactive returns value quickly, may able infer someone else already used values. also possible scope cache session, cache=\"session\". removes risk information leaking sessions, one session benefit computations performed another session. possible pass caching objects directly bindCache(). can useful , example, want use particular type cache specific cached reactives, want use cachem::cache_disk() shared across multiple processes persists beyond current R session. use different settings application-scoped cache, can call shinyOptions() top app.R, server.R, global.R. example, create cache 500 MB space instead default 200 MB:   use different settings session-scoped cache, can set session$cache top server function. default, create 200 MB memory cache session, can replace something different. use session-scoped cache, must also call bindCache() cache=\"session\". create 100 MB cache session:   want use cache shared across multiple R processes, can use cachem::cache_disk(). can create application-level shared cache putting top app.R, server.R, global.R:   create subdirectory system temp directory named myapp-cache (replace myapp-cache unique name choosing). platforms, directory removed system reboots. cache persist across multiple starts stops R process, long reboot. cache persist even across multiple reboots, can create cache location outside temp directory. example, subdirectory application:   case, resetting cache done manually, deleting directory. can also scope cache just one item, selected items. , create cachem::cache_mem() cachem::cache_disk(), pass cache argument bindCache().","code":"shinyOptions(cache = cachem::cache_mem(max_size = 500e6)) function(input, output, session) {    session$cache <- cachem::cache_mem(max_size = 100e6)    ...  } shinyOptions(cache = cachem::cache_disk(file.path(dirname(tempdir()), \"myapp-cache\")) shinyOptions(cache = cachem::cache_disk(\"./myapp-cache\"))"},{"path":"/reference/bindCache.html","id":"computing-cache-keys","dir":"Reference","previous_headings":"","what":"Computing cache keys","title":"Add caching with reactivity to an object — bindCache","text":"actual cache key used internally takes value evaluating key expression(s) (... arguments) combines (unevaluated) value expression. means two cached reactives result evaluating key, different value expressions, need worry collisions. However, two cached reactives identical key value expressions expressions, share cached values. useful using cache=\"app\": may multiple user sessions create separate cached reactive objects (created code server function, server function executed user session), cached reactive objects across sessions can share values cache.","code":""},{"path":"/reference/bindCache.html","id":"async-with-cached-reactives","dir":"Reference","previous_headings":"","what":"Async with cached reactives","title":"Add caching with reactivity to an object — bindCache","text":"cached reactive expression, key /value expression can asynchronous. words, can promises --- regular R promises, rather objects provided promises  package, similar promises JavaScript. (See promises::promise() information.) can also use future::future() objects run code separate process even remote machine. value returns promise, anything consumes cached reactive must expect return promise. Similarly, key promise (words, asynchronous), entire cached reactive must asynchronous, since key must computed asynchronously knows whether compute value value retrieved cache. Anything consumes cached reactive must therefore expect return promise.","code":""},{"path":"/reference/bindCache.html","id":"developing-render-functions-for-caching","dir":"Reference","previous_headings":"","what":"Developing render functions for caching","title":"Add caching with reactivity to an object — bindCache","text":"implemented render*() function, may just work bindCache(), possible need make modifications. modifications involve helping bindCache() avoid cache collisions, dealing internal state may set , render function, modifying data goes comes cache. may need provide cacheHint createRenderFunction() (htmlwidgets::shinyRenderWidget(), authored htmlwidget) order bindCache() correctly compute cache key. potential problem cache collision. Consider following:   output$x1 output$x2 use input$x part cache key, thing used cache key, two outputs cache collision, output. avoid , cache hint automatically added renderText() calls createRenderFunction(). cache hint used part actual cache key, addition one passed bindCache() user. cache hint can viewed calling internal Shiny function extractCacheHint():   returns nested list containing item, $origUserFunc$body, case expression passed renderText(): { input$x }. (quoted)  expression mixed actual cache key, output$x1 collisions output$x2. developers render functions, nothing extra needs done; automatic inference cache hint sufficient. , can check calling shiny:::extractCacheHint(), testing render function cache collisions real application. cases, however, automatic cache hint inference sufficient, necessary provide cache hint. true renderPrint(). Unlike renderText(), wraps user-provided expression another function, passing createRenderFunction() (instead createRenderFunction()). user code wrapped another function, createRenderFunction() able automatically extract user-provided code use cache key. Instead, renderPrint calls createRenderFunction(), explicitly passes along cacheHint, includes label original user expression. general, need provide cacheHint, best practice provide label id, user's expr, well arguments may influence final value. htmlwidgets, try automatically infer cache hint; , can inspect cache hint shiny:::extractCacheHint() also test application. need explicitly provide cache hint, pass shinyRenderWidget. example:   render function sets internal state, may find useful call createRenderFunction() use cacheWriteHook /cacheReadHook parameters. hooks functions run just object stored cache, just object retrieved cache. can modify data stored retrieved; can useful extra information needs stored cache. can also used modify state application; example, can call createWebDependency() make JS/CSS resources available cached object loaded different R process. (See source htmlwidgets::shinyRenderWidget example .)","code":"output$x1 <- renderText({ input$x }) %>% bindCache(input$x)  output$x2 <- renderText({ input$x * 2 }) %>% bindCache(input$x) r <- renderText({ input$x })  shiny:::extractCacheHint(r) renderMyWidget <- function(expr) {    q <- rlang::enquo0(expr)      htmlwidgets::shinyRenderWidget(      q,      myWidgetOutput,      quoted = TRUE,      cacheHint = list(label = \"myWidget\", userQuo = q)    )  }"},{"path":"/reference/bindCache.html","id":"uncacheable-objects","dir":"Reference","previous_headings":"","what":"Uncacheable objects","title":"Add caching with reactivity to an object — bindCache","text":"render functions cached, typically side effects modify external state, must re-execute time order work properly. developers code, call createRenderFunction() (markRenderFunction()) cacheHint = FALSE.","code":""},{"path":"/reference/bindCache.html","id":"caching-with-renderplot-","dir":"Reference","previous_headings":"","what":"Caching with renderPlot()","title":"Add caching with reactivity to an object — bindCache","text":"bindCache() used renderPlot(), height width passed original renderPlot() ignored. superseded sizePolicy argument passed `bindCache. default :   sizePolicy must function takes two-element numeric vector input, representing width height <img> element browser window, must return two-element numeric vector, representing pixel dimensions plot generate. purpose round actual pixel dimensions browser dimensions, generate cache images every possible pixel dimension. See sizeGrowthRatio() information default sizing policy.","code":"sizePolicy = sizeGrowthRatio(width = 400, height = 400, growthRate = 1.2)"},{"path":[]},{"path":"/reference/bindCache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add caching with reactivity to an object — bindCache","text":"","code":"if (FALSE) { rc <- bindCache(   x = reactive({     Sys.sleep(2)   # Pretend this is expensive     input$x * 100   }),   input$x )  # Can make it prettier with the %>% operator library(magrittr)  rc <- reactive({   Sys.sleep(2)   input$x * 100 }) %>%   bindCache(input$x)  }  ## Only run app examples in interactive R sessions if (interactive()) {  # Basic example shinyApp(   ui = fluidPage(     sliderInput(\"x\", \"x\", 1, 10, 5),     sliderInput(\"y\", \"y\", 1, 10, 5),     div(\"x * y: \"),     verbatimTextOutput(\"txt\")   ),   server = function(input, output) {     r <- reactive({       # The value expression is an _expensive_ computation       message(\"Doing expensive computation...\")       Sys.sleep(2)       input$x * input$y     }) %>%       bindCache(input$x, input$y)      output$txt <- renderText(r())   } )   # Caching renderText shinyApp(   ui = fluidPage(     sliderInput(\"x\", \"x\", 1, 10, 5),     sliderInput(\"y\", \"y\", 1, 10, 5),     div(\"x * y: \"),     verbatimTextOutput(\"txt\")   ),   server = function(input, output) {     output$txt <- renderText({       message(\"Doing expensive computation...\")       Sys.sleep(2)       input$x * input$y     }) %>%       bindCache(input$x, input$y)   } )   # Demo of using events and caching with an actionButton shinyApp(   ui = fluidPage(     sliderInput(\"x\", \"x\", 1, 10, 5),     sliderInput(\"y\", \"y\", 1, 10, 5),     actionButton(\"go\", \"Go\"),     div(\"x * y: \"),     verbatimTextOutput(\"txt\")   ),   server = function(input, output) {     r <- reactive({       message(\"Doing expensive computation...\")       Sys.sleep(2)       input$x * input$y     }) %>%       bindCache(input$x, input$y) %>%       bindEvent(input$go)       # The cached, eventified reactive takes a reactive dependency on       # input$go, but doesn't use it for the cache key. It uses input$x and       # input$y for the cache key, but doesn't take a reactive dependency on       # them, because the reactive dependency is superseded by addEvent().      output$txt <- renderText(r())   } )  }"},{"path":"/reference/bindEvent.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an object respond only to specified reactive events — bindEvent","title":"Make an object respond only to specified reactive events — bindEvent","text":"Modify object respond \"event-like\" reactive inputs, values, expressions. bindEvent() can used reactive expressions, render functions, observers. resulting object takes reactive dependency ... arguments, original object's code. can, example, used make observer execute button pressed. bindEvent() added Shiny 1.6.0. used reactive() observe(), thing eventReactive() observeEvent(). However, bindEvent() flexible: can combined bindCache(), can also used render functions (like renderText() renderPlot()).","code":""},{"path":"/reference/bindEvent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an object respond only to specified reactive events — bindEvent","text":"","code":"bindEvent(   x,   ...,   ignoreNULL = TRUE,   ignoreInit = FALSE,   once = FALSE,   label = NULL )"},{"path":"/reference/bindEvent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an object respond only to specified reactive events — bindEvent","text":"x object wrap triggered specified event occurs. ... One expressions represents event; can simple reactive value like input$click, call reactive expression like dataset(), even complex expression inside curly braces. multiple expressions ..., take dependency . ignoreNULL Whether action triggered (value calculated) input NULL. See Details. ignoreInit TRUE, , eventified object first created/initialized, trigger action (compute value). default FALSE. See Details. Used observers. Whether observer immediately destroyed first time code observer run. pattern useful want subscribe event happen . label label observer reactive, useful debugging.","code":""},{"path":"/reference/bindEvent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make an object respond only to specified reactive events — bindEvent","text":"Shiny's reactive programming framework primarily designed calculated values (reactive expressions) side-effect-causing actions (observers) respond inputs changing. often desired Shiny apps, always: sometimes want wait specific action taken user, like clicking actionButton(), calculating expression taking action. reactive value expression used trigger calculations way called event. situations demand imperative, \"event handling\" style programming possible--particularly intuitive--using reactive programming primitives observe() isolate(). bindEvent() provides straightforward API event handling wraps observe isolate. ... arguments captured expressions combined event expression. event expression invalidated (upstream reactive inputs change), event, cause original object's code execute. Use bindEvent() observe() whenever want perform action response event. (thing observeEvent(), available Shiny prior version 1.6.0.) Note \"recalculate value\" generally count performing action -- use reactive() . Use bindEvent() reactive() create calculated value updates response event. just like normal reactive expression except ignores usual invalidations come reactive dependencies; invalidates response given event. (thing eventReactive(), available Shiny prior version 1.6.0.) bindEvent() often used bindCache().","code":""},{"path":"/reference/bindEvent.html","id":"ignorenull-and-ignoreinit","dir":"Reference","previous_headings":"","what":"ignoreNULL and ignoreInit","title":"Make an object respond only to specified reactive events — bindEvent","text":"bindEvent() takes ignoreNULL parameter affects behavior event expression evaluates NULL (special case actionButton(), 0). cases, ignoreNULL TRUE, raise silent validation error. useful behavior want action calculation app first starts, wait user initiate action first (like \"Submit\" button); whereas ignoreNULL=FALSE desirable want initially perform action/calculation just let user re-initiate (like \"Recalculate\" button). bindEvent() also takes ignoreInit argument. default, reactive expressions observers run first reactive flush created (except , moment, event expression evaluates NULL ignoreNULL TRUE). responding click action button, may often useful set ignoreInit TRUE. example, setting observer respond dynamically created button, ignoreInit = TRUE guarantee action triggered button actually clicked, instead also triggered created/initialized. Similarly, setting reactive responds dynamically created button used refresh data (returned reactive), use reactive(...) %>% bindEvent(..., ignoreInit = TRUE) want let user decide /want refresh data (since, depending app, may computationally expensive operation). Even though ignoreNULL ignoreInit can used similar purposes independent one another. result combining : ignoreNULL = TRUE ignoreInit = FALSE default. combination means reactive/observer code run every time event expression NULL. , time creation, event expression happens NULL, code runs. ignoreNULL = FALSE ignoreInit = FALSE combination means reactive/observer code run every time matter . ignoreNULL = FALSE ignoreInit = TRUE combination means reactive/observer code run time creation (ignoreInit = TRUE), run every time. ignoreNULL = TRUE ignoreInit = TRUE combination means reactive/observer code time creation ( ignoreInit = TRUE). , reactive/observer code run every time event expression NULL.","code":""},{"path":"/reference/bindEvent.html","id":"types-of-objects","dir":"Reference","previous_headings":"","what":"Types of objects","title":"Make an object respond only to specified reactive events — bindEvent","text":"bindEvent() can used reactive expressions, observers, shiny render functions. bindEvent() used reactive(), creates new reactive expression object. bindEvent() used observe(), alters observer place. can used observers yet executed.","code":""},{"path":"/reference/bindEvent.html","id":"combining-events-and-caching","dir":"Reference","previous_headings":"","what":"Combining events and caching","title":"Make an object respond only to specified reactive events — bindEvent","text":"many cases, makes sense use bindEvent() along bindCache(), can reduce amount work done server. example, sliderInputs x y reactive() performs time-consuming operation values. Using bindCache() can speed things , especially multiple users. might make sense also computation user sets x y, clicks actionButton named go. use caching events, object first passed bindCache(), bindEvent(). example:   Anything consumes r() take reactive dependency event expression given bindEvent(), cache key expression given bindCache(). case, just input$go.","code":"r <- reactive({     Sys.sleep(2)  # Pretend this is an expensive computation     input$x * input$y   }) %>%   bindCache(input$x, input$y) %>%   bindEvent(input$go)"},{"path":"/reference/bookmarkButton.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a button for bookmarking/sharing — bookmarkButton","title":"Create a button for bookmarking/sharing — bookmarkButton","text":"bookmarkButton actionButton() default label consists link icon text \"Bookmark...\". meant used bookmarking state.","code":""},{"path":"/reference/bookmarkButton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a button for bookmarking/sharing — bookmarkButton","text":"","code":"bookmarkButton(   label = \"Bookmark...\",   icon = shiny::icon(\"link\", lib = \"glyphicon\"),   title = \"Bookmark this application's state and get a URL for sharing.\",   ...,   id = \"._bookmark_\" )"},{"path":"/reference/bookmarkButton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a button for bookmarking/sharing — bookmarkButton","text":"label contents button link--usually text label, also use HTML, like image. icon optional icon() appear button. title tooltip shown mouse cursor hovers button. ... Named attributes applied button link. id ID bookmark button. time necessary set ID unless one bookmark button application. specify input ID, excluded bookmarking setBookmarkExclude(), must create observer bookmarking button pressed. See examples .","code":""},{"path":[]},{"path":"/reference/bookmarkButton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a button for bookmarking/sharing — bookmarkButton","text":"","code":"## Only run these examples in interactive sessions if (interactive()) {  # This example shows how to use multiple bookmark buttons. If you only need # a single bookmark button, see examples in ?enableBookmarking. ui <- function(request) {   fluidPage(     tabsetPanel(id = \"tabs\",       tabPanel(\"One\",         checkboxInput(\"chk1\", \"Checkbox 1\"),         bookmarkButton(id = \"bookmark1\")       ),       tabPanel(\"Two\",         checkboxInput(\"chk2\", \"Checkbox 2\"),         bookmarkButton(id = \"bookmark2\")       )     )   ) } server <- function(input, output, session) {   # Need to exclude the buttons from themselves being bookmarked   setBookmarkExclude(c(\"bookmark1\", \"bookmark2\"))    # Trigger bookmarking with either button   observeEvent(input$bookmark1, {     session$doBookmark()   })   observeEvent(input$bookmark2, {     session$doBookmark()   }) } enableBookmarking(store = \"url\") shinyApp(ui, server) }"},{"path":"/reference/bootstrapLib.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap libraries — bootstrapLib","title":"Bootstrap libraries — bootstrapLib","text":"function defines set web dependencies necessary using Bootstrap components web page.","code":""},{"path":"/reference/bootstrapLib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap libraries — bootstrapLib","text":"","code":"bootstrapLib(theme = NULL)"},{"path":"/reference/bootstrapLib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap libraries — bootstrapLib","text":"theme One following: NULL (default), implies \"stock\" build Bootstrap 3. bslib::bs_theme() object. can used replace stock build Bootstrap 3 customized version Bootstrap 3 higher. character string pointing alternative Bootstrap stylesheet (normally css file within www directory, e.g. www/bootstrap.css).","code":""},{"path":"/reference/bootstrapLib.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap libraries — bootstrapLib","text":"necessary call function use bootstrapPage() others use bootstrapPage, fluidPage(), navbarPage(), fillPage(), etc, already include Bootstrap web dependencies.","code":""},{"path":"/reference/bootstrapPage.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Bootstrap page — bootstrapPage","title":"Create a Bootstrap page — bootstrapPage","text":"Create Shiny UI page loads CSS JavaScript Bootstrap, content page body (provide).","code":""},{"path":"/reference/bootstrapPage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Bootstrap page — bootstrapPage","text":"","code":"bootstrapPage(..., title = NULL, theme = NULL, lang = NULL)  basicPage(...)"},{"path":"/reference/bootstrapPage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Bootstrap page — bootstrapPage","text":"... contents document body. title browser window title (defaults host URL page) theme One following: NULL (default), implies \"stock\" build Bootstrap 3. bslib::bs_theme() object. can used replace stock build Bootstrap 3 customized version Bootstrap 3 higher. character string pointing alternative Bootstrap stylesheet (normally css file within www directory, e.g. www/bootstrap.css). lang ISO 639-1 language code HTML page, \"en\" \"ko\". used lang <html> tag, <html lang=\"en\">. default (NULL) results empty string.","code":""},{"path":"/reference/bootstrapPage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Bootstrap page — bootstrapPage","text":"UI definition can passed shinyUI function.","code":""},{"path":"/reference/bootstrapPage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Bootstrap page — bootstrapPage","text":"function primarily intended users proficient HTML/CSS, know lay pages Bootstrap. applications use fluidPage() along layout functions like fluidRow() sidebarLayout().","code":""},{"path":"/reference/bootstrapPage.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a Bootstrap page — bootstrapPage","text":"basicPage function deprecated, use fluidPage() function instead.","code":""},{"path":[]},{"path":"/reference/brushedPoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Find rows of data selected on an interactive plot. — brushedPoints","title":"Find rows of data selected on an interactive plot. — brushedPoints","text":"brushedPoints() returns rows data frame brush. nearPoints() returns rows data frame near click, hover, double-click. Alternatively, set allRows = TRUE return rows input data additional column selected_ indicates rows selected.","code":""},{"path":"/reference/brushedPoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find rows of data selected on an interactive plot. — brushedPoints","text":"","code":"brushedPoints(   df,   brush,   xvar = NULL,   yvar = NULL,   panelvar1 = NULL,   panelvar2 = NULL,   allRows = FALSE )  nearPoints(   df,   coordinfo,   xvar = NULL,   yvar = NULL,   panelvar1 = NULL,   panelvar2 = NULL,   threshold = 5,   maxpoints = NULL,   addDist = FALSE,   allRows = FALSE )"},{"path":"/reference/brushedPoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find rows of data selected on an interactive plot. — brushedPoints","text":"df data frame select rows. brush, coordinfo data brush click/dblclick/hover event e.g. input$plot_brush, input$plot_click. xvar, yvar string giving name variable x y axis. required base graphics, must name column df. panelvar1, panelvar2 string giving name panel variable. expert use ; cases automatically derived ggplot2 spec. allRows FALSE (default) return data frame containing selected rows. TRUE, input data frame new column, selected_, indicates whether row selected . threshold maximum distance (pixels) pointer location. Rows data frame selected distance pointer less threshold. maxpoints Maximum number rows return. NULL (default), return rows within threshold distance. addDist TRUE, add column named dist_ contains distance coordinate point, pixels. pointer event yet occurred, value dist_ NA.","code":""},{"path":"/reference/brushedPoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find rows of data selected on an interactive plot. — brushedPoints","text":"data frame based df, containing observations selected brush near click event. nearPoints(), rows sorted distance event. allRows = TRUE, rows returned, along new selected_ column indicates whether point selected. output nearPoints() longer sorted, can set addDist = TRUE get additional column gives pixel distance pointer.","code":""},{"path":"/reference/brushedPoints.html","id":"ggplot-","dir":"Reference","previous_headings":"","what":"ggplot2","title":"Find rows of data selected on an interactive plot. — brushedPoints","text":"plots created ggplot2, necessary specify column names xvar, yvar, panelvar1, panelvar2 information can automatically derived plot specification. Note, however, work use computed column, like aes(speed/2, dist)). Instead, recommend modify data first, make plot \"raw\" columns modified data.","code":""},{"path":"/reference/brushedPoints.html","id":"brushing","dir":"Reference","previous_headings":"","what":"Brushing","title":"Find rows of data selected on an interactive plot. — brushedPoints","text":"x y column factor, coerced integer vector. character vector, coerced factor integer vector. means brush considered cover given character/factor value covers center value. brush operating just x y directions (e.g., brushOpts(direction = \"x\"), function filter points using just x y variable, whichever appropriate.","code":""},{"path":[]},{"path":"/reference/brushedPoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find rows of data selected on an interactive plot. — brushedPoints","text":"","code":"if (FALSE) { # Note that in practice, these examples would need to go in reactives # or observers.  # This would select all points within 5 pixels of the click nearPoints(mtcars, input$plot_click)  # Select just the nearest point within 10 pixels of the click nearPoints(mtcars, input$plot_click, threshold = 10, maxpoints = 1)  }"},{"path":"/reference/brushOpts.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an object representing brushing options — brushOpts","title":"Create an object representing brushing options — brushOpts","text":"generates object representing brushing options, passed brush argument imageOutput() plotOutput().","code":""},{"path":"/reference/brushOpts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an object representing brushing options — brushOpts","text":"","code":"brushOpts(   id,   fill = \"#9cf\",   stroke = \"#036\",   opacity = 0.25,   delay = 300,   delayType = c(\"debounce\", \"throttle\"),   clip = TRUE,   direction = c(\"xy\", \"x\", \"y\"),   resetOnNew = FALSE )"},{"path":"/reference/brushOpts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an object representing brushing options — brushOpts","text":"id Input value name. example, value \"plot_brush\", coordinates available input$plot_brush. Multiple imageOutput/plotOutput calls may share id value; brushing one image plot cause brushes id disappear. fill Fill color brush. 'auto', derives link color plot's HTML container (thematic enabled, accent non-'auto' value, color used instead). stroke Outline color brush. 'auto', derives foreground color plot's HTML container (thematic enabled, fg non-'auto' value, color used instead). opacity Opacity brush delay long delay (milliseconds) debouncing throttling, sending brush data server. delayType type algorithm limiting number brush events. Use \"throttle\" limit number brush events one every delay milliseconds. Use \"debounce\" suspend events cursor moving, wait cursor rest delay milliseconds sending event. clip brush area clipped plotting area? FALSE, user able brush outside plotting area, long still inside image. direction direction brushing. \"xy\", brush can drawn moved x y directions. \"x\", \"y\", brush wil work horizontally vertically. resetOnNew new image sent browser (via renderImage()), brush reset? default, FALSE, useful want update plot keeping brush. Using TRUE useful want clear brush whenever plot updated.","code":""},{"path":[]},{"path":"/reference/busyIndicatorOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Customize busy indicator options — busyIndicatorOptions","title":"Customize busy indicator options — busyIndicatorOptions","text":"busy indicators enabled (see useBusyIndicators()), spinner shown calculating/recalculating output, pulsing banner shown top page app otherwise busy. function allows customize appearance busy indicators. apply customization, include result function inside app's UI.","code":""},{"path":"/reference/busyIndicatorOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customize busy indicator options — busyIndicatorOptions","text":"","code":"busyIndicatorOptions(   ...,   spinner_type = NULL,   spinner_color = NULL,   spinner_size = NULL,   spinner_delay = NULL,   spinner_selector = NULL,   pulse_background = NULL,   pulse_height = NULL,   pulse_speed = NULL )"},{"path":"/reference/busyIndicatorOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customize busy indicator options — busyIndicatorOptions","text":"... Currently ignored. spinner_type type spinner. Pre-bundled types include: 'ring', 'ring2', 'ring3', 'bars', 'bars2', 'bars3', 'pulse', 'pulse2', 'pulse3', 'dots', 'dots2', 'dots3'. path local SVG file can also provided. SVG adhere following rules: SVG contain animation. avoid absolute sizes (spinner's containing DOM element size set CSS spinner_size, fill container). avoid setting absolute colors (spinner's containing DOM element color set CSS spinner_color, inherit color). spinner_color color spinner. can valid CSS color. Defaults app's \"primary\" color Bootstrap page. spinner_size size spinner. can valid CSS size. spinner_delay amount time wait showing spinner. can valid CSS time can useful showing spinner computation finishes quickly. spinner_selector character string containing CSS selector scoping spinner customization. default (NULL) apply spinner customization parent element spinner. pulse_background CSS background definition pulse. default uses linear-gradient theme's indigo, purple, pink colors. pulse_height height pulsing banner. can valid CSS size. pulse_speed speed pulsing banner. can valid CSS time.","code":""},{"path":[]},{"path":"/reference/busyIndicatorOptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Customize busy indicator options — busyIndicatorOptions","text":"","code":"if (FALSE) { # rlang::is_interactive()  library(bslib)  card_ui <- function(id, spinner_type = id) {   card(     busyIndicatorOptions(spinner_type = spinner_type),     card_header(paste(\"Spinner:\", spinner_type)),     plotOutput(shiny::NS(id, \"plot\"))   ) }  card_server <- function(id, simulate = reactive()) {   moduleServer(     id = id,     function(input, output, session) {       output$plot <- renderPlot({         Sys.sleep(1)         simulate()         plot(x = rnorm(100), y = rnorm(100))       })     }   ) }  ui <- page_fillable(   useBusyIndicators(),   input_task_button(\"simulate\", \"Simulate\", icon = icon(\"refresh\")),   layout_columns(     card_ui(\"ring\"),     card_ui(\"bars\"),     card_ui(\"dots\"),     card_ui(\"pulse\"),     col_widths = 6   ) )  server <- function(input, output, session) {   simulate <- reactive(input$simulate)   card_server(\"ring\", simulate)   card_server(\"bars\", simulate)   card_server(\"dots\", simulate)   card_server(\"pulse\", simulate) }  shinyApp(ui, server) }"},{"path":"/reference/callModule.html","id":null,"dir":"Reference","previous_headings":"","what":"Invoke a Shiny module — callModule","title":"Invoke a Shiny module — callModule","text":"Note: Shiny 1.5.0, recommend using moduleServer() instead callModule(), syntax little easier understand, modules created moduleServer can tested testServer().","code":""},{"path":"/reference/callModule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invoke a Shiny module — callModule","text":"","code":"callModule(module, id, ..., session = getDefaultReactiveDomain())"},{"path":"/reference/callModule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invoke a Shiny module — callModule","text":"module Shiny module server function id ID string corresponds ID used call module's UI function ... Additional parameters pass module server function session Session make child scope (default almost always used)","code":""},{"path":"/reference/callModule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invoke a Shiny module — callModule","text":"return value, , executing module server function","code":""},{"path":"/reference/checkboxGroupInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Checkbox Group Input Control — checkboxGroupInput","title":"Checkbox Group Input Control — checkboxGroupInput","text":"Create group checkboxes can used toggle multiple choices independently. server receive input character vector selected values.","code":""},{"path":"/reference/checkboxGroupInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkbox Group Input Control — checkboxGroupInput","text":"","code":"checkboxGroupInput(   inputId,   label,   choices = NULL,   selected = NULL,   inline = FALSE,   width = NULL,   choiceNames = NULL,   choiceValues = NULL )"},{"path":"/reference/checkboxGroupInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checkbox Group Input Control — checkboxGroupInput","text":"inputId input slot used access value. label Display label control, NULL label. choices List values show checkboxes . elements list named name rather value displayed user. argument provided, choiceNames choiceValues must provided, vice-versa. values strings; types (logicals numbers) coerced strings. selected values initially selected, . inline TRUE, render choices inline (.e. horizontally) width width input, e.g. '400px', '100%'; see validateCssUnit(). choiceNames, choiceValues List names values, respectively, displayed user app correspond choice (reason, choiceNames choiceValues must length). either arguments provided, must provided choices must provided. advantage using named list choices choiceNames allows type UI object passed (tag objects, icons, HTML code, ...), instead just simple text. See Examples.","code":""},{"path":"/reference/checkboxGroupInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checkbox Group Input Control — checkboxGroupInput","text":"list HTML elements can added UI definition.","code":""},{"path":"/reference/checkboxGroupInput.html","id":"server-value","dir":"Reference","previous_headings":"","what":"Server value","title":"Checkbox Group Input Control — checkboxGroupInput","text":"Character vector values corresponding boxes checked.","code":""},{"path":[]},{"path":"/reference/checkboxGroupInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checkbox Group Input Control — checkboxGroupInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   checkboxGroupInput(\"variable\", \"Variables to show:\",                      c(\"Cylinders\" = \"cyl\",                        \"Transmission\" = \"am\",                        \"Gears\" = \"gear\")),   tableOutput(\"data\") )  server <- function(input, output, session) {   output$data <- renderTable({     mtcars[, c(\"mpg\", input$variable), drop = FALSE]   }, rownames = TRUE) }  shinyApp(ui, server)  ui <- fluidPage(   checkboxGroupInput(\"icons\", \"Choose icons:\",     choiceNames =       list(icon(\"calendar\"), icon(\"bed\"),            icon(\"cog\"), icon(\"bug\")),     choiceValues =       list(\"calendar\", \"bed\", \"cog\", \"bug\")   ),   textOutput(\"txt\") )  server <- function(input, output, session) {   output$txt <- renderText({     icons <- paste(input$icons, collapse = \", \")     paste(\"You chose\", icons)   }) }  shinyApp(ui, server) }"},{"path":"/reference/checkboxInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Checkbox Input Control — checkboxInput","title":"Checkbox Input Control — checkboxInput","text":"Create checkbox can used specify logical values.","code":""},{"path":"/reference/checkboxInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkbox Input Control — checkboxInput","text":"","code":"checkboxInput(inputId, label, value = FALSE, width = NULL)"},{"path":"/reference/checkboxInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checkbox Input Control — checkboxInput","text":"inputId input slot used access value. label Display label control, NULL label. value Initial value (TRUE FALSE). width width input, e.g. '400px', '100%'; see validateCssUnit().","code":""},{"path":"/reference/checkboxInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checkbox Input Control — checkboxInput","text":"checkbox control can added UI definition.","code":""},{"path":"/reference/checkboxInput.html","id":"server-value","dir":"Reference","previous_headings":"","what":"Server value","title":"Checkbox Input Control — checkboxInput","text":"TRUE checked, FALSE otherwise.","code":""},{"path":[]},{"path":"/reference/checkboxInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checkbox Input Control — checkboxInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   checkboxInput(\"somevalue\", \"Some value\", FALSE),   verbatimTextOutput(\"value\") ) server <- function(input, output) {   output$value <- renderText({ input$somevalue }) } shinyApp(ui, server) }"},{"path":"/reference/clickOpts.html","id":null,"dir":"Reference","previous_headings":"","what":"Control interactive plot point events — clickOpts","title":"Control interactive plot point events — clickOpts","text":"functions give control click, dblClick hover events generated imageOutput() plotOutput().","code":""},{"path":"/reference/clickOpts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control interactive plot point events — clickOpts","text":"","code":"clickOpts(id, clip = TRUE)  dblclickOpts(id, clip = TRUE, delay = 400)  hoverOpts(   id,   delay = 300,   delayType = c(\"debounce\", \"throttle\"),   clip = TRUE,   nullOutside = TRUE )"},{"path":"/reference/clickOpts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control interactive plot point events — clickOpts","text":"id Input value name. example, value \"plot_click\", event data available input$plot_click. clip click area clipped plotting area? FALSE, server receive click events even mouse outside plotting area, long still inside image. delay dblClickOpts(): maximum delay (ms) pair clicks counted double-click. hoverOpts(): long delay (ms) debouncing throttling sending mouse location server. delayType type algorithm limiting number hover events. Use \"throttle\" limit number hover events one every delay milliseconds. Use \"debounce\" suspend events cursor moving, wait cursor rest delay milliseconds sending event. nullOutside TRUE (default), value set NULL mouse exits plotting area. FALSE, value stop changing cursor exits plotting area.","code":""},{"path":[]},{"path":"/reference/column.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a column within a UI definition — column","title":"Create a column within a UI definition — column","text":"Create column use within  fluidRow() fixedRow()","code":""},{"path":"/reference/column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a column within a UI definition — column","text":"","code":"column(width, ..., offset = 0)"},{"path":"/reference/column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a column within a UI definition — column","text":"width grid width column (must 1 12) ... Elements include within column offset number columns offset column end previous column.","code":""},{"path":"/reference/column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a column within a UI definition — column","text":"column can included within fluidRow() fixedRow().","code":""},{"path":[]},{"path":"/reference/column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a column within a UI definition — column","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   fluidRow(     column(4,       sliderInput(\"obs\", \"Number of observations:\",                   min = 1, max = 1000, value = 500)     ),     column(8,       plotOutput(\"distPlot\")     )   ) )  server <- function(input, output) {   output$distPlot <- renderPlot({     hist(rnorm(input$obs))   }) }  shinyApp(ui, server)    ui <- fluidPage(   fluidRow(     column(width = 4,       \"4\"     ),     column(width = 3, offset = 2,       \"3 offset 2\"     )   ) ) shinyApp(ui, server = function(input, output) { }) }"},{"path":"/reference/conditionalPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Panel — conditionalPanel","title":"Conditional Panel — conditionalPanel","text":"Creates panel visible , depending value JavaScript expression. JS expression evaluated startup whenever Shiny detects relevant change input/output.","code":""},{"path":"/reference/conditionalPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Panel — conditionalPanel","text":"","code":"conditionalPanel(condition, ..., ns = NS(NULL))"},{"path":"/reference/conditionalPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Panel — conditionalPanel","text":"condition JavaScript expression evaluated repeatedly determine whether panel displayed. ... Elements include panel. ns namespace() object current module, .","code":""},{"path":"/reference/conditionalPanel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditional Panel — conditionalPanel","text":"JS expression, can refer input output JavaScript objects contain current values input output. example, input id foo, can use input.foo read value. (sure modify input/output objects, may cause unpredictable behavior.)","code":""},{"path":"/reference/conditionalPanel.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Conditional Panel — conditionalPanel","text":"recommended use special JavaScript characters period . input id's, use anyway, example, inputId = \"foo.bar\", use input[\"foo.bar\"] instead input.foo.bar read input value.","code":""},{"path":"/reference/conditionalPanel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Panel — conditionalPanel","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   ui <- fluidPage(     sidebarPanel(       selectInput(\"plotType\", \"Plot Type\",         c(Scatter = \"scatter\", Histogram = \"hist\")       ),       # Only show this panel if the plot type is a histogram       conditionalPanel(         condition = \"input.plotType == 'hist'\",         selectInput(           \"breaks\", \"Breaks\",           c(\"Sturges\", \"Scott\", \"Freedman-Diaconis\", \"[Custom]\" = \"custom\")         ),         # Only show this panel if Custom is selected         conditionalPanel(           condition = \"input.breaks == 'custom'\",           sliderInput(\"breakCount\", \"Break Count\", min = 1, max = 50, value = 10)         )       )     ),     mainPanel(       plotOutput(\"plot\")     )   )    server <- function(input, output) {     x <- rnorm(100)     y <- rnorm(100)      output$plot <- renderPlot({       if (input$plotType == \"scatter\") {         plot(x, y)       } else {         breaks <- input$breaks         if (breaks == \"custom\") {           breaks <- input$breakCount         }          hist(x, breaks = breaks)       }     })   }    shinyApp(ui, server) }"},{"path":"/reference/createRenderFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Implement custom render functions — createRenderFunction","title":"Implement custom render functions — createRenderFunction","text":"Developer-facing utilities implementing custom renderXXX() function. using utilities directly, consider using htmlwidgets package implement custom outputs (.e., custom renderXXX()/xxxOutput() functions). said, utilities can used directly full-blown htmlwidget needed /user-supplied reactive expression needs wrapped additional call(s).","code":""},{"path":"/reference/createRenderFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Implement custom render functions — createRenderFunction","text":"","code":"createRenderFunction(   func,   transform = function(value, session, name, ...) value,   outputFunc = NULL,   outputArgs = NULL,   cacheHint = \"auto\",   cacheWriteHook = NULL,   cacheReadHook = NULL )  quoToFunction(q, label = sys.call(-1)[[1]], ..stacktraceon = FALSE)  installExprFunction(   expr,   name,   eval.env = parent.frame(2),   quoted = FALSE,   assign.env = parent.frame(1),   label = sys.call(-1)[[1]],   wrappedWithLabel = TRUE,   ..stacktraceon = FALSE )"},{"path":"/reference/createRenderFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Implement custom render functions — createRenderFunction","text":"func function without parameters, returns user data. returned value promise, render function proceed async mode. transform function takes four arguments: value, session, name, ... (future-proofing). function invoked time value returned func, responsible changing value JSON-ready value JSON-encoded sent browser. outputFunc UI function used (commonly used) render function. can used R Markdown documents create complete output widgets just render function. outputArgs list arguments pass uiFunc. Render functions include outputArgs = list() parameter list, pass value markRenderFunction, allow app authors customize outputs. (Currently, supported dynamically generated UIs, created Shiny code snippets embedded R Markdown documents). cacheHint One \"auto\", FALSE, information identify instance caching using bindCache(). \"auto\", try automatically infer caching information. FALSE, allow caching object. render functions (renderPlot) contain internal state makes unsuitable caching. cacheWriteHook Used render function passed bindCache(). optional callback function invoke saving value render function cache. function must accept one argument, value returned renderFunc, return value store cache. cacheReadHook Used render function passed bindCache(). optional callback function invoke reading value cache (cache hit). function passed one argument, value retrieved cache. can useful side effect needs occur render function behave correctly. example, render functions call createWebDependency() Shiny able serve JS CSS resources. q Quosure expression x. capturing expressions create quosure, recommended use enquo0() unquote object early. See enquo0() details. label label object shown debugger. Defaults name calling function. expr quoted unquoted expression, quosure. name name function given eval.env desired environment function. Defaults calling environment two steps back. quoted expression quoted? assign.env environment function assigned. wrappedWithLabel, ..stacktraceon Advanced use . stack manipulation purposes; see stacktrace().","code":""},{"path":"/reference/createRenderFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Implement custom render functions — createRenderFunction","text":"annotated render function, ready assigned output slot.","code":""},{"path":"/reference/createRenderFunction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Implement custom render functions — createRenderFunction","text":"implement custom renderXXX() function, essentially 2 things needed: Capture user's reactive expression function. New renderXXX() functions can use quoToFunction() , already existing renderXXX() functions contain env quoted parameters may want continue using installExprFunction() better legacy support (see examples). Flag resulting function (1) Shiny rendering function also provide UI container displaying result rendering function. createRenderFunction() currently recommended (instead markRenderFunction()) step (see examples).","code":""},{"path":"/reference/createRenderFunction.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Implement custom render functions — createRenderFunction","text":"quoToFunction(): convert quosure function. installExprFunction(): converts user's reactive expr function assigned name assign.env.","code":""},{"path":"/reference/createRenderFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Implement custom render functions — createRenderFunction","text":"","code":"# A custom render function that repeats the supplied value 3 times renderTriple <- function(expr) {   # Wrap user-supplied reactive expression into a function   func <- quoToFunction(rlang::enquo0(expr))    createRenderFunction(     func,     transform = function(value, session, name, ...) {       paste(rep(value, 3), collapse=\", \")     },     outputFunc = textOutput   ) }  # For better legacy support, consider using installExprFunction() over quoToFunction() renderTripleLegacy <- function(expr, env = parent.frame(), quoted = FALSE) {   func <- installExprFunction(expr, \"func\", env, quoted)    createRenderFunction(     func,     transform = function(value, session, name, ...) {       paste(rep(value, 3), collapse=\", \")     },     outputFunc = textOutput   ) }  # Test render function from the console reactiveConsole(TRUE)  v <- reactiveVal(\"basic\") r <- renderTriple({ v() }) r() #> [1] \"basic, basic, basic\" #> [1] \"basic, basic, basic\"  # User can supply quoted code via rlang::quo(). Note that evaluation of the # expression happens when r2() is invoked, not when r2 is created. q <- rlang::quo({ v() }) r2 <- rlang::inject(renderTriple(!!q)) v(\"rlang\") r2() #> [1] \"rlang, rlang, rlang\" #> [1] \"rlang, rlang, rlang\"  # Supplying quoted code without rlang::quo() requires installExprFunction() expr <- quote({ v() }) r3 <- renderTripleLegacy(expr, quoted = TRUE) v(\"legacy\") r3() #> [1] \"legacy, legacy, legacy\" #> [1] \"legacy, legacy, legacy\"  # The legacy approach also supports with quosures (env is ignored in this case) q <- rlang::quo({ v() }) r4 <- renderTripleLegacy(q, quoted = TRUE) v(\"legacy-rlang\") r4() #> [1] \"legacy-rlang, legacy-rlang, legacy-rlang\" #> [1] \"legacy-rlang, legacy-rlang, legacy-rlang\"  # Turn off reactivity in the console reactiveConsole(FALSE)"},{"path":"/reference/createWebDependency.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a web dependency — createWebDependency","title":"Create a web dependency — createWebDependency","text":"Ensure file-based HTML dependency (htmltools package) can served Shiny's HTTP server. function works using addResourcePath() map HTML dependency's directory URL.","code":""},{"path":"/reference/createWebDependency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a web dependency — createWebDependency","text":"","code":"createWebDependency(dependency, scrubFile = TRUE)"},{"path":"/reference/createWebDependency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a web dependency — createWebDependency","text":"dependency single HTML dependency object, created using htmltools::htmlDependency(). src value named, href /file names must present. scrubFile TRUE (default), remove src$file dependency. prevents local file path sent client dynamic web dependencies used. FALSE, remove src$file. Setting FALSE needed unusual cases.","code":""},{"path":"/reference/createWebDependency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a web dependency — createWebDependency","text":"single HTML dependency object href-named element src.","code":""},{"path":"/reference/dateInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create date input — dateInput","title":"Create date input — dateInput","text":"Creates text input , clicked , brings calendar user can click select dates.","code":""},{"path":"/reference/dateInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create date input — dateInput","text":"","code":"dateInput(   inputId,   label,   value = NULL,   min = NULL,   max = NULL,   format = \"yyyy-mm-dd\",   startview = \"month\",   weekstart = 0,   language = \"en\",   width = NULL,   autoclose = TRUE,   datesdisabled = NULL,   daysofweekdisabled = NULL )"},{"path":"/reference/dateInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create date input — dateInput","text":"inputId input slot used access value. label Display label control, NULL label. value starting date. Either Date object, string yyyy-mm-dd format. NULL (default), use current date client's time zone. min minimum allowed date. Either Date object, string yyyy-mm-dd format. max maximum allowed date. Either Date object, string yyyy-mm-dd format. format format date display browser. Defaults \"yyyy-mm-dd\". startview date range shown input object first clicked. Can \"month\" (default), \"year\", \"decade\". weekstart day start week. integer 0 (Sunday) 6 (Saturday). language language used month day names. Default \"en\". valid values include \"ar\", \"az\", \"bg\", \"bs\", \"ca\", \"cs\", \"cy\", \"da\", \"de\", \"el\", \"en-AU\", \"en-GB\", \"eo\", \"es\", \"et\", \"eu\", \"fa\", \"fi\", \"fo\", \"fr-CH\", \"fr\", \"gl\", \"\", \"hr\", \"hu\", \"hy\", \"id\", \"\", \"-CH\", \"\", \"ja\", \"ka\", \"kh\", \"kk\", \"ko\", \"kr\", \"lt\", \"lv\", \"\", \"mk\", \"mn\", \"ms\", \"nb\", \"nl-\", \"nl\", \"\", \"pl\", \"pt-BR\", \"pt\", \"ro\", \"rs-latin\", \"rs\", \"ru\", \"sk\", \"sl\", \"sq\", \"sr-latin\", \"sr\", \"sv\", \"sw\", \"th\", \"tr\", \"uk\", \"vi\", \"zh-CN\", \"zh-TW\". width width input, e.g. '400px', '100%'; see validateCssUnit(). autoclose Whether close datepicker immediately date selected. datesdisabled dates disabled. Either Date object, string yyyy-mm-dd format. daysofweekdisabled Days week disabled. integer vector values 0 (Sunday) 6 (Saturday).","code":""},{"path":"/reference/dateInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create date input — dateInput","text":"date format string specifies date displayed browser. allows following values: yy Year without century (12) yyyy Year century (2012) mm Month number, leading zero (01-12) m Month number, without leading zero (1-12) M Abbreviated month name MM Full month name dd Day month leading zero d Day month without leading zero D Abbreviated weekday name DD Full weekday name","code":""},{"path":"/reference/dateInput.html","id":"server-value","dir":"Reference","previous_headings":"","what":"Server value","title":"Create date input — dateInput","text":"Date vector length 1.","code":""},{"path":[]},{"path":"/reference/dateInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create date input — dateInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   dateInput(\"date1\", \"Date:\", value = \"2012-02-29\"),    # Default value is the date in client's time zone   dateInput(\"date2\", \"Date:\"),    # value is always yyyy-mm-dd, even if the display format is different   dateInput(\"date3\", \"Date:\", value = \"2012-02-29\", format = \"mm/dd/yy\"),    # Pass in a Date object   dateInput(\"date4\", \"Date:\", value = Sys.Date()-10),    # Use different language and different first day of week   dateInput(\"date5\", \"Date:\",           language = \"ru\",           weekstart = 1),    # Start with decade view instead of default month view   dateInput(\"date6\", \"Date:\",             startview = \"decade\"),    # Disable Mondays and Tuesdays.   dateInput(\"date7\", \"Date:\", daysofweekdisabled = c(1,2)),    # Disable specific dates.   dateInput(\"date8\", \"Date:\", value = \"2012-02-29\",             datesdisabled = c(\"2012-03-01\", \"2012-03-02\")) )  shinyApp(ui, server = function(input, output) { }) }"},{"path":"/reference/dateRangeInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create date range input — dateRangeInput","title":"Create date range input — dateRangeInput","text":"Creates pair text inputs , clicked , bring calendars user can click select dates.","code":""},{"path":"/reference/dateRangeInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create date range input — dateRangeInput","text":"","code":"dateRangeInput(   inputId,   label,   start = NULL,   end = NULL,   min = NULL,   max = NULL,   format = \"yyyy-mm-dd\",   startview = \"month\",   weekstart = 0,   language = \"en\",   separator = \" to \",   width = NULL,   autoclose = TRUE )"},{"path":"/reference/dateRangeInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create date range input — dateRangeInput","text":"inputId input slot used access value. label Display label control, NULL label. start initial start date. Either Date object, string yyyy-mm-dd format. NULL (default), use current date client's time zone. end initial end date. Either Date object, string yyyy-mm-dd format. NULL (default), use current date client's time zone. min minimum allowed date. Either Date object, string yyyy-mm-dd format. max maximum allowed date. Either Date object, string yyyy-mm-dd format. format format date display browser. Defaults \"yyyy-mm-dd\". startview date range shown input object first clicked. Can \"month\" (default), \"year\", \"decade\". weekstart day start week. integer 0 (Sunday) 6 (Saturday). language language used month day names. Default \"en\". valid values include \"ar\", \"az\", \"bg\", \"bs\", \"ca\", \"cs\", \"cy\", \"da\", \"de\", \"el\", \"en-AU\", \"en-GB\", \"eo\", \"es\", \"et\", \"eu\", \"fa\", \"fi\", \"fo\", \"fr-CH\", \"fr\", \"gl\", \"\", \"hr\", \"hu\", \"hy\", \"id\", \"\", \"-CH\", \"\", \"ja\", \"ka\", \"kh\", \"kk\", \"ko\", \"kr\", \"lt\", \"lv\", \"\", \"mk\", \"mn\", \"ms\", \"nb\", \"nl-\", \"nl\", \"\", \"pl\", \"pt-BR\", \"pt\", \"ro\", \"rs-latin\", \"rs\", \"ru\", \"sk\", \"sl\", \"sq\", \"sr-latin\", \"sr\", \"sv\", \"sw\", \"th\", \"tr\", \"uk\", \"vi\", \"zh-CN\", \"zh-TW\". separator String display start end input boxes. width width input, e.g. '400px', '100%'; see validateCssUnit(). autoclose Whether close datepicker immediately date selected.","code":""},{"path":"/reference/dateRangeInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create date range input — dateRangeInput","text":"date format string specifies date displayed browser. allows following values: yy Year without century (12) yyyy Year century (2012) mm Month number, leading zero (01-12) m Month number, without leading zero (1-12) M Abbreviated month name MM Full month name dd Day month leading zero d Day month without leading zero D Abbreviated weekday name DD Full weekday name","code":""},{"path":"/reference/dateRangeInput.html","id":"server-value","dir":"Reference","previous_headings":"","what":"Server value","title":"Create date range input — dateRangeInput","text":"Date vector length 2.","code":""},{"path":[]},{"path":"/reference/dateRangeInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create date range input — dateRangeInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   dateRangeInput(\"daterange1\", \"Date range:\",                  start = \"2001-01-01\",                  end   = \"2010-12-31\"),    # Default start and end is the current date in the client's time zone   dateRangeInput(\"daterange2\", \"Date range:\"),    # start and end are always specified in yyyy-mm-dd, even if the display   # format is different   dateRangeInput(\"daterange3\", \"Date range:\",                  start  = \"2001-01-01\",                  end    = \"2010-12-31\",                  min    = \"2001-01-01\",                  max    = \"2012-12-21\",                  format = \"mm/dd/yy\",                  separator = \" - \"),    # Pass in Date objects   dateRangeInput(\"daterange4\", \"Date range:\",                  start = Sys.Date()-10,                  end = Sys.Date()+10),    # Use different language and different first day of week   dateRangeInput(\"daterange5\", \"Date range:\",                  language = \"de\",                  weekstart = 1),    # Start with decade view instead of default month view   dateRangeInput(\"daterange6\", \"Date range:\",                  startview = \"decade\") )  shinyApp(ui, server = function(input, output) { }) }"},{"path":"/reference/debounce.html","id":null,"dir":"Reference","previous_headings":"","what":"Slow down a reactive expression with debounce/throttle — debounce","title":"Slow down a reactive expression with debounce/throttle — debounce","text":"Transforms reactive expression preventing invalidation signals sent unnecessarily often. lets ignore \"chatty\" reactive expression becomes idle, useful intermediate values matter much final value, downstream calculations depend reactive expression take long time. debounce throttle use different algorithms slowing invalidation signals; see Details.","code":""},{"path":"/reference/debounce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slow down a reactive expression with debounce/throttle — debounce","text":"","code":"debounce(r, millis, priority = 100, domain = getDefaultReactiveDomain())  throttle(r, millis, priority = 100, domain = getDefaultReactiveDomain())"},{"path":"/reference/debounce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slow down a reactive expression with debounce/throttle — debounce","text":"r reactive expression (invalidates often). millis debounce/throttle time window. may optionally pass -arg function reactive expression instead, e.g. let end-user control time window. priority Debounce/throttle implemented hood using observers. Use parameter set priority observers. Generally, higher priorities downstream observers outputs (default zero). domain See domains.","code":""},{"path":"/reference/debounce.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Slow down a reactive expression with debounce/throttle — debounce","text":"true debounce/throttle prevent r called many times (fact may called times usual), rather, reactive invalidation signal produced r debounced/throttled instead. Therefore, functions used r cheap things trigger (downstream outputs reactives) expensive. Debouncing means every invalidation r held specified time window. r invalidates within time window, timer starts . means long invalidations continually arrive r within time window, debounced reactive invalidate . invalidations stop (slow sufficiently) downstream invalidation sent. ooo-oo-oo---- => -----------o- (graphical depiction, character represents unit time, time window 3 characters.) Throttling, hand, delays invalidation throttled reactive recently (within time window) invalidated. New r invalidations reset time window. means invalidations continually come r within time window, throttled reactive invalidate regularly, rate equal slower time window. ooo-oo-oo---- => o--o--o--o---","code":""},{"path":"/reference/debounce.html","id":"limitations","dir":"Reference","previous_headings":"","what":"Limitations","title":"Slow down a reactive expression with debounce/throttle — debounce","text":"R single threaded, come close guaranteeing timing debounce/throttle (timing-related functions Shiny) consistent accurate; time want emit invalidation signal, R may performing different task way interrupt (necessarily want ). Therefore, best think time windows pass functions minimums. may also see undesirable behavior amount time spent downstream processing change approaches exceeds time window: case, debounce/throttle may effect, time subsequent event considered already time window expired.","code":""},{"path":"/reference/debounce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slow down a reactive expression with debounce/throttle — debounce","text":"","code":"## Only run examples in interactive R sessions if (interactive()) { options(device.ask.default = FALSE)  library(shiny) library(magrittr)  ui <- fluidPage(   plotOutput(\"plot\", click = clickOpts(\"hover\")),   helpText(\"Quickly click on the plot above, while watching the result table below:\"),   tableOutput(\"result\") )  server <- function(input, output, session) {   hover <- reactive({     if (is.null(input$hover))       list(x = NA, y = NA)     else       input$hover   })   hover_d <- hover %>% debounce(1000)   hover_t <- hover %>% throttle(1000)    output$plot <- renderPlot({     plot(cars)   })    output$result <- renderTable({     data.frame(       mode = c(\"raw\", \"throttle\", \"debounce\"),       x = c(hover()$x, hover_t()$x, hover_d()$x),       y = c(hover()$y, hover_t()$y, hover_d()$y)     )   }) }  shinyApp(ui, server) }"},{"path":"/reference/devmode.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny Developer Mode — devmode","title":"Shiny Developer Mode — devmode","text":"Developer Mode enables number options() make developer's life easier, like enabling non-minified JS printing messages deprecated functions options. Shiny Developer Mode can enabled calling devmode(TRUE) disabled calling devmode(FALSE). Please see function descriptions details.","code":""},{"path":"/reference/devmode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny Developer Mode — devmode","text":"","code":"devmode(   devmode = getOption(\"shiny.devmode\", TRUE),   verbose = getOption(\"shiny.devmode.verbose\", TRUE) )  in_devmode()  with_devmode(devmode, code, verbose = getOption(\"shiny.devmode.verbose\", TRUE))  devmode_inform(   message,   .frequency = \"regularly\",   .frequency_id = message,   .file = stderr(),   ... )  register_devmode_option(name, devmode_message = NULL, devmode_default = NULL)  get_devmode_option(   name,   default = NULL,   devmode_default = missing_arg(),   devmode_message = missing_arg() )"},{"path":"/reference/devmode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny Developer Mode — devmode","text":"devmode Logical value set TRUE enable Shiny Developer Mode verbose Logical value set TRUE display Shiny Developer messages code Code execute temporary Dev Mode options set message Developer Mode message sent rlang::inform() .frequency Frequency Developer Mode message used rlang::inform(). Defaults every 8 hours. .frequency_id rlang::inform() message identifier. Defaults message. .file Output connection rlang::inform(). Defaults stderr() ... Parameters passed rlang::inform() name Name option look options() devmode_message Message display every 8 hours utilizing devmode_default value.  devmode_message missing, registered devmode_message value used. devmode_default Default value return in_devmode() returns TRUE specified option set options(). get_devmode_option(), devmode_default missing, registered devmode_default value used. default Default value return in_devmode() returns TRUE specified option set options().","code":""},{"path":"/reference/devmode.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Shiny Developer Mode — devmode","text":"devmode(): Function set two options enable/disable Shiny Developer Mode Developer messages in_devmode(): Determines Shiny Developer Mode. getOption(\"shiny.devmode\") set TRUE testing inside testthat, Shiny Developer Mode enabled. with_devmode(): Temporarily set Shiny Developer Mode Developer message verbosity devmode_inform(): Shiny Developer Mode verbosity enabled, displays message every 8 hrs (default) register_devmode_option(): Registers Shiny Developer Mode option updated value Developer message. registration method allows package authors write one message single location. example, following Shiny Developer Mode options registered:   known, non-Shiny Developer Mode options: Sass:   get_devmode_option(): Provides consistent way change expected getOption() behavior Developer Mode enabled. method similar getOption() globally set option takes precedence. See section \"Avoiding direct dependency shiny\" get_devmode_option() implementation details. Package developers: Register Dev Mode option using register_devmode_option() avoid supplying devmode_default devmode_message values throughout package. (requires shiny dependency.)","code":"# Reload the Shiny app when a sourced R file changes register_devmode_option(   \"shiny.autoreload\",   \"Turning on shiny autoreload. To disable, call `options(shiny.autoreload = FALSE)`\",   devmode_default = TRUE )  # Use the unminified Shiny JavaScript file, `shiny.js` register_devmode_option(   \"shiny.minified\",   \"Using full shiny javascript file. To use the minified version, call `options(shiny.minified = TRUE)`\",   devmode_default = FALSE )  # Display the full stack trace when errors occur during Shiny app execution register_devmode_option(   \"shiny.fullstacktrace\",   \"Turning on full stack trace. To disable, call `options(shiny.fullstacktrace = FALSE)`\",   devmode_default = TRUE ) # Display the full stack trace when errors occur during Shiny app execution register_devmode_option(   \"sass.cache\",   \"Turning off sass cache. To use default caching, call `options(sass.cache = TRUE)`\",   devmode_default = FALSE )"},{"path":"/reference/devmode.html","id":"avoiding-direct-dependency-on-shiny","dir":"Reference","previous_headings":"","what":"Avoiding direct dependency on shiny","title":"Shiny Developer Mode — devmode","text":"methods explained help file act independently rest Shiny included provide blue prints packages. package already (willing take) dependency Shiny, recommend using exported Shiny methods consistent behavior. Note use exported Shiny methods, cause Shiny package load. may undesirable code used (example) R Markdown documents Shiny runtime (runtime: shiny). package can take dependency Shiny, recommending re-implementing two functions: in_devmode(): function return TRUE getOption(\"shiny.devmode\") set. addition, strongly recommend also checks make sure testthat testing.   get_devmode_option(name, default, devmode_default, devmode_message): function similar getOption(name, default), option set, default value changes depending Dev Mode. get_devmode_option() implemented follows: Dev Mode: Return getOption(name, default). Dev Mode: Get global option getOption(name) value. global option value set: Return value. global option value set: Notify developer Dev Mode default value used. Return Dev Mode default value. notifying developer default value changed, strongly recommend displaying message (devmode_message) stderr() every 8 hours using rlang::inform(). keep author date Dev Mode options altered. allow developers chance disable Dev Mode messages, message skipped getOption(\"shiny.devmode.verbose\", TRUE) TRUE.   remaining functions file used author convenience recommended reimplementation situations.","code":"in_devmode <- function() {   isTRUE(getOption(\"shiny.devmode\", FALSE)) &&     !identical(Sys.getenv(\"TESTTHAT\"), \"true\") } get_devmode_option <- function(name, default = NULL, devmode_default, devmode_message) {   if (!in_devmode()) {     # Dev Mode disabled, act like `getOption()`     return(getOption(name, default = default))   }    # Dev Mode enabled, update the default value for `getOption()`   getOption(name, default = {     # Notify developer     if (       !missing(devmode_message) &&       !is.null(devmode_message) &&       getOption(\"shiny.devmode.verbose\", TRUE)     ) {       rlang::inform(         message = devmode_message,         .frequency = \"regularly\",         .frequency_id = devmode_message,         .file = stderr()       )     }      # Return Dev Mode default value `devmode_default`     devmode_default   }) }"},{"path":"/reference/devmode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny Developer Mode — devmode","text":"","code":"# Enable Shiny Developer mode devmode()  in_devmode() # TRUE/FALSE? #> [1] TRUE  # Execute code in a temporary shiny dev mode with_devmode(TRUE, in_devmode()) # TRUE #> [1] TRUE  # Ex: Within shiny, we register the option \"shiny.minified\" #   to default to `FALSE` when in Dev Mode if (FALSE) register_devmode_option(   \"shiny.minified\",   devmode_message = paste0(     \"Using full shiny javascript file. \",     \"To use the minified version, call `options(shiny.minified = TRUE)`\"   ),   devmode_default = FALSE )  # Used within `shiny::runApp(launch.browser)` get_devmode_option(\"shiny.minified\", TRUE) # TRUE if Dev mode is off #> shiny devmode - Using full shiny javascript file. To use the minified version, call `options(shiny.minified = TRUE)` #> This message is displayed once every 8 hours. #> [1] FALSE is_minified <- with_devmode(TRUE, {   get_devmode_option(\"shiny.minified\", TRUE) }) is_minified # FALSE #> [1] FALSE"},{"path":"/reference/diskCache.html","id":null,"dir":"Reference","previous_headings":"","what":"Create disk cache (deprecated) — diskCache","title":"Create disk cache (deprecated) — diskCache","text":"Create disk cache (deprecated)","code":""},{"path":"/reference/diskCache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create disk cache (deprecated) — diskCache","text":"","code":"diskCache(   dir = NULL,   max_size = 500 * 1024^2,   max_age = Inf,   max_n = Inf,   evict = c(\"lru\", \"fifo\"),   destroy_on_finalize = FALSE,   missing = key_missing(),   exec_missing = deprecated(),   logfile = NULL )"},{"path":"/reference/diskCache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create disk cache (deprecated) — diskCache","text":"dir Directory store files cache. NULL (default) create use temporary directory. max_size Maximum size cache, bytes. cache exceeds size, cached objects removed according value evict. Use Inf size limit. default 1 gigabyte. max_age Maximum age files cache evicted, seconds. Use Inf age limit. max_n Maximum number objects cache. number objects exceeds value, cached objects removed according value evict. Use Inf limit number items. evict eviction policy use decide objects removed cache pruning occurs. Currently, \"lru\" \"fifo\" supported. destroy_on_finalize TRUE, cache_disk object garbage collected, cache directory objects inside deleted disk. FALSE (default), nothing finalized. missing value return get(key) called key present cache. default key_missing() object. actually expression evaluated time cache miss. See section Missing keys information. exec_missing Deprecated. logfile optional filename connection object logging information written. log console, use stderr() stdout().","code":""},{"path":"/reference/domains.html","id":null,"dir":"Reference","previous_headings":"","what":"Reactive domains — domains","title":"Reactive domains — domains","text":"Reactive domains mechanism establishing ownership reactive primitives (like reactive expressions observers), even set reactive primitives dynamically created. useful lifetime management (.e. destroying observers Shiny session created ends) error handling.","code":""},{"path":"/reference/domains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reactive domains — domains","text":"","code":"getDefaultReactiveDomain()  withReactiveDomain(domain, expr)  onReactiveDomainEnded(domain, callback, failIfNull = FALSE)"},{"path":"/reference/domains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reactive domains — domains","text":"domain valid domain object (example, Shiny session), NULL expr expression evaluate domain callback callback function invoked failIfNull TRUE error given domain NULL","code":""},{"path":"/reference/domains.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reactive domains — domains","text":"given time, can either single \"default\" reactive domain object, none (.e. reactive domain object NULL). can access current default reactive domain calling getDefaultReactiveDomain. Unless specify otherwise, newly created observers reactive expressions assigned current default domain (). can override assignment providing explicit domain argument reactive() observe(). advanced usage, possible override default domain using withReactiveDomain. domain argument made default domain expr evaluated. Implementers new reactive primitives can use onReactiveDomainEnded convenience function registering callbacks. reactive domain NULL failIfNull FALSE, callback never invoked.","code":""},{"path":"/reference/downloadButton.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a download button or link — downloadButton","title":"Create a download button or link — downloadButton","text":"Use functions create download button link; clicked, initiate browser download. filename contents specified corresponding downloadHandler() defined server function.","code":""},{"path":"/reference/downloadButton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a download button or link — downloadButton","text":"","code":"downloadButton(   outputId,   label = \"Download\",   class = NULL,   ...,   icon = shiny::icon(\"download\") )  downloadLink(outputId, label = \"Download\", class = NULL, ...)"},{"path":"/reference/downloadButton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a download button or link — downloadButton","text":"outputId name output slot downloadHandler assigned . label label appear button. class Additional CSS classes apply tag, . ... arguments pass container tag function. icon icon() appear button. Default icon(\"download\").","code":""},{"path":[]},{"path":"/reference/downloadButton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a download button or link — downloadButton","text":"","code":"if (FALSE) { ui <- fluidPage(   p(\"Choose a dataset to download.\"),   selectInput(\"dataset\", \"Dataset\", choices = c(\"mtcars\", \"airquality\")),   downloadButton(\"downloadData\", \"Download\") )  server <- function(input, output) {   # The requested dataset   data <- reactive({     get(input$dataset)   })    output$downloadData <- downloadHandler(     filename = function() {       # Use the selected dataset as the suggested file name       paste0(input$dataset, \".csv\")     },     content = function(file) {       # Write the dataset to the `file` that will be downloaded       write.csv(data(), file)     }   ) }  shinyApp(ui, server) }"},{"path":"/reference/downloadHandler.html","id":null,"dir":"Reference","previous_headings":"","what":"File Downloads — downloadHandler","title":"File Downloads — downloadHandler","text":"Allows content Shiny application made available user file downloads (example, downloading currently visible data CSV file). filename contents can calculated dynamically time user initiates download. Assign return value slot output server function, UI use downloadButton() downloadLink() make download available.","code":""},{"path":"/reference/downloadHandler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File Downloads — downloadHandler","text":"","code":"downloadHandler(filename, content, contentType = NULL, outputArgs = list())"},{"path":"/reference/downloadHandler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File Downloads — downloadHandler","text":"filename string filename, including extension, user's web browser default downloading file; function returns string. (Reactive values functions may used function.) content function takes single argument file file path (string) nonexistent temp file, writes content file path. (Reactive values functions may used function.) contentType string download's content type, example \"text/csv\" \"image/png\". NULL, content type guessed based filename extension, application/octet-stream extension unknown. outputArgs list arguments passed implicit call downloadButton() downloadHandler used interactive R Markdown document.","code":""},{"path":"/reference/downloadHandler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File Downloads — downloadHandler","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   downloadButton(\"downloadData\", \"Download\") )  server <- function(input, output) {   # Our dataset   data <- mtcars    output$downloadData <- downloadHandler(     filename = function() {       paste(\"data-\", Sys.Date(), \".csv\", sep=\"\")     },     content = function(file) {       write.csv(data, file)     }   ) }  shinyApp(ui, server) }"},{"path":"/reference/enableBookmarking.html","id":null,"dir":"Reference","previous_headings":"","what":"Enable bookmarking for a Shiny application — enableBookmarking","title":"Enable bookmarking for a Shiny application — enableBookmarking","text":"two types bookmarking: saving application's state disk server, encoding application's state URL. state saved disk, state can restored corresponding state ID. URL-encoded state, state application encoded URL, server-side storage needed. URL-encoded bookmarking appropriate applications many input values need recorded. browsers length limit URLs 2000 characters, many inputs, length URL can exceed limit. Saved--server bookmarking appropriate many inputs, bookmarked state requires storing files.","code":""},{"path":"/reference/enableBookmarking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enable bookmarking for a Shiny application — enableBookmarking","text":"","code":"enableBookmarking(store = c(\"url\", \"server\", \"disable\"))"},{"path":"/reference/enableBookmarking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enable bookmarking for a Shiny application — enableBookmarking","text":"store Either \"url\", encodes relevant values URL, \"server\", saves disk server, \"disable\", disables previously-enabled bookmarking.","code":""},{"path":"/reference/enableBookmarking.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Enable bookmarking for a Shiny application — enableBookmarking","text":"restoring state work properly, UI must function takes one argument, request. Shiny applications, UI function; might form fluidPage(....). Converting function simple wrapping function, function(request) { fluidPage(....) }. default, input values bookmarked, except values passwordInputs. fileInputs saved state saved server, state encoded URL. bookmarking state, arbitrary values can stored, passing function onBookmark argument. function passed ShinySaveState object. values field object list can manipulated save extra information. Additionally, state saved server, dir field object can used save extra information files directory. saved--server state, state directory chosen: running hosting environment Shiny Server Connect, hosting environment choose directory. running app directory runApp(), saved states saved subdirectory app called shiny_bookmarks. running Shiny app object generated code (run directory), saved states saved subdirectory current working directory called shiny_bookmarks. used shinyApp(), function must called shinyApp(), shinyApp()'s onStart function. alternative calling enableBookmarking() function use enableBookmarking argument shinyApp(). See examples .","code":""},{"path":[]},{"path":"/reference/enableBookmarking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enable bookmarking for a Shiny application — enableBookmarking","text":"","code":"## Only run these examples in interactive R sessions if (interactive()) {  # Basic example with state encoded in URL ui <- function(request) {   fluidPage(     textInput(\"txt\", \"Text\"),     checkboxInput(\"chk\", \"Checkbox\"),     bookmarkButton()   ) } server <- function(input, output, session) { } enableBookmarking(\"url\") shinyApp(ui, server)   # An alternative to calling enableBookmarking(): use shinyApp's # enableBookmarking argument shinyApp(ui, server, enableBookmarking = \"url\")   # Same basic example with state saved to disk enableBookmarking(\"server\") shinyApp(ui, server)   # Save/restore arbitrary values ui <- function(req) {   fluidPage(     textInput(\"txt\", \"Text\"),     checkboxInput(\"chk\", \"Checkbox\"),     bookmarkButton(),     br(),     textOutput(\"lastSaved\")   ) } server <- function(input, output, session) {   vals <- reactiveValues(savedTime = NULL)   output$lastSaved <- renderText({     if (!is.null(vals$savedTime))       paste(\"Last saved at\", vals$savedTime)     else       \"\"   })    onBookmark(function(state) {     vals$savedTime <- Sys.time()     # state is a mutable reference object, and we can add arbitrary values     # to it.     state$values$time <- vals$savedTime   })   onRestore(function(state) {     vals$savedTime <- state$values$time   }) } enableBookmarking(store = \"url\") shinyApp(ui, server)   # Usable with dynamic UI (set the slider, then change the text input, # click the bookmark button) ui <- function(request) {   fluidPage(     sliderInput(\"slider\", \"Slider\", 1, 100, 50),     uiOutput(\"ui\"),     bookmarkButton()   ) } server <- function(input, output, session) {   output$ui <- renderUI({     textInput(\"txt\", \"Text\", input$slider)   }) } enableBookmarking(\"url\") shinyApp(ui, server)   # Exclude specific inputs (The only input that will be saved in this # example is chk) ui <- function(request) {   fluidPage(     passwordInput(\"pw\", \"Password\"), # Passwords are never saved     sliderInput(\"slider\", \"Slider\", 1, 100, 50), # Manually excluded below     checkboxInput(\"chk\", \"Checkbox\"),     bookmarkButton()   ) } server <- function(input, output, session) {   setBookmarkExclude(\"slider\") } enableBookmarking(\"url\") shinyApp(ui, server)   # Update the browser's location bar every time an input changes. This should # not be used with enableBookmarking(\"server\"), because that would create a # new saved state on disk every time the user changes an input. ui <- function(req) {   fluidPage(     textInput(\"txt\", \"Text\"),     checkboxInput(\"chk\", \"Checkbox\")   ) } server <- function(input, output, session) {   observe({     # Trigger this observer every time an input changes     reactiveValuesToList(input)     session$doBookmark()   })   onBookmarked(function(url) {     updateQueryString(url)   }) } enableBookmarking(\"url\") shinyApp(ui, server)   # Save/restore uploaded files ui <- function(request) {   fluidPage(     sidebarLayout(       sidebarPanel(         fileInput(\"file1\", \"Choose CSV File\", multiple = TRUE,           accept = c(             \"text/csv\",             \"text/comma-separated-values,text/plain\",             \".csv\"           )         ),         tags$hr(),         checkboxInput(\"header\", \"Header\", TRUE),         bookmarkButton()       ),       mainPanel(         tableOutput(\"contents\")       )     )   ) } server <- function(input, output) {   output$contents <- renderTable({     inFile <- input$file1     if (is.null(inFile))       return(NULL)      if (nrow(inFile) == 1) {       read.csv(inFile$datapath, header = input$header)     } else {       data.frame(x = \"multiple files\")     }   }) } enableBookmarking(\"server\") shinyApp(ui, server)  }"},{"path":"/reference/exportTestValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Register expressions for export in test mode — exportTestValues","title":"Register expressions for export in test mode — exportTestValues","text":"function registers expressions evaluated test export event occurs. events triggered accessing snapshot URL.","code":""},{"path":"/reference/exportTestValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register expressions for export in test mode — exportTestValues","text":"","code":"exportTestValues(   ...,   quoted_ = FALSE,   env_ = parent.frame(),   session_ = getDefaultReactiveDomain() )"},{"path":"/reference/exportTestValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register expressions for export in test mode — exportTestValues","text":"... Named arguments quoted unquoted expressions captured evaluated snapshot URL visited. quoted_ expression quoted? Default FALSE. env_ environment expression evaluated. session_ Shiny session object.","code":""},{"path":"/reference/exportTestValues.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register expressions for export in test mode — exportTestValues","text":"function effect app launched test mode. done calling runApp() test.mode=TRUE, setting global option shiny.testmode TRUE.","code":""},{"path":"/reference/exportTestValues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register expressions for export in test mode — exportTestValues","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {  options(shiny.testmode = TRUE)  # This application shows the test snapshot URL; clicking on it will # fetch the input, output, and exported values in JSON format. shinyApp(   ui = basicPage(     h4(\"Snapshot URL: \"),     uiOutput(\"url\"),     h4(\"Current values:\"),     verbatimTextOutput(\"values\"),     actionButton(\"inc\", \"Increment x\")   ),    server = function(input, output, session) {     vals <- reactiveValues(x = 1)     y <- reactive({ vals$x + 1 })      observeEvent(input$inc, {       vals$x <<- vals$x + 1     })      exportTestValues(       x = vals$x,       y = y()     )      output$url <- renderUI({       url <- session$getTestSnapshotUrl(format=\"json\")       a(href = url, url)     })      output$values <- renderText({       paste0(\"vals$x: \", vals$x, \"\\ny: \", y())     })   } ) }"},{"path":"/reference/exprToFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an expression to a function — exprToFunction","title":"Convert an expression to a function — exprToFunction","text":"Please use installExprFunction() better debugging experience (Shiny 0.8.0). expr quoted parameters needed, please see quoToFunction() (Shiny 1.6.0).","code":""},{"path":"/reference/exprToFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an expression to a function — exprToFunction","text":"","code":"exprToFunction(expr, env = parent.frame(), quoted = FALSE)"},{"path":"/reference/exprToFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an expression to a function — exprToFunction","text":"expr quoted unquoted expression, quosure. env desired environment function. Defaults calling environment two steps back. quoted expression quoted?","code":""},{"path":"/reference/exprToFunction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert an expression to a function — exprToFunction","text":"Similar installExprFunction() register debug hooks.","code":""},{"path":[]},{"path":"/reference/ExtendedTask.html","id":null,"dir":"Reference","previous_headings":"","what":"Task or computation that proceeds in the background — ExtendedTask","title":"Task or computation that proceeds in the background — ExtendedTask","text":"normal Shiny reactive code, whenever observer, calc, output busy computing, blocks current session receiving inputs attempting proceed computation related session. ExtendedTask class allows expensive operation started reactive effect, whose (eventual) results can accessed regular observer, calc, output; course operation, current session completely unblocked, allowing user continue using rest app operation proceeds background. Note ExtendedTask object represent single invocation long-running function. Rather, object used invoke function different arguments, keeps track whether invocation progress, provides ways get current status results operation. single ExtendedTask object permit overlapping invocations: invoke() method called previous invoke() completed, new invocation begin previous invocation completed.","code":""},{"path":"/reference/ExtendedTask.html","id":"extendedtask-versus-asynchronous-reactives","dir":"Reference","previous_headings":"","what":"ExtendedTask versus asynchronous reactives","title":"Task or computation that proceeds in the background — ExtendedTask","text":"Shiny long supported using {promises} write asynchronous observers, calcs, outputs. may wondering differences techniques class. Asynchronous observers, calcs, outputs --never --designed let user start long-running operation, keeping (browser) session responsive interactions. Instead, unblock sessions, can take long-running operation normally bring entire R process halt limit blocking just session started operation. (details, see section \"Flush Cycle\".) ExtendedTask, hand, invokes asynchronous function (, function quickly returns promise) allows even session immediately unblock carry user interactions.","code":""},{"path":[]},{"path":"/reference/ExtendedTask.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Task or computation that proceeds in the background — ExtendedTask","text":"ExtendedTask$new() ExtendedTask$invoke() ExtendedTask$status() ExtendedTask$result()","code":""},{"path":"/reference/ExtendedTask.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Task or computation that proceeds in the background — ExtendedTask","text":"Creates new ExtendedTask object. ExtendedTask generally created either top server function, top module server function.","code":""},{"path":"/reference/ExtendedTask.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Task or computation that proceeds in the background — ExtendedTask","text":"","code":"ExtendedTask$new(func)"},{"path":"/reference/ExtendedTask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Task or computation that proceeds in the background — ExtendedTask","text":"func long-running operation execute. asynchronous function, meaning, use {promises} package, likely conjuction {future} package. (short, return value func Future object, promise, something else promises::.promise() understands.) also important logic read reactive inputs/sources, inputs may change function invoked; instead, function needs access reactive inputs, take parameters caller invoke() method read reactive inputs pass arguments.","code":""},{"path":"/reference/ExtendedTask.html","id":"method-invoke-","dir":"Reference","previous_headings":"","what":"Method invoke()","title":"Task or computation that proceeds in the background — ExtendedTask","text":"Starts executing long-running operation. ExtendedTask already running (meaning, previous call invoke() yet complete) enqueues invocation current invocation, already-enqueued invocation, completes.","code":""},{"path":"/reference/ExtendedTask.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Task or computation that proceeds in the background — ExtendedTask","text":"","code":"ExtendedTask$invoke(...)"},{"path":"/reference/ExtendedTask.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Task or computation that proceeds in the background — ExtendedTask","text":"... Parameters use invocation underlying function. reactive inputs needed underlying function, read caller invoke passed arguments.","code":""},{"path":"/reference/ExtendedTask.html","id":"method-status-","dir":"Reference","previous_headings":"","what":"Method status()","title":"Task or computation that proceeds in the background — ExtendedTask","text":"reactive read invalidates caller task's status changes. Returns one following values: \"initial\": ExtendedTask yet invoked \"running\": invocation currently running \"success\": invocation completed successfully, value can retrieved via result() method \"error\": invocation completed error, re-thrown call result() method","code":""},{"path":"/reference/ExtendedTask.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Task or computation that proceeds in the background — ExtendedTask","text":"","code":"ExtendedTask$status()"},{"path":"/reference/ExtendedTask.html","id":"method-result-","dir":"Reference","previous_headings":"","what":"Method result()","title":"Task or computation that proceeds in the background — ExtendedTask","text":"Attempts read results recent invocation. reactive read invalidates task's status changes. actual behavior differs greatly depending current status task: \"initial\": Throws silent error (like req(FALSE)). happens output rendering, output blanked . \"running\": Throws special silent error , happens output rendering, makes output appear \"progress\" notice. \"success\": Returns return value recent invocation. \"error\": Throws whatever error thrown recent invocation. method intended called fairly naively output reactive expression cares output--just aware result ready whatever reason, processing stop much way req(FALSE) , result ready get invalidated, run result . Note result() method generally meant used observeEvent(), eventReactive(), bindEvent(), isolate() invalidation ignored.","code":""},{"path":"/reference/ExtendedTask.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Task or computation that proceeds in the background — ExtendedTask","text":"","code":"ExtendedTask$result()"},{"path":"/reference/fileInput.html","id":null,"dir":"Reference","previous_headings":"","what":"File Upload Control — fileInput","title":"File Upload Control — fileInput","text":"Create file upload control can used upload one files.","code":""},{"path":"/reference/fileInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File Upload Control — fileInput","text":"","code":"fileInput(   inputId,   label,   multiple = FALSE,   accept = NULL,   width = NULL,   buttonLabel = \"Browse...\",   placeholder = \"No file selected\",   capture = NULL )"},{"path":"/reference/fileInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File Upload Control — fileInput","text":"inputId input slot used access value. label Display label control, NULL label. multiple Whether user allowed select upload multiple files . work older browsers, including Internet Explorer 9 earlier. accept character vector \"unique file type specifiers\" gives browser hint type file server expects. Many browsers use prevent user selecting invalid file. unique file type specifier can : case insensitive extension like .csv .rds. valid MIME type, like text/plain application/pdf One audio/*, video/*, image/* meaning audio, video, image type, respectively. width width input, e.g. '400px', '100%'; see validateCssUnit(). buttonLabel label used button. Can text HTML tag object. placeholder text show file uploaded. capture source use capturing image, audio video data. attribute facilitates user access device's media capture mechanism, camera, microphone, within file upload control. value user indicates user-facing camera /microphone used. value environment specifies outward-facing camera /microphone used. default phones, accept still photos video. still photos , also use accept=\"image/*\". video , use accept=\"video/*\".","code":""},{"path":"/reference/fileInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"File Upload Control — fileInput","text":"Whenever file upload completes, corresponding input variable set dataframe. See Server value section. time files uploaded, written new random subdirectory inside R's process-level temporary directory. Shiny user session keeps track uploads session, session ends, Shiny deletes subdirectories files uploaded .","code":""},{"path":"/reference/fileInput.html","id":"server-value","dir":"Reference","previous_headings":"","what":"Server value","title":"File Upload Control — fileInput","text":"data.frame contains one row selected file, following columns: name filename provided web browser. path read get actual data uploaded (see datapath column). size size uploaded data, bytes. type MIME type reported browser (example, text/plain), empty string browser know. datapath path temp file contains data uploaded. file may deleted user performs another upload operation.","code":""},{"path":[]},{"path":"/reference/fileInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File Upload Control — fileInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   sidebarLayout(     sidebarPanel(       fileInput(\"file1\", \"Choose CSV File\", accept = \".csv\"),       checkboxInput(\"header\", \"Header\", TRUE)     ),     mainPanel(       tableOutput(\"contents\")     )   ) )  server <- function(input, output) {   output$contents <- renderTable({     file <- input$file1     ext <- tools::file_ext(file$datapath)      req(file)     validate(need(ext == \"csv\", \"Please upload a csv file\"))      read.csv(file$datapath, header = input$header)   }) }  shinyApp(ui, server) }"},{"path":"/reference/fillPage.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a page that fills the window — fillPage","title":"Create a page that fills the window — fillPage","text":"fillPage creates page whose height width always fill available area browser window.","code":""},{"path":"/reference/fillPage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a page that fills the window — fillPage","text":"","code":"fillPage(   ...,   padding = 0,   title = NULL,   bootstrap = TRUE,   theme = NULL,   lang = NULL )"},{"path":"/reference/fillPage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a page that fills the window — fillPage","text":"... Elements include within page. padding Padding use body. can numeric vector (interpreted pixels) character vector valid CSS lengths. length can one four. one, value used four sides. two, first value used top bottom, second value used left right. three, first used top, second left right, third bottom. four, values interpreted top, right, bottom, left respectively. title title use browser window/tab (shown document). bootstrap TRUE, load Bootstrap CSS library. theme One following: NULL (default), implies \"stock\" build Bootstrap 3. bslib::bs_theme() object. can used replace stock build Bootstrap 3 customized version Bootstrap 3 higher. character string pointing alternative Bootstrap stylesheet (normally css file within www directory, e.g. www/bootstrap.css). lang ISO 639-1 language code HTML page, \"en\" \"ko\". used lang <html> tag, <html lang=\"en\">. default (NULL) results empty string.","code":""},{"path":"/reference/fillPage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a page that fills the window — fillPage","text":"fluidPage() fixedPage() functions used creating web pages laid top , leaving whitespace bottom page content's height smaller browser window, scrolling content larger window. fillPage designed latch document body's size size window. makes possible fill content also scales size window. example, fluidPage(plotOutput(\"plot\", height = \"100%\")) work expected; plot element's effective height 0, plot's containing elements (<div> <body>) automatic height; , determine height based height contained elements. However, fillPage(plotOutput(\"plot\", height = \"100%\")) work fillPage fixes <body> height 100% window height. Note fillPage(plotOutput(\"plot\")) cause plot fill page. Like Shiny output widgets, plotOutput's default height fixed number pixels. must explicitly set height = \"100%\" want plot (htmlwidget, say) fill container. One must careful layouts/panels/elements come fillPage plots/widgets. container automatic height cause children height = \"100%\" misbehave. Stick functions designed fill layouts, ones package.","code":""},{"path":[]},{"path":"/reference/fillPage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a page that fills the window — fillPage","text":"","code":"fillPage(   tags$style(type = \"text/css\",     \".half-fill { width: 50%; height: 100%; }\",     \"#one { float: left; background-color: #ddddff; }\",     \"#two { float: right; background-color: #ccffcc; }\"   ),   div(id = \"one\", class = \"half-fill\",     \"Left half\"   ),   div(id = \"two\", class = \"half-fill\",     \"Right half\"   ),   padding = 10 ) #> <style type=\"text/css\"> #>   .half-fill { width: 50%; height: 100%; } #>   #one { float: left; background-color: #ddddff; } #>   #two { float: right; background-color: #ccffcc; } #> <\/style> #> <div id=\"one\" class=\"half-fill\">Left half<\/div> #> <div id=\"two\" class=\"half-fill\">Right half<\/div>  fillPage(   fillRow(     div(style = \"background-color: red; width: 100%; height: 100%;\"),     div(style = \"background-color: blue; width: 100%; height: 100%;\")   ) ) #> <div class=\"flexfill-container flexfill-container-row\" style=\"display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;width:100%;height:100%;\"> #>   <div class=\"flexfill-item\" style=\"position:relative;-webkit-flex:1;-ms-flex:1;flex:1;width:100%;height:100%;\"> #>     <div class=\"flexfill-item-inner\" style=\"position:absolute;top:0;left:0;right:0;bottom:0;\"> #>       <div style=\"background-color: red; width: 100%; height: 100%;\"><\/div> #>     <\/div> #>   <\/div> #>   <div class=\"flexfill-item\" style=\"position:relative;-webkit-flex:1;-ms-flex:1;flex:1;width:100%;height:100%;\"> #>     <div class=\"flexfill-item-inner\" style=\"position:absolute;top:0;left:0;right:0;bottom:0;\"> #>       <div style=\"background-color: blue; width: 100%; height: 100%;\"><\/div> #>     <\/div> #>   <\/div> #> <\/div>"},{"path":"/reference/fillRow.html","id":null,"dir":"Reference","previous_headings":"","what":"Flex Box-based row/column layouts — fillRow","title":"Flex Box-based row/column layouts — fillRow","text":"Creates row column layouts proportionally-sized cells, using Flex Box layout model CSS3. can nested create arbitrary proportional-grid layouts. Warning: Flex Box well supported Internet Explorer, functions used modern browsers can assumed.","code":""},{"path":"/reference/fillRow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flex Box-based row/column layouts — fillRow","text":"","code":"fillRow(..., flex = 1, width = \"100%\", height = \"100%\")  fillCol(..., flex = 1, width = \"100%\", height = \"100%\")"},{"path":"/reference/fillRow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flex Box-based row/column layouts — fillRow","text":"... UI objects put row/column cell; argument occupy single cell. (put multiple items single cell, can use tagList() div() combine .) Named arguments used attributes div element encapsulates row/column. flex Determines space distributed cells. Can single value like 1 2 evenly distribute available space; use vector numbers specify proportions. example, flex = c(2, 3) cause space split 40%/60% two cells. NA values cause corresponding cell sized according contents (without growing shrinking). width, height total amount width height use entire row/column. default height \"100%\" effective, parent must fillPage, another fillRow/fillCol, HTML element whose height determined height contents.","code":""},{"path":"/reference/fillRow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flex Box-based row/column layouts — fillRow","text":"try use fillRow fillCol inside Shiny containers, sidebarLayout(), navbarPage(), even tags$div, probably find appear. due fillRow fillCol defaulting height=\"100%\", work inside containers determined size (rather shrinking size contents, usually case HTML). avoid problem, two options: use fillRow/fillCol inside fillPage, fillRow, fillCol provide explicit height argument fillRow/fillCol","code":""},{"path":"/reference/fillRow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flex Box-based row/column layouts — fillRow","text":"","code":"# Only run this example in interactive R sessions. if (interactive()) {  ui <- fillPage(fillRow(   plotOutput(\"plotLeft\", height = \"100%\"),   fillCol(     plotOutput(\"plotTopRight\", height = \"100%\"),     plotOutput(\"plotBottomRight\", height = \"100%\")   ) ))  server <- function(input, output, session) {   output$plotLeft <- renderPlot(plot(cars))   output$plotTopRight <- renderPlot(plot(pressure))   output$plotBottomRight <- renderPlot(plot(AirPassengers)) }  shinyApp(ui, server)  }"},{"path":"/reference/fixedPage.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a page with a fixed layout — fixedPage","title":"Create a page with a fixed layout — fixedPage","text":"Functions creating fixed page layouts. fixed page layout consists rows turn include columns. Rows exist purpose making sure elements appear line (browser adequate width). Columns exist purpose defining much horizontal space within 12-unit wide grid elements occupy. Fixed pages limit width 940 pixels typical display, 724px 1170px smaller larger displays respectively.","code":""},{"path":"/reference/fixedPage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a page with a fixed layout — fixedPage","text":"","code":"fixedPage(..., title = NULL, theme = NULL, lang = NULL)  fixedRow(...)"},{"path":"/reference/fixedPage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a page with a fixed layout — fixedPage","text":"... Elements include within container title browser window title (defaults host URL page) theme One following: NULL (default), implies \"stock\" build Bootstrap 3. bslib::bs_theme() object. can used replace stock build Bootstrap 3 customized version Bootstrap 3 higher. character string pointing alternative Bootstrap stylesheet (normally css file within www directory, e.g. www/bootstrap.css). lang ISO 639-1 language code HTML page, \"en\" \"ko\". used lang <html> tag, <html lang=\"en\">. default (NULL) results empty string.","code":""},{"path":"/reference/fixedPage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a page with a fixed layout — fixedPage","text":"UI definition can passed shinyUI function.","code":""},{"path":"/reference/fixedPage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a page with a fixed layout — fixedPage","text":"create fixed page use fixedPage function include instances fixedRow column() within . Note unlike fluidPage(), fixed pages make use higher-level layout functions like sidebarLayout, rather, layout must done fixedRow column.","code":""},{"path":"/reference/fixedPage.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a page with a fixed layout — fixedPage","text":"See  Shiny Application Layout Guide additional details laying fixed pages.","code":""},{"path":[]},{"path":"/reference/fixedPage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a page with a fixed layout — fixedPage","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fixedPage(   title = \"Hello, Shiny!\",   fixedRow(     column(width = 4,       \"4\"     ),     column(width = 3, offset = 2,       \"3 offset 2\"     )   ) )  shinyApp(ui, server = function(input, output) { }) }"},{"path":"/reference/flowLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"Flow layout — flowLayout","title":"Flow layout — flowLayout","text":"Lays elements left--right, top--bottom arrangement. elements given row top-aligned . layout work well elements percentage-based width (e.g. plotOutput() default setting width = \"100%\").","code":""},{"path":"/reference/flowLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flow layout — flowLayout","text":"","code":"flowLayout(..., cellArgs = list())"},{"path":"/reference/flowLayout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flow layout — flowLayout","text":"... Unnamed arguments become child elements layout. Named arguments become HTML attributes outermost tag. cellArgs additional attributes used cell layout.","code":""},{"path":[]},{"path":"/reference/flowLayout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flow layout — flowLayout","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- flowLayout(   numericInput(\"rows\", \"How many rows?\", 5),   selectInput(\"letter\", \"Which letter?\", LETTERS),   sliderInput(\"value\", \"What value?\", 0, 100, 50) ) shinyApp(ui, server = function(input, output) { }) }"},{"path":"/reference/fluidPage.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a page with fluid layout — fluidPage","title":"Create a page with fluid layout — fluidPage","text":"Functions creating fluid page layouts. fluid page layout consists rows turn include columns. Rows exist purpose making sure elements appear line (browser adequate width). Columns exist purpose defining much horizontal space within 12-unit wide grid elements occupy. Fluid pages scale components realtime fill available browser width.","code":""},{"path":"/reference/fluidPage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a page with fluid layout — fluidPage","text":"","code":"fluidPage(..., title = NULL, theme = NULL, lang = NULL)  fluidRow(...)"},{"path":"/reference/fluidPage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a page with fluid layout — fluidPage","text":"... Elements include within page title browser window title (defaults host URL page). Can also set side effect titlePanel() function. theme One following: NULL (default), implies \"stock\" build Bootstrap 3. bslib::bs_theme() object. can used replace stock build Bootstrap 3 customized version Bootstrap 3 higher. character string pointing alternative Bootstrap stylesheet (normally css file within www directory, e.g. www/bootstrap.css). lang ISO 639-1 language code HTML page, \"en\" \"ko\". used lang <html> tag, <html lang=\"en\">. default (NULL) results empty string.","code":""},{"path":"/reference/fluidPage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a page with fluid layout — fluidPage","text":"UI definition can passed shinyUI function.","code":""},{"path":"/reference/fluidPage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a page with fluid layout — fluidPage","text":"create fluid page use fluidPage function include instances fluidRow column() within . alternative low-level row column functions can also use higher-level layout functions like sidebarLayout().","code":""},{"path":"/reference/fluidPage.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a page with fluid layout — fluidPage","text":"See  Shiny-Application-Layout-Guide additional details laying fluid pages.","code":""},{"path":[]},{"path":"/reference/fluidPage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a page with fluid layout — fluidPage","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  # Example of UI with fluidPage ui <- fluidPage(    # Application title   titlePanel(\"Hello Shiny!\"),    sidebarLayout(      # Sidebar with a slider input     sidebarPanel(       sliderInput(\"obs\",                   \"Number of observations:\",                   min = 0,                   max = 1000,                   value = 500)     ),      # Show a plot of the generated distribution     mainPanel(       plotOutput(\"distPlot\")     )   ) )  # Server logic server <- function(input, output) {   output$distPlot <- renderPlot({     hist(rnorm(input$obs))   }) }  # Complete app with UI and server components shinyApp(ui, server)   # UI demonstrating column layouts ui <- fluidPage(   title = \"Hello Shiny!\",   fluidRow(     column(width = 4,       \"4\"     ),     column(width = 3, offset = 2,       \"3 offset 2\"     )   ) )  shinyApp(ui, server = function(input, output) { }) }"},{"path":"/reference/freezeReactiveValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Freeze a reactive value — freezeReactiveVal","title":"Freeze a reactive value — freezeReactiveVal","text":"functions freeze reactiveVal(), element reactiveValues(). value accessed frozen, \"silent\" exception raised operation stopped. thing happens req(FALSE) called. value thawed (un-frozen; accessing longer raise exception) current reactive domain flushed. Shiny application, occurs observers executed. NOTE: considering deprecating freezeReactiveVal, freezeReactiveValue except x input. affects app, please let us know leaving comment GitHub issue.","code":""},{"path":"/reference/freezeReactiveValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Freeze a reactive value — freezeReactiveVal","text":"","code":"freezeReactiveVal(x)  freezeReactiveValue(x, name)"},{"path":"/reference/freezeReactiveValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Freeze a reactive value — freezeReactiveVal","text":"x freezeReactiveValue, reactiveValues() object (like input); freezeReactiveVal, reactiveVal() object. name name value reactiveValues() object.","code":""},{"path":[]},{"path":"/reference/freezeReactiveValue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Freeze a reactive value — freezeReactiveVal","text":"","code":"## Only run this examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   selectInput(\"data\", \"Data Set\", c(\"mtcars\", \"pressure\")),   checkboxGroupInput(\"cols\", \"Columns (select 2)\", character(0)),   plotOutput(\"plot\") )  server <- function(input, output, session) {   observe({     data <- get(input$data)     # Sets a flag on input$cols to essentially do req(FALSE) if input$cols     # is accessed. Without this, an error will momentarily show whenever a     # new data set is selected.     freezeReactiveValue(input, \"cols\")     updateCheckboxGroupInput(session, \"cols\", choices = names(data))   })    output$plot <- renderPlot({     # When a new data set is selected, input$cols will have been invalidated     # above, and this will essentially do the same as req(FALSE), causing     # this observer to stop and raise a silent exception.     cols <- input$cols     data <- get(input$data)      if (length(cols) == 2) {       plot(data[[ cols[1] ]], data[[ cols[2] ]])     }   }) }  shinyApp(ui, server) }"},{"path":"/reference/getCurrentOutputInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get output information — getCurrentOutputInfo","title":"Get output information — getCurrentOutputInfo","text":"Returns information currently executing output, including name (.e., outputId); cases, relevant sizing styling information.","code":""},{"path":"/reference/getCurrentOutputInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get output information — getCurrentOutputInfo","text":"","code":"getCurrentOutputInfo(session = getDefaultReactiveDomain())"},{"path":"/reference/getCurrentOutputInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get output information — getCurrentOutputInfo","text":"session current Shiny session.","code":""},{"path":"/reference/getCurrentOutputInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get output information — getCurrentOutputInfo","text":"NULL called outside output context; otherwise, list includes: name output (reported output). output plotOutput() imageOutput(), : height: reactive expression returns height pixels. width: reactive expression returns width pixels. output plotOutput(), imageOutput(), contains shiny-report-theme class, : bg: reactive expression returns background color. fg: reactive expression returns foreground color. accent: reactive expression returns hyperlink color. font: reactive expression returns list font information, including: families: character vector containing CSS font-family property. size: character string containing CSS font-size property","code":""},{"path":"/reference/getCurrentOutputInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get output information — getCurrentOutputInfo","text":"","code":"if (interactive()) {   shinyApp(     fluidPage(       tags$style(HTML(\"body {background-color: black; color: white; }\")),       tags$style(HTML(\"body a {color: purple}\")),       tags$style(HTML(\"#info {background-color: teal; color: orange; }\")),       plotOutput(\"p\"),       \"Computed CSS styles for the output named info:\",       tagAppendAttributes(         textOutput(\"info\"),         class = \"shiny-report-theme\"       )     ),     function(input, output) {       output$p <- renderPlot({         info <- getCurrentOutputInfo()         par(bg = info$bg(), fg = info$fg(), col.axis = info$fg(), col.main = info$fg())         plot(1:10, col = info$accent(), pch = 19)         title(\"A simple R plot that uses its CSS styling\")       })       output$info <- renderText({         info <- getCurrentOutputInfo()         jsonlite::toJSON(           list(             bg = info$bg(),             fg = info$fg(),             accent = info$accent(),             font = info$font()           ),           auto_unbox = TRUE         )       })     }   ) }"},{"path":"/reference/getCurrentTheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain Shiny's Bootstrap Sass theme — getCurrentTheme","title":"Obtain Shiny's Bootstrap Sass theme — getCurrentTheme","text":"Intended use Shiny developers create Shiny bindings intelligent styling based bootstrapLib()'s theme value.","code":""},{"path":"/reference/getCurrentTheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain Shiny's Bootstrap Sass theme — getCurrentTheme","text":"","code":"getCurrentTheme()"},{"path":"/reference/getCurrentTheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain Shiny's Bootstrap Sass theme — getCurrentTheme","text":"called render-time (.e., inside htmltools::tagFunction()), bootstrapLib()'s theme set bslib::bs_theme() object, returns theme. Otherwise, returns NULL.","code":""},{"path":[]},{"path":"/reference/getQueryString.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the query string / hash component from the URL — getQueryString","title":"Get the query string / hash component from the URL — getQueryString","text":"Two user friendly wrappers getting query string hash component app's URL.","code":""},{"path":"/reference/getQueryString.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the query string / hash component from the URL — getQueryString","text":"","code":"getQueryString(session = getDefaultReactiveDomain())  getUrlHash(session = getDefaultReactiveDomain())"},{"path":"/reference/getQueryString.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the query string / hash component from the URL — getQueryString","text":"session Shiny session object.","code":""},{"path":"/reference/getQueryString.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the query string / hash component from the URL — getQueryString","text":"getQueryString, named list. example, query string ?param1=value1&param2=value2 becomes list(param1 = value1, param2 = value2). getUrlHash, character vector hash (including leading # symbol).","code":""},{"path":"/reference/getQueryString.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the query string / hash component from the URL — getQueryString","text":"can particularly useful want display different content depending values query string / hash (e.g. instead basing conditional input calculated reactive, can base query string). However, note , changing query string / hash programmatically within server code, must use updateQueryString(_yourNewQueryString_, mode = \"push\"). default mode updateQueryString \"replace\", raise events, observers reactives depend get triggered. However, changing query string / hash directly typing directly browser hitting enter, worry .","code":""},{"path":[]},{"path":"/reference/getQueryString.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the query string / hash component from the URL — getQueryString","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {    ## App 1: getQueryString   ## Printing the value of the query string   ## (Use the back and forward buttons to see how the browser   ## keeps a record of each state)   shinyApp(     ui = fluidPage(       textInput(\"txt\", \"Enter new query string\"),       helpText(\"Format: ?param1=val1&param2=val2\"),       actionButton(\"go\", \"Update\"),       hr(),       verbatimTextOutput(\"query\")     ),     server = function(input, output, session) {       observeEvent(input$go, {         updateQueryString(input$txt, mode = \"push\")       })       output$query <- renderText({         query <- getQueryString()         queryText <- paste(names(query), query,                        sep = \"=\", collapse=\", \")         paste(\"Your query string is:\\n\", queryText)       })     }   )    ## App 2: getUrlHash   ## Printing the value of the URL hash   ## (Use the back and forward buttons to see how the browser   ## keeps a record of each state)   shinyApp(     ui = fluidPage(       textInput(\"txt\", \"Enter new hash\"),       helpText(\"Format: #hash\"),       actionButton(\"go\", \"Update\"),       hr(),       verbatimTextOutput(\"hash\")     ),     server = function(input, output, session) {       observeEvent(input$go, {         updateQueryString(input$txt, mode = \"push\")       })       output$hash <- renderText({         hash <- getUrlHash()         paste(\"Your hash is:\\n\", hash)       })     }   ) }"},{"path":"/reference/headerPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a header panel — headerPanel","title":"Create a header panel — headerPanel","text":"DEPRECATED: use titlePanel() instead.","code":""},{"path":"/reference/headerPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a header panel — headerPanel","text":"","code":"headerPanel(title, windowTitle = title)"},{"path":"/reference/headerPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a header panel — headerPanel","text":"title application title display windowTitle title displayed browser window. Useful title string.","code":""},{"path":"/reference/headerPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a header panel — headerPanel","text":"headerPanel can passed pageWithSidebar","code":""},{"path":"/reference/helpText.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a help text element — helpText","title":"Create a help text element — helpText","text":"Create help text can added input form provide additional explanation context.","code":""},{"path":"/reference/helpText.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a help text element — helpText","text":"","code":"helpText(...)"},{"path":"/reference/helpText.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a help text element — helpText","text":"... One help text strings (inline HTML elements)","code":""},{"path":"/reference/helpText.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a help text element — helpText","text":"help text element can added UI definition.","code":""},{"path":"/reference/helpText.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a help text element — helpText","text":"","code":"helpText(\"Note: while the data view will show only\",          \"the specified number of observations, the\",          \"summary will be based on the full dataset.\") #> <span class=\"help-block\"> #>   Note: while the data view will show only #>   the specified number of observations, the #>   summary will be based on the full dataset. #> <\/span>"},{"path":"/reference/htmlOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an HTML output element — htmlOutput","title":"Create an HTML output element — htmlOutput","text":"Render reactive output variable HTML within application page. text included within HTML div tag, presumed contain HTML content escaped.","code":""},{"path":"/reference/htmlOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an HTML output element — htmlOutput","text":"","code":"htmlOutput(   outputId,   inline = FALSE,   container = if (inline) span else div,   fill = FALSE,   ... )  uiOutput(   outputId,   inline = FALSE,   container = if (inline) span else div,   fill = FALSE,   ... )"},{"path":"/reference/htmlOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an HTML output element — htmlOutput","text":"outputId output variable read value inline use inline (span()) block container (div()) output container function generate HTML element contain text fill TRUE, result container treated fill item container (see htmltools::bindFillRole()), means container well immediate children (.e., result renderUI()) allowed grow/shrink fit fill container opinionated height. Set fill = \"item\" fill = \"container\" treat container just fill item fill container. ... arguments pass container tag function. useful providing additional classes tag.","code":""},{"path":"/reference/htmlOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an HTML output element — htmlOutput","text":"HTML output element can included panel","code":""},{"path":"/reference/htmlOutput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an HTML output element — htmlOutput","text":"uiOutput intended used renderUI server side. currently just alias htmlOutput.","code":""},{"path":"/reference/htmlOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an HTML output element — htmlOutput","text":"","code":"htmlOutput(\"summary\") #> <div id=\"summary\" class=\"shiny-html-output\"><\/div>  # Using a custom container and class tags$ul(   htmlOutput(\"summary\", container = tags$li, class = \"custom-li-output\") ) #> <ul> #>   <li class=\"shiny-html-output custom-li-output\" id=\"summary\"><\/li> #> <\/ul>"},{"path":"/reference/httpResponse.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an HTTP response object — httpResponse","title":"Create an HTTP response object — httpResponse","text":"Create HTTP response object","code":""},{"path":"/reference/httpResponse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an HTTP response object — httpResponse","text":"","code":"httpResponse(   status = 200L,   content_type = \"text/html; charset=UTF-8\",   content = \"\",   headers = list() )"},{"path":"/reference/httpResponse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an HTTP response object — httpResponse","text":"status HTTP status code response. content_type value Content-Type header. content body response, given single-element character vector (encoded UTF-8) raw vector. headers named list additional headers include. include Content-Length (automatically calculated) Content-Type (content_type argument used instead).","code":""},{"path":"/reference/httpResponse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an HTTP response object — httpResponse","text":"","code":"httpResponse(status = 405L,   content_type = \"text/plain\",   content = \"The requested method was not allowed\" ) #> $status #> [1] 405 #>  #> $content_type #> [1] \"text/plain\" #>  #> $content #> [1] \"The requested method was not allowed\" #>  #> $headers #> $headers$`X-UA-Compatible` #> [1] \"IE=edge,chrome=1\" #>  #>  #> attr(,\"class\") #> [1] \"httpResponse\""},{"path":"/reference/icon.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an icon — icon","title":"Create an icon — icon","text":"Create icon use within page. Icons can appear , inside button, /used tabPanel() navbarMenu().","code":""},{"path":"/reference/icon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an icon — icon","text":"","code":"icon(name, class = NULL, lib = \"font-awesome\", ...)"},{"path":"/reference/icon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an icon — icon","text":"name name icon. name either Font Awesome (lib=\"font-awesome\") Bootstrap Glyphicons (lib=\"glyphicon\") may provided. Note \"fa-\" \"glyphicon-\" prefixes appear name (.e., \"fa-calendar\" icon referred \"calendar\"). name NULL may also provided get raw <> tag library attached . class Additional classes customize style icon (see usage examples details supported styles). lib icon library use. Either \"font-awesome\" \"glyphicon\". ... Arguments passed <> tag htmltools::tags.","code":""},{"path":"/reference/icon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an icon — icon","text":"<> (icon) HTML tag.","code":""},{"path":[]},{"path":"/reference/icon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an icon — icon","text":"","code":"# add an icon to a submit button submitButton(\"Update View\", icon = icon(\"redo\")) #> <div> #>   <button type=\"submit\" class=\"btn btn-primary\"> #>     <i class=\"fas fa-arrow-rotate-right\" role=\"presentation\" aria-label=\"arrow-rotate-right icon\"><\/i> #>     Update View #>   <\/button> #> <\/div>  navbarPage(\"App Title\",   tabPanel(\"Plot\", icon = icon(\"bar-chart-o\")),   tabPanel(\"Summary\", icon = icon(\"list-alt\")),   tabPanel(\"Table\", icon = icon(\"table\")) ) #> The `name` provided ('bar-chart-o') does not correspond to a known icon #> <body class=\"bslib-page-navbar\"> #>   <nav class=\"navbar navbar-default navbar-static-top\" role=\"navigation\"> #>     <div class=\"container-fluid\"> #>       <div class=\"navbar-header\"> #>         <span class=\"navbar-brand\">App Title<\/span> #>       <\/div> #>       <ul class=\"nav navbar-nav nav-underline\" data-tabsetid=\"3233\"> #>         <li class=\"active\"> #>           <a href=\"#tab-3233-1\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Plot\"> #>             <i aria-label=\"bar-chart-o icon\" class=\"far fa-bar-chart-o fa-fw\" role=\"presentation\"><\/i> #>             Plot #>           <\/a> #>         <\/li> #>         <li> #>           <a href=\"#tab-3233-2\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Summary\"> #>             <i aria-label=\"rectangle-list icon\" class=\"far fa-rectangle-list fa-fw\" role=\"presentation\"><\/i> #>             Summary #>           <\/a> #>         <\/li> #>         <li> #>           <a href=\"#tab-3233-3\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Table\"> #>             <i aria-label=\"table icon\" class=\"fas fa-table fa-fw\" role=\"presentation\"><\/i> #>             Table #>           <\/a> #>         <\/li> #>       <\/ul> #>     <\/div> #>   <\/nav> #>   <div class=\"container-fluid\"> #>     <div class=\"tab-content\" data-tabsetid=\"3233\"> #>       <div class=\"tab-pane active\" data-icon-class=\"far fa-bar-chart-o fa-fw\" data-value=\"Plot\" id=\"tab-3233-1\"><\/div> #>       <div class=\"tab-pane\" data-value=\"Summary\" data-icon-class=\"far fa-rectangle-list fa-fw\" id=\"tab-3233-2\"><\/div> #>       <div class=\"tab-pane\" data-value=\"Table\" data-icon-class=\"fas fa-table fa-fw\" id=\"tab-3233-3\"><\/div> #>     <\/div> #>   <\/div> #> <\/body>"},{"path":"/reference/inputPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Input panel — inputPanel","title":"Input panel — inputPanel","text":"flowLayout() grey border light grey background, suitable wrapping inputs.","code":""},{"path":"/reference/inputPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input panel — inputPanel","text":"","code":"inputPanel(...)"},{"path":"/reference/inputPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input panel — inputPanel","text":"... Input controls HTML elements.","code":""},{"path":"/reference/insertTab.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamically insert/remove a tabPanel — insertTab","title":"Dynamically insert/remove a tabPanel — insertTab","text":"Dynamically insert remove tabPanel() (navbarMenu()) existing tabsetPanel(), navlistPanel() navbarPage().","code":""},{"path":"/reference/insertTab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamically insert/remove a tabPanel — insertTab","text":"","code":"insertTab(   inputId,   tab,   target = NULL,   position = c(\"after\", \"before\"),   select = FALSE,   session = getDefaultReactiveDomain() )  prependTab(   inputId,   tab,   select = FALSE,   menuName = NULL,   session = getDefaultReactiveDomain() )  appendTab(   inputId,   tab,   select = FALSE,   menuName = NULL,   session = getDefaultReactiveDomain() )  removeTab(inputId, target, session = getDefaultReactiveDomain())"},{"path":"/reference/insertTab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamically insert/remove a tabPanel — insertTab","text":"inputId id tabsetPanel (navlistPanel navbarPage) tab inserted/removed. tab item added (must created tabPanel, navbarMenu). target inserting: value existing tabPanel, next tab added. removing: value tabPanel want remove. See Details want insert next /remove entire navbarMenu instead. position tab added target tab? select tab selected upon inserted? session shiny session within call function. menuName argument used want prepend (append) tab beginning (end) existing navbarMenu() (must part existing navbarPage()). case, argument menuName gave navbarMenu first created (default, equal value title argument). Note still need set inputId argument whatever id parent navbarPage . menuName left NULL, tab prepended (appended) whatever inputId .","code":""},{"path":"/reference/insertTab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamically insert/remove a tabPanel — insertTab","text":"want insert new tab existing tab, use insertTab. want prepend tab (.e. add tab beginning tabsetPanel), use prependTab. want append tab (.e. add tab end tabsetPanel), use appendTab. navbarPage, can insert/remove conventional tabPanels (whether top level nested inside navbarMenu), well entire navbarMenu(). latter case, target menuName gave navbarMenu first created (default, equal value title argument).","code":""},{"path":[]},{"path":"/reference/insertTab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamically insert/remove a tabPanel — insertTab","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {  # example app for inserting/removing a tab ui <- fluidPage(   sidebarLayout(     sidebarPanel(       actionButton(\"add\", \"Add 'Dynamic' tab\"),       actionButton(\"remove\", \"Remove 'Foo' tab\")     ),     mainPanel(       tabsetPanel(id = \"tabs\",         tabPanel(\"Hello\", \"This is the hello tab\"),         tabPanel(\"Foo\", \"This is the foo tab\"),         tabPanel(\"Bar\", \"This is the bar tab\")       )     )   ) ) server <- function(input, output, session) {   observeEvent(input$add, {     insertTab(inputId = \"tabs\",       tabPanel(\"Dynamic\", \"This a dynamically-added tab\"),       target = \"Bar\"     )   })   observeEvent(input$remove, {     removeTab(inputId = \"tabs\", target = \"Foo\")   }) }  shinyApp(ui, server)   # example app for prepending/appending a navbarMenu ui <- navbarPage(\"Navbar page\", id = \"tabs\",   tabPanel(\"Home\",     actionButton(\"prepend\", \"Prepend a navbarMenu\"),     actionButton(\"append\", \"Append a navbarMenu\")   ) ) server <- function(input, output, session) {   observeEvent(input$prepend, {     id <- paste0(\"Dropdown\", input$prepend, \"p\")     prependTab(inputId = \"tabs\",       navbarMenu(id,         tabPanel(\"Drop1\", paste(\"Drop1 page from\", id)),         tabPanel(\"Drop2\", paste(\"Drop2 page from\", id)),         \"------\",         \"Header\",         tabPanel(\"Drop3\", paste(\"Drop3 page from\", id))       )     )   })   observeEvent(input$append, {     id <- paste0(\"Dropdown\", input$append, \"a\")     appendTab(inputId = \"tabs\",       navbarMenu(id,         tabPanel(\"Drop1\", paste(\"Drop1 page from\", id)),         tabPanel(\"Drop2\", paste(\"Drop2 page from\", id)),         \"------\",         \"Header\",         tabPanel(\"Drop3\", paste(\"Drop3 page from\", id))       )     )   }) }  shinyApp(ui, server)  }"},{"path":"/reference/insertUI.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert and remove UI objects — insertUI","title":"Insert and remove UI objects — insertUI","text":"functions allow dynamically add remove arbitrary UI app, whenever want, many times want. Unlike renderUI(), UI generated insertUI() persistent: created, stays removed removeUI(). new call insertUI() creates UI objects, addition ones already (independent one another). update part UI (ex: input object), must use appropriate render function customized reactive function.","code":""},{"path":"/reference/insertUI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert and remove UI objects — insertUI","text":"","code":"insertUI(   selector,   where = c(\"beforeBegin\", \"afterBegin\", \"beforeEnd\", \"afterEnd\"),   ui,   multiple = FALSE,   immediate = FALSE,   session = getDefaultReactiveDomain() )  removeUI(   selector,   multiple = FALSE,   immediate = FALSE,   session = getDefaultReactiveDomain() )"},{"path":"/reference/insertUI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert and remove UI objects — insertUI","text":"selector string accepted jQuery's selector (.e. string s placed $(s) jQuery call). insertUI() determines element(s) relative want insert UI object. removeUI() determine element(s) removed. want remove Shiny input output, note many wrapped <div>s, may need use somewhat complex selector --- see Examples . (Alternatively, also wrap inputs/outputs want able remove easily <div> id.) UI object go relative selector: beforeBegin selector element afterBegin Just inside selector element, first child beforeEnd Just inside selector element, last child (default) afterEnd selector element Adapted https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML. ui UI object want insert. can anything usually put inside apps's ui function. inserting multiple elements one call, make sure wrap either tagList() tags$div() (latter option advantage can give id make easier reference remove later ). want insert raw html, use ui = HTML(). multiple case selector matches one element, multiple determines whether Shiny insert UI object relative matched elements just relative first matched element (default). immediate Whether UI object immediately inserted removed, whether Shiny wait outputs updated observers run (default). session shiny session. Advanced use .","code":""},{"path":"/reference/insertUI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Insert and remove UI objects — insertUI","text":"particularly useful pair removeUI insertUI(), restriction can use . element can selected jQuery selector can removed function.","code":""},{"path":"/reference/insertUI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert and remove UI objects — insertUI","text":"","code":"## Only run this example in interactive R sessions if (interactive()) { # Define UI ui <- fluidPage(   actionButton(\"add\", \"Add UI\") )  # Server logic server <- function(input, output, session) {   observeEvent(input$add, {     insertUI(       selector = \"#add\",       where = \"afterEnd\",       ui = textInput(paste0(\"txt\", input$add),                      \"Insert some text\")     )   }) }  # Complete app with UI and server components shinyApp(ui, server) }  if (interactive()) { # Define UI ui <- fluidPage(   actionButton(\"rmv\", \"Remove UI\"),   textInput(\"txt\", \"This is no longer useful\") )  # Server logic server <- function(input, output, session) {   observeEvent(input$rmv, {     removeUI(       selector = \"div:has(> #txt)\"     )   }) }  # Complete app with UI and server components shinyApp(ui, server) }"},{"path":"/reference/invalidateLater.html","id":null,"dir":"Reference","previous_headings":"","what":"Scheduled Invalidation — invalidateLater","title":"Scheduled Invalidation — invalidateLater","text":"Schedules current reactive context invalidated given number milliseconds.","code":""},{"path":"/reference/invalidateLater.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scheduled Invalidation — invalidateLater","text":"","code":"invalidateLater(millis, session = getDefaultReactiveDomain())"},{"path":"/reference/invalidateLater.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scheduled Invalidation — invalidateLater","text":"millis Approximate milliseconds wait invalidating current reactive context. session session object. needed cancel scheduled invalidations user ended session. NULL, invalidation tied session, still occur.","code":""},{"path":"/reference/invalidateLater.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scheduled Invalidation — invalidateLater","text":"placed within observer reactive expression, object invalidated (re-execute) interval passed. re-execution reset invalidation flag, typical use case, object keep re-executing waiting specified interval. possible stop cycle adding conditional logic prevents invalidateLater run.","code":""},{"path":[]},{"path":"/reference/invalidateLater.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scheduled Invalidation — invalidateLater","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   sliderInput(\"n\", \"Number of observations\", 2, 1000, 500),   plotOutput(\"plot\") )  server <- function(input, output, session) {    observe({     # Re-execute this reactive expression after 1000 milliseconds     invalidateLater(1000, session)      # Do something each time this is invalidated.     # The isolate() makes this observer _not_ get invalidated and re-executed     # when input$n changes.     print(paste(\"The value of input$n is\", isolate(input$n)))   })    # Generate a new histogram at timed intervals, but not when   # input$n changes.   output$plot <- renderPlot({     # Re-execute this reactive expression after 2000 milliseconds     invalidateLater(2000)     hist(rnorm(isolate(input$n)))   }) }  shinyApp(ui, server) }"},{"path":"/reference/is.reactivevalues.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether an object is a reactivevalues object — is.reactivevalues","title":"Checks whether an object is a reactivevalues object — is.reactivevalues","text":"Checks whether argument reactivevalues object.","code":""},{"path":"/reference/is.reactivevalues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether an object is a reactivevalues object — is.reactivevalues","text":"","code":"is.reactivevalues(x)"},{"path":"/reference/is.reactivevalues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether an object is a reactivevalues object — is.reactivevalues","text":"x object test.","code":""},{"path":[]},{"path":"/reference/isolate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a non-reactive scope for an expression — isolate","title":"Create a non-reactive scope for an expression — isolate","text":"Executes given expression scope reactive values expression can read, cause reactive scope caller re-evaluated change.","code":""},{"path":"/reference/isolate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a non-reactive scope for an expression — isolate","text":"","code":"isolate(expr)"},{"path":"/reference/isolate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a non-reactive scope for an expression — isolate","text":"expr expression can access reactive values expressions.","code":""},{"path":"/reference/isolate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a non-reactive scope for an expression — isolate","text":"Ordinarily, simple act reading reactive value causes relationship established caller reactive value, change reactive value cause caller re-execute. (applies act getting reactive expression's value.) isolate function lets read reactive value expression without establishing relationship. expression given isolate() evaluated calling environment. means assign variable inside isolate(), value visible outside isolate(). want avoid , can use base::local() inside isolate(). function can also useful calling reactive expression console, can useful debugging. , simply wrap calls reactive expression isolate().","code":""},{"path":"/reference/isolate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a non-reactive scope for an expression — isolate","text":"","code":"if (FALSE) { observe({   input$saveButton  # Do take a dependency on input$saveButton    # isolate a simple expression   data <- get(isolate(input$dataset))  # No dependency on input$dataset   writeToDatabase(data) })  observe({   input$saveButton  # Do take a dependency on input$saveButton    # isolate a whole block   data <- isolate({     a <- input$valueA   # No dependency on input$valueA or input$valueB     b <- input$valueB     c(a=a, b=b)   })   writeToDatabase(data) })  observe({   x <- 1   # x outside of isolate() is affected   isolate(x <- 2)   print(x) # 2    y <- 1   # Use local() to avoid affecting calling environment   isolate(local(y <- 2))   print(y) # 1 })  }  # Can also use isolate to call reactive expressions from the R console values <- reactiveValues(A=1) fun <- reactive({ as.character(values$A) }) isolate(fun()) #> [1] \"1\" # \"1\"  # isolate also works if the reactive expression accesses values from the # input object, like input$x"},{"path":"/reference/isRunning.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a Shiny application is running — isRunning","title":"Check whether a Shiny application is running — isRunning","text":"function tests whether Shiny application currently running.","code":""},{"path":"/reference/isRunning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a Shiny application is running — isRunning","text":"","code":"isRunning()"},{"path":"/reference/isRunning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a Shiny application is running — isRunning","text":"TRUE Shiny application currently running. Otherwise, FALSE.","code":""},{"path":"/reference/isTruthy.html","id":null,"dir":"Reference","previous_headings":"","what":"Truthy and falsy values — isTruthy","title":"Truthy and falsy values — isTruthy","text":"terms \"truthy\" \"falsy\" generally indicate whether value, coerced base::logical(), TRUE FALSE. use term little loosely ; usage tries match intuitive notions \"value missing available?\", \"user provided answer?\", case action buttons, \"button clicked?\".","code":""},{"path":"/reference/isTruthy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truthy and falsy values — isTruthy","text":"","code":"isTruthy(x)"},{"path":"/reference/isTruthy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truthy and falsy values — isTruthy","text":"x expression whose truthiness value want determine","code":""},{"path":"/reference/isTruthy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truthy and falsy values — isTruthy","text":"example, textInput filled user value \"\", considered falsy value. precise, value truthy unless one : FALSE NULL \"\" empty atomic vector atomic vector contains missing values logical vector contains FALSE missing values object class \"try-error\" value represents unclicked actionButton() Note particular value 0 considered truthy, even though .logical(0) FALSE.","code":""},{"path":"/reference/knitr_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Knitr S3 methods — knitr_methods","title":"Knitr S3 methods — knitr_methods","text":"S3 methods necessary help Shiny applications UI chunks embed knitr/rmarkdown documents.","code":""},{"path":"/reference/knitr_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Knitr S3 methods — knitr_methods","text":"","code":"knit_print.shiny.appobj(x, ...)  knit_print.shiny.render.function(x, ..., inline = FALSE)  knit_print.reactive(x, ..., inline = FALSE)"},{"path":"/reference/knitr_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Knitr S3 methods — knitr_methods","text":"x Object knit_print ... Additional knit_print arguments inline Whether object printed inline.","code":""},{"path":"/reference/loadSupport.html","id":null,"dir":"Reference","previous_headings":"","what":"Load an app's supporting R files — loadSupport","title":"Load an app's supporting R files — loadSupport","text":"Loads supporting R files Shiny application. Specifically, function loads top-level supporting .R files R/ directory adjacent app.R/server.R/ui.R files.","code":""},{"path":"/reference/loadSupport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load an app's supporting R files — loadSupport","text":"","code":"loadSupport(   appDir = NULL,   renv = new.env(parent = globalenv()),   globalrenv = globalenv() )"},{"path":"/reference/loadSupport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load an app's supporting R files — loadSupport","text":"appDir application directory. appDir NULL supplied, nearest enclosing directory Shiny app, starting current directory, used. renv environment files R/ directory evaluated. globalrenv environment global.R evaluated. NULL, global.R evaluated .","code":""},{"path":"/reference/loadSupport.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load an app's supporting R files — loadSupport","text":"Since Shiny 1.5.0, function called default running application. causes problems, two ways opt . can either place file named _disable_autoload.R R/ directory, set options(shiny.autoload.r=FALSE). set option, affect application runs later R session, potentially breaking , running application, unset option options(shiny.autoload.r=NULL) files sourced alphabetical order (determined list.files). global.R evaluated supporting R files R/ directory.","code":""},{"path":"/reference/makeReactiveBinding.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a reactive variable — makeReactiveBinding","title":"Make a reactive variable — makeReactiveBinding","text":"Turns normal variable reactive variable, , one reactive semantics assigned read usual ways. variable may already exist; , value used initial value reactive variable (NULL variable exist).","code":""},{"path":"/reference/makeReactiveBinding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a reactive variable — makeReactiveBinding","text":"","code":"makeReactiveBinding(symbol, env = parent.frame())"},{"path":"/reference/makeReactiveBinding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a reactive variable — makeReactiveBinding","text":"symbol Name variable make reactive, string. env Environment create binding. Expert use .","code":""},{"path":"/reference/makeReactiveBinding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a reactive variable — makeReactiveBinding","text":"None.","code":""},{"path":"/reference/makeReactiveBinding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a reactive variable — makeReactiveBinding","text":"","code":"reactiveConsole(TRUE)  a <- 10 makeReactiveBinding(\"a\")  b <- reactive(a * -1) observe(print(b()))  a <- 20 a <- 30  reactiveConsole(FALSE)"},{"path":"/reference/markdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert inline Markdown — markdown","title":"Insert inline Markdown — markdown","text":"function accepts Markdown-syntax text returns HTML may included Shiny UIs.","code":""},{"path":"/reference/markdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert inline Markdown — markdown","text":"","code":"markdown(mds, extensions = TRUE, .noWS = NULL, ...)"},{"path":"/reference/markdown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert inline Markdown — markdown","text":"mds character vector Markdown source convert HTML. vector one element, single-element character vector concatenated HTML returned. extensions Enable Github syntax extensions; defaults TRUE. .noWS Character vector used omit whitespace normally written around generated HTML. Valid options include , , outside (equivalent end). ... Additional arguments pass commonmark::markdown_html(). arguments dynamic.","code":""},{"path":"/reference/markdown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert inline Markdown — markdown","text":"character vector marked HTML.","code":""},{"path":"/reference/markdown.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Insert inline Markdown — markdown","text":"Leading whitespace trimmed Markdown text glue::trim(). Whitespace trimming ensures Markdown processed correctly even call markdown() indented within surrounding R code. default, Github extensions enabled, can disabled passing extensions = FALSE. Markdown rendering performed commonmark::markdown_html(). Additional arguments markdown() passed arguments markdown_html()","code":""},{"path":"/reference/markdown.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert inline Markdown — markdown","text":"","code":"ui <- fluidPage(   markdown(\"     # Markdown Example      This is a markdown paragraph, and will be contained within a `<p>` tag     in the UI.      The following is an unordered list, which will be represented in the UI as     a `<ul>` with `<li>` children:      * a bullet     * another      [Links](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) work;     so does *emphasis*.      To see more of what's possible, check out [commonmark.org/help](https://commonmark.org/help).     \") )"},{"path":"/reference/markOutputAttrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark a render function with attributes that will be used by the output — markOutputAttrs","title":"Mark a render function with attributes that will be used by the output — markOutputAttrs","text":"Mark render function attributes used output","code":""},{"path":"/reference/markOutputAttrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark a render function with attributes that will be used by the output — markOutputAttrs","text":"","code":"markOutputAttrs(renderFunc, snapshotExclude = NULL, snapshotPreprocess = NULL)"},{"path":"/reference/markOutputAttrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark a render function with attributes that will be used by the output — markOutputAttrs","text":"renderFunc function suitable assigning Shiny output slot. snapshotExclude TRUE, exclude output test snapshots. snapshotPreprocess function preprocessing value taking test snapshot.","code":""},{"path":"/reference/markRenderFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark a function as a render function — markRenderFunction","title":"Mark a function as a render function — markRenderFunction","text":"Please use createRenderFunction() support async execution. (Shiny 1.1.0)","code":""},{"path":"/reference/markRenderFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark a function as a render function — markRenderFunction","text":"","code":"markRenderFunction(   uiFunc,   renderFunc,   outputArgs = list(),   cacheHint = \"auto\",   cacheWriteHook = NULL,   cacheReadHook = NULL )"},{"path":"/reference/markRenderFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark a function as a render function — markRenderFunction","text":"uiFunc function renders Shiny UI. Must take single argument: output ID. renderFunc function suitable assigning Shiny output slot. outputArgs list arguments pass uiFunc. Render functions include outputArgs = list() parameter list, pass value markRenderFunction, allow app authors customize outputs. (Currently, supported dynamically generated UIs, created Shiny code snippets embedded R Markdown documents). cacheHint One \"auto\", FALSE, information identify instance caching using bindCache(). \"auto\", try automatically infer caching information. FALSE, allow caching object. render functions (renderPlot) contain internal state makes unsuitable caching. cacheWriteHook Used render function passed bindCache(). optional callback function invoke saving value render function cache. function must accept one argument, value returned renderFunc, return value store cache. cacheReadHook Used render function passed bindCache(). optional callback function invoke reading value cache (cache hit). function passed one argument, value retrieved cache. can useful side effect needs occur render function behave correctly. example, render functions call createWebDependency() Shiny able serve JS CSS resources.","code":""},{"path":"/reference/markRenderFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mark a function as a render function — markRenderFunction","text":"renderFunc function, annotations.","code":""},{"path":"/reference/markRenderFunction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mark a function as a render function — markRenderFunction","text":"called implementers renderXXX functions order mark return values Shiny render functions, provide hint Shiny regarding UI function commonly used type render function. can used R Markdown documents create complete output widgets just render function. Note generally preferable use createRenderFunction() instead markRenderFunction(). essentially wraps user-provided expression transform function passed , passes resulting function markRenderFunction(). also provides simpler calling interface. may cases markRenderFunction() must used instead createRenderFunction() -- example, transform parameter createRenderFunction() flexible enough needs.","code":""},{"path":[]},{"path":"/reference/maskReactiveContext.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate an expression without a reactive context — maskReactiveContext","title":"Evaluate an expression without a reactive context — maskReactiveContext","text":"Temporarily blocks current reactive context evaluates given expression. attempt directly access reactive values expressions expr give results top-level (default, error).","code":""},{"path":"/reference/maskReactiveContext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate an expression without a reactive context — maskReactiveContext","text":"","code":"maskReactiveContext(expr)"},{"path":"/reference/maskReactiveContext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate an expression without a reactive context — maskReactiveContext","text":"expr expression evaluate.","code":""},{"path":"/reference/maskReactiveContext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate an expression without a reactive context — maskReactiveContext","text":"value expr.","code":""},{"path":[]},{"path":"/reference/memoryCache.html","id":null,"dir":"Reference","previous_headings":"","what":"Create memory cache (deprecated) — memoryCache","title":"Create memory cache (deprecated) — memoryCache","text":"Create memory cache (deprecated)","code":""},{"path":"/reference/memoryCache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create memory cache (deprecated) — memoryCache","text":"","code":"memoryCache(   max_size = 200 * 1024^2,   max_age = Inf,   max_n = Inf,   evict = c(\"lru\", \"fifo\"),   missing = key_missing(),   exec_missing = deprecated(),   logfile = NULL )"},{"path":"/reference/memoryCache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create memory cache (deprecated) — memoryCache","text":"max_size Maximum size cache, bytes. cache exceeds size, cached objects removed according value evict. Use Inf size limit. default 512 megabytes. max_age Maximum age files cache evicted, seconds. Use Inf age limit. max_n Maximum number objects cache. number objects exceeds value, cached objects removed according value evict. Use Inf limit number items. evict eviction policy use decide objects removed cache pruning occurs. Currently, \"lru\" \"fifo\" supported. missing value return get(key) called key present cache. default key_missing() object. actually expression evaluated time cache miss. See section Missing keys information. exec_missing Deprecated. logfile optional filename connection object logging information written. log console, use stderr() stdout().","code":""},{"path":"/reference/MockShinySession.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock Shiny Session — MockShinySession","title":"Mock Shiny Session — MockShinySession","text":"R6 class suitable testing purposes. Simulates, extent possible, behavior ShinySession class. session parameter provided Shiny server functions modules instance ShinySession normal operation. kinds module server testing require class instantiated manually. See instead testServer(). order support advanced usage, instances MockShinySession unlocked public methods fields instances may modified. example, order test authentication workflows, user groups fields may overridden. Modified instances MockShinySession may passed explicitly session argument testServer().","code":""},{"path":"/reference/MockShinySession.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Mock Shiny Session — MockShinySession","text":"env environment associated session. returned value returned module test. singletons Hardcoded empty. Needed rendering HTML (.e. renderUI). clientData Mock client data always returns size plots. output shinyoutputs associated session. input reactive inputs associated session. userData environment initialized empty. progressStack stack progress objects. token real ShinySession, used identify instance URLs. cache session cache object. appcache app cache object. restoreContext Part bookmarking support real ShinySession always NULL MockShinySession. groups Character vector groups associated authenticated user. Always NULL MockShinySesion. user username authenticated user. Always NULL MockShinySession. options list containing session-level shinyOptions.","code":""},{"path":"/reference/MockShinySession.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Mock Shiny Session — MockShinySession","text":"files internal use . downloads internal use . closed Deprecated ShinySession signals error. session Deprecated ShinySession signals error. request empty environment request . request meaningfully mocked currently.","code":""},{"path":[]},{"path":"/reference/MockShinySession.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Mock Shiny Session — MockShinySession","text":"MockShinySession$new() MockShinySession$onFlush() MockShinySession$onFlushed() MockShinySession$onEnded() MockShinySession$isEnded() MockShinySession$isClosed() MockShinySession$close() MockShinySession$cycleStartAction() MockShinySession$fileUrl() MockShinySession$setInputs() MockShinySession$.scheduleTask() MockShinySession$elapse() MockShinySession$.now() MockShinySession$defineOutput() MockShinySession$getOutput() MockShinySession$ns() MockShinySession$flushReact() MockShinySession$makeScope() MockShinySession$setEnv() MockShinySession$setReturned() MockShinySession$getReturned() MockShinySession$genId() MockShinySession$rootScope() MockShinySession$onUnhandledError() MockShinySession$unhandledError() MockShinySession$freezeValue() MockShinySession$onSessionEnded() MockShinySession$registerDownload() MockShinySession$getCurrentOutputInfo() MockShinySession$clone()","code":""},{"path":"/reference/MockShinySession.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Mock Shiny Session — MockShinySession","text":"Create new MockShinySession.","code":""},{"path":"/reference/MockShinySession.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$new()"},{"path":"/reference/MockShinySession.html","id":"method-onflush-","dir":"Reference","previous_headings":"","what":"Method onFlush()","title":"Mock Shiny Session — MockShinySession","text":"Define callback invoked reactive flush","code":""},{"path":"/reference/MockShinySession.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$onFlush(fun, once = TRUE)"},{"path":"/reference/MockShinySession.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"fun function invoke TRUE, run . Otherwise, run every time reactives flushed.","code":""},{"path":"/reference/MockShinySession.html","id":"method-onflushed-","dir":"Reference","previous_headings":"","what":"Method onFlushed()","title":"Mock Shiny Session — MockShinySession","text":"Define callback invoked reactive flush","code":""},{"path":"/reference/MockShinySession.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$onFlushed(fun, once = TRUE)"},{"path":"/reference/MockShinySession.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"fun function invoke TRUE, run . Otherwise, run every time reactives flushed.","code":""},{"path":"/reference/MockShinySession.html","id":"method-onended-","dir":"Reference","previous_headings":"","what":"Method onEnded()","title":"Mock Shiny Session — MockShinySession","text":"Define callback invoked session ends","code":""},{"path":"/reference/MockShinySession.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$onEnded(sessionEndedCallback)"},{"path":"/reference/MockShinySession.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"sessionEndedCallback callback invoke session ended.","code":""},{"path":"/reference/MockShinySession.html","id":"method-isended-","dir":"Reference","previous_headings":"","what":"Method isEnded()","title":"Mock Shiny Session — MockShinySession","text":"Returns FALSE session yet closed","code":""},{"path":"/reference/MockShinySession.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$isEnded()"},{"path":"/reference/MockShinySession.html","id":"method-isclosed-","dir":"Reference","previous_headings":"","what":"Method isClosed()","title":"Mock Shiny Session — MockShinySession","text":"Returns FALSE session yet closed","code":""},{"path":"/reference/MockShinySession.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$isClosed()"},{"path":"/reference/MockShinySession.html","id":"method-close-","dir":"Reference","previous_headings":"","what":"Method close()","title":"Mock Shiny Session — MockShinySession","text":"Closes session","code":""},{"path":"/reference/MockShinySession.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$close()"},{"path":"/reference/MockShinySession.html","id":"method-cyclestartaction-","dir":"Reference","previous_headings":"","what":"Method cycleStartAction()","title":"Mock Shiny Session — MockShinySession","text":"Unsophisticated mock implementation merely invokes","code":""},{"path":"/reference/MockShinySession.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$cycleStartAction(callback)"},{"path":"/reference/MockShinySession.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"callback callback invoked.","code":""},{"path":"/reference/MockShinySession.html","id":"method-fileurl-","dir":"Reference","previous_headings":"","what":"Method fileUrl()","title":"Mock Shiny Session — MockShinySession","text":"Base64-encode given file. Needed image rendering.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$fileUrl(name, file, contentType = \"application/octet-stream\")"},{"path":"/reference/MockShinySession.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"name used file file encoded contentType content type base64-encoded string","code":""},{"path":"/reference/MockShinySession.html","id":"method-setinputs-","dir":"Reference","previous_headings":"","what":"Method setInputs()","title":"Mock Shiny Session — MockShinySession","text":"Sets reactive values associated session$inputs object flushes reactives.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$setInputs(...)"},{"path":"/reference/MockShinySession.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"... inputs set. arguments processed rlang::list2() dynamic. Input names may duplicated.","code":""},{"path":"/reference/MockShinySession.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mock Shiny Session — MockShinySession","text":"","code":"\\dontrun{ session$setInputs(x=1, y=2) }"},{"path":"/reference/MockShinySession.html","id":"method-scheduletask-","dir":"Reference","previous_headings":"","what":"Method .scheduleTask()","title":"Mock Shiny Session — MockShinySession","text":"internal method used others. Schedules callback execution number millis milliseconds.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$.scheduleTask(millis, callback)"},{"path":"/reference/MockShinySession.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"millis number milliseconds schedule callback callback function schedule.","code":""},{"path":"/reference/MockShinySession.html","id":"method-elapse-","dir":"Reference","previous_headings":"","what":"Method elapse()","title":"Mock Shiny Session — MockShinySession","text":"Simulate passing time given number milliseconds.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$elapse(millis)"},{"path":"/reference/MockShinySession.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"millis number milliseconds advance time.","code":""},{"path":"/reference/MockShinySession.html","id":"method-now-","dir":"Reference","previous_headings":"","what":"Method .now()","title":"Mock Shiny Session — MockShinySession","text":"internal method used others.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$.now()"},{"path":"/reference/MockShinySession.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Mock Shiny Session — MockShinySession","text":"Elapsed time milliseconds.","code":""},{"path":"/reference/MockShinySession.html","id":"method-defineoutput-","dir":"Reference","previous_headings":"","what":"Method defineOutput()","title":"Mock Shiny Session — MockShinySession","text":"internal method used others. Defines output way sets private$currentOutputName appropriately.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$defineOutput(name, func, label)"},{"path":"/reference/MockShinySession.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"name name output. func render definition. label used.","code":""},{"path":"/reference/MockShinySession.html","id":"method-getoutput-","dir":"Reference","previous_headings":"","what":"Method getOutput()","title":"Mock Shiny Session — MockShinySession","text":"internal method used others. Forces evaluation reactive dependencies output function.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$getOutput(name)"},{"path":"/reference/MockShinySession.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"name name output.","code":""},{"path":"/reference/MockShinySession.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Mock Shiny Session — MockShinySession","text":"return value function responsible rendering output.","code":""},{"path":"/reference/MockShinySession.html","id":"method-ns-","dir":"Reference","previous_headings":"","what":"Method ns()","title":"Mock Shiny Session — MockShinySession","text":"Returns given id prefixed namespace's id.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$ns(id)"},{"path":"/reference/MockShinySession.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"id id prefix namespace id.","code":""},{"path":"/reference/MockShinySession.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Mock Shiny Session — MockShinySession","text":"id namespace prefix.","code":""},{"path":"/reference/MockShinySession.html","id":"method-flushreact-","dir":"Reference","previous_headings":"","what":"Method flushReact()","title":"Mock Shiny Session — MockShinySession","text":"Trigger reactive flush right now.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$flushReact()"},{"path":"/reference/MockShinySession.html","id":"method-makescope-","dir":"Reference","previous_headings":"","what":"Method makeScope()","title":"Mock Shiny Session — MockShinySession","text":"Create return namespace-specific session proxy.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$makeScope(namespace)"},{"path":"/reference/MockShinySession.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"namespace Character vector indicating namespace.","code":""},{"path":"/reference/MockShinySession.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Mock Shiny Session — MockShinySession","text":"new session proxy.","code":""},{"path":"/reference/MockShinySession.html","id":"method-setenv-","dir":"Reference","previous_headings":"","what":"Method setEnv()","title":"Mock Shiny Session — MockShinySession","text":"Set environment associated testServer() call, previously set. ensures environment outermost module test one retained. words, first assignment wins.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$setEnv(env)"},{"path":"/reference/MockShinySession.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"env environment retain.","code":""},{"path":"/reference/MockShinySession.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Mock Shiny Session — MockShinySession","text":"provided env.","code":""},{"path":"/reference/MockShinySession.html","id":"method-setreturned-","dir":"Reference","previous_headings":"","what":"Method setReturned()","title":"Mock Shiny Session — MockShinySession","text":"Set value returned module call proactively flush. Note method may called multiple times modules nested. last assignment, corresponding invocation setReturned() outermost module, wins.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$setReturned(value)"},{"path":"/reference/MockShinySession.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"value value returned module","code":""},{"path":"/reference/MockShinySession.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Mock Shiny Session — MockShinySession","text":"provided value.","code":""},{"path":"/reference/MockShinySession.html","id":"method-getreturned-","dir":"Reference","previous_headings":"","what":"Method getReturned()","title":"Mock Shiny Session — MockShinySession","text":"Get value returned module call.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$getReturned()"},{"path":"/reference/MockShinySession.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Mock Shiny Session — MockShinySession","text":"value returned module call","code":""},{"path":"/reference/MockShinySession.html","id":"method-genid-","dir":"Reference","previous_headings":"","what":"Method genId()","title":"Mock Shiny Session — MockShinySession","text":"Generate distinct character identifier use proxy namespace.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$genId()"},{"path":"/reference/MockShinySession.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Mock Shiny Session — MockShinySession","text":"character identifier unique current session.","code":""},{"path":"/reference/MockShinySession.html","id":"method-rootscope-","dir":"Reference","previous_headings":"","what":"Method rootScope()","title":"Mock Shiny Session — MockShinySession","text":"Provides way access root MockShinySession descendant proxy.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$rootScope()"},{"path":"/reference/MockShinySession.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Mock Shiny Session — MockShinySession","text":"root MockShinySession.","code":""},{"path":"/reference/MockShinySession.html","id":"method-onunhandlederror-","dir":"Reference","previous_headings":"","what":"Method onUnhandledError()","title":"Mock Shiny Session — MockShinySession","text":"Add unhandled error callback.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$onUnhandledError(callback)"},{"path":"/reference/MockShinySession.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"callback callback add, accept error object first argument.","code":""},{"path":"/reference/MockShinySession.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Mock Shiny Session — MockShinySession","text":"deregistration function.","code":""},{"path":"/reference/MockShinySession.html","id":"method-unhandlederror-","dir":"Reference","previous_headings":"","what":"Method unhandledError()","title":"Mock Shiny Session — MockShinySession","text":"Called observers reactive expression errors.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$unhandledError(e, close = TRUE)"},{"path":"/reference/MockShinySession.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"e error object. close TRUE, session closed error handled, defaults FALSE.","code":""},{"path":"/reference/MockShinySession.html","id":"method-freezevalue-","dir":"Reference","previous_headings":"","what":"Method freezeValue()","title":"Mock Shiny Session — MockShinySession","text":"Freeze value flush cycle completes.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$freezeValue(x, name)"},{"path":"/reference/MockShinySession.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"x ReactiveValues object. name name reactive value within x.","code":""},{"path":"/reference/MockShinySession.html","id":"method-onsessionended-","dir":"Reference","previous_headings":"","what":"Method onSessionEnded()","title":"Mock Shiny Session — MockShinySession","text":"Registers given callback invoked session closed (.e. connection client severed). return value function unregisters callback. multiple callbacks registered, order invoked guaranteed.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$onSessionEnded(sessionEndedCallback)"},{"path":"/reference/MockShinySession.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"sessionEndedCallback Function call session ends.","code":""},{"path":"/reference/MockShinySession.html","id":"method-registerdownload-","dir":"Reference","previous_headings":"","what":"Method registerDownload()","title":"Mock Shiny Session — MockShinySession","text":"Associated downloadable file session.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$registerDownload(name, filename, contentType, content)"},{"path":"/reference/MockShinySession.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"name un-namespaced output name associate downloadable file. filename string function designating name file. contentType string content type file. used MockShinySession. content function takes single argument file file path (string) nonexistent temp file, writes content file path. (Reactive values functions may used function.)","code":""},{"path":"/reference/MockShinySession.html","id":"method-getcurrentoutputinfo-","dir":"Reference","previous_headings":"","what":"Method getCurrentOutputInfo()","title":"Mock Shiny Session — MockShinySession","text":"Get information output currently executed.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$getCurrentOutputInfo()"},{"path":"/reference/MockShinySession.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Mock Shiny Session — MockShinySession","text":"list name output. output currently executed, return NULL. output, NULL output currently executing.","code":""},{"path":"/reference/MockShinySession.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Mock Shiny Session — MockShinySession","text":"objects class cloneable method.","code":""},{"path":"/reference/MockShinySession.html","id":"usage-29","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock Shiny Session — MockShinySession","text":"","code":"MockShinySession$clone(deep = FALSE)"},{"path":"/reference/MockShinySession.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock Shiny Session — MockShinySession","text":"deep Whether make deep clone.","code":""},{"path":"/reference/MockShinySession.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mock Shiny Session — MockShinySession","text":"","code":"## ------------------------------------------------ ## Method `MockShinySession$setInputs` ## ------------------------------------------------  if (FALSE) { session$setInputs(x=1, y=2) }"},{"path":"/reference/modalDialog.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a modal dialog UI — modalDialog","title":"Create a modal dialog UI — modalDialog","text":"modalDialog() creates UI modal dialog, using Bootstrap's modal class. Modals typically used showing important messages, presenting UI requires input user, user name password input. modalButton() creates button dismiss dialog clicked, typically used customising footer.","code":""},{"path":"/reference/modalDialog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a modal dialog UI — modalDialog","text":"","code":"modalDialog(   ...,   title = NULL,   footer = modalButton(\"Dismiss\"),   size = c(\"m\", \"s\", \"l\", \"xl\"),   easyClose = FALSE,   fade = TRUE )  modalButton(label, icon = NULL)"},{"path":"/reference/modalDialog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a modal dialog UI — modalDialog","text":"... UI elements body modal dialog box. title optional title dialog. footer UI footer. Use NULL footer. size One \"s\" small, \"m\" (default) medium, \"l\" large, \"xl\" extra large. Note \"xl\" works Bootstrap 4 (opt-Bootstrap 4+, pass bslib::bs_theme() theme argument page container like fluidPage()). easyClose TRUE, modal dialog can dismissed clicking outside dialog box, pressing Escape key. FALSE (default), modal dialog dismissed ways; instead must dismissed clicking modalButton(), call removeModal() server. fade FALSE, modal dialog fade-animation (simply appear rather fade view). label contents button link--usually text label, also use HTML, like image. icon optional icon() appear button.","code":""},{"path":"/reference/modalDialog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a modal dialog UI — modalDialog","text":"","code":"if (interactive()) { # Display an important message that can be dismissed only by clicking the # dismiss button. shinyApp(   ui = basicPage(     actionButton(\"show\", \"Show modal dialog\")   ),   server = function(input, output) {     observeEvent(input$show, {       showModal(modalDialog(         title = \"Important message\",         \"This is an important message!\"       ))     })   } )   # Display a message that can be dismissed by clicking outside the modal dialog, # or by pressing Esc. shinyApp(   ui = basicPage(     actionButton(\"show\", \"Show modal dialog\")   ),   server = function(input, output) {     observeEvent(input$show, {       showModal(modalDialog(         title = \"Somewhat important message\",         \"This is a somewhat important message.\",         easyClose = TRUE,         footer = NULL       ))     })   } )   # Display a modal that requires valid input before continuing. shinyApp(   ui = basicPage(     actionButton(\"show\", \"Show modal dialog\"),     verbatimTextOutput(\"dataInfo\")   ),    server = function(input, output) {     # reactiveValues object for storing current data set.     vals <- reactiveValues(data = NULL)      # Return the UI for a modal dialog with data selection input. If 'failed' is     # TRUE, then display a message that the previous value was invalid.     dataModal <- function(failed = FALSE) {       modalDialog(         textInput(\"dataset\", \"Choose data set\",           placeholder = 'Try \"mtcars\" or \"abc\"'         ),         span('(Try the name of a valid data object like \"mtcars\", ',              'then a name of a non-existent object like \"abc\")'),         if (failed)           div(tags$b(\"Invalid name of data object\", style = \"color: red;\")),          footer = tagList(           modalButton(\"Cancel\"),           actionButton(\"ok\", \"OK\")         )       )     }      # Show modal when button is clicked.     observeEvent(input$show, {       showModal(dataModal())     })      # When OK button is pressed, attempt to load the data set. If successful,     # remove the modal. If not show another modal, but this time with a failure     # message.     observeEvent(input$ok, {       # Check that data object exists and is data frame.       if (!is.null(input$dataset) && nzchar(input$dataset) &&           exists(input$dataset) && is.data.frame(get(input$dataset))) {         vals$data <- get(input$dataset)         removeModal()       } else {         showModal(dataModal(failed = TRUE))       }     })      # Display information about selected data     output$dataInfo <- renderPrint({       if (is.null(vals$data))         \"No data selected\"       else         summary(vals$data)     })   } ) }"},{"path":"/reference/moduleServer.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny modules — moduleServer","title":"Shiny modules — moduleServer","text":"Shiny's module feature lets break complicated UI server logic smaller, self-contained pieces. Compared large monolithic Shiny apps, modules easier reuse easier reason . See article https://shiny.rstudio.com/articles/modules.html learn .","code":""},{"path":"/reference/moduleServer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny modules — moduleServer","text":"","code":"moduleServer(id, module, session = getDefaultReactiveDomain())"},{"path":"/reference/moduleServer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny modules — moduleServer","text":"id ID string corresponds ID used call module's UI function. module Shiny module server function. session Session make child scope (default almost always used).","code":""},{"path":"/reference/moduleServer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny modules — moduleServer","text":"return value, , executing module server function","code":""},{"path":"/reference/moduleServer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shiny modules — moduleServer","text":"Starting Shiny 1.5.0, recommend using moduleServer instead callModule(), syntax little easier understand, modules created moduleServer can tested testServer().","code":""},{"path":[]},{"path":"/reference/moduleServer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny modules — moduleServer","text":"","code":"# Define the UI for a module counterUI <- function(id, label = \"Counter\") {   ns <- NS(id)   tagList(     actionButton(ns(\"button\"), label = label),     verbatimTextOutput(ns(\"out\"))   ) }  # Define the server logic for a module counterServer <- function(id) {   moduleServer(     id,     function(input, output, session) {       count <- reactiveVal(0)       observeEvent(input$button, {         count(count() + 1)       })       output$out <- renderText({         count()       })       count     }   ) }  # Use the module in an app ui <- fluidPage(   counterUI(\"counter1\", \"Counter #1\"),   counterUI(\"counter2\", \"Counter #2\") ) server <- function(input, output, session) {   counterServer(\"counter1\")   counterServer(\"counter2\") } if (interactive()) {   shinyApp(ui, server) }    # If you want to pass extra parameters to the module's server logic, you can # add them to your function. In this case `prefix` is text that will be # printed before the count. counterServer2 <- function(id, prefix = NULL) {   moduleServer(     id,     function(input, output, session) {       count <- reactiveVal(0)       observeEvent(input$button, {         count(count() + 1)       })       output$out <- renderText({         paste0(prefix, count())       })       count     }   ) }  ui <- fluidPage(   counterUI(\"counter\", \"Counter\"), ) server <- function(input, output, session) {   counterServer2(\"counter\", \"The current count is: \") } if (interactive()) {   shinyApp(ui, server) }"},{"path":"/reference/navbarPage.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a page with a top level navigation bar — navbarPage","title":"Create a page with a top level navigation bar — navbarPage","text":"Create page contains top level navigation bar can used toggle set tabPanel() elements.","code":""},{"path":"/reference/navbarPage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a page with a top level navigation bar — navbarPage","text":"","code":"navbarPage(   title,   ...,   id = NULL,   selected = NULL,   position = c(\"static-top\", \"fixed-top\", \"fixed-bottom\"),   header = NULL,   footer = NULL,   inverse = FALSE,   collapsible = FALSE,   fluid = TRUE,   theme = NULL,   windowTitle = NA,   lang = NULL )  navbarMenu(title, ..., menuName = title, icon = NULL)"},{"path":"/reference/navbarPage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a page with a top level navigation bar — navbarPage","text":"title title display navbar ... tabPanel() elements include page. navbarMenu function also accepts strings, used menu section headers. string set dashes like \"----\" horizontal separator displayed menu. id provided, can use input$id server logic determine current tabs active. value correspond value argument passed tabPanel(). selected value (, none supplied, title) tab selected default. NULL, first tab selected. position Determines whether navbar displayed top page normal scrolling behavior (\"static-top\"), pinned top (\"fixed-top\"), pinned bottom (\"fixed-bottom\"). Note using \"fixed-top\" \"fixed-bottom\" cause navbar overlay body content, unless add padding, e.g.: tags$style(type=\"text/css\", \"body   {padding-top: 70px;}\") header Tag list tags display common header tabPanels. footer Tag list tags display common footer tabPanels inverse TRUE use dark background light text navigation bar collapsible TRUE automatically collapse navigation elements expandable menu mobile devices narrow window widths. fluid TRUE use fluid layout. FALSE use fixed layout. theme One following: NULL (default), implies \"stock\" build Bootstrap 3. bslib::bs_theme() object. can used replace stock build Bootstrap 3 customized version Bootstrap 3 higher. character string pointing alternative Bootstrap stylesheet (normally css file within www directory, e.g. www/bootstrap.css). windowTitle browser window title (character string). default value, NA, means use character strings appear title (none found, host URL page displayed default). lang ISO 639-1 language code HTML page, \"en\" \"ko\". used lang <html> tag, <html lang=\"en\">. default (NULL) results empty string. menuName name identifies navbarMenu. needed want insert/remove show/hide entire navbarMenu. icon Optional icon appear navbarMenu tab.","code":""},{"path":"/reference/navbarPage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a page with a top level navigation bar — navbarPage","text":"UI definition can passed shinyUI function.","code":""},{"path":"/reference/navbarPage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a page with a top level navigation bar — navbarPage","text":"navbarMenu function can used create embedded menu within navbar turns includes additional tabPanels (see example ).","code":""},{"path":[]},{"path":"/reference/navbarPage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a page with a top level navigation bar — navbarPage","text":"","code":"navbarPage(\"App Title\",   tabPanel(\"Plot\"),   tabPanel(\"Summary\"),   tabPanel(\"Table\") ) #> <body class=\"bslib-page-navbar\"> #>   <nav class=\"navbar navbar-default navbar-static-top\" role=\"navigation\"> #>     <div class=\"container-fluid\"> #>       <div class=\"navbar-header\"> #>         <span class=\"navbar-brand\">App Title<\/span> #>       <\/div> #>       <ul class=\"nav navbar-nav nav-underline\" data-tabsetid=\"3613\"> #>         <li class=\"active\"> #>           <a href=\"#tab-3613-1\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Plot\">Plot<\/a> #>         <\/li> #>         <li> #>           <a href=\"#tab-3613-2\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Summary\">Summary<\/a> #>         <\/li> #>         <li> #>           <a href=\"#tab-3613-3\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Table\">Table<\/a> #>         <\/li> #>       <\/ul> #>     <\/div> #>   <\/nav> #>   <div class=\"container-fluid\"> #>     <div class=\"tab-content\" data-tabsetid=\"3613\"> #>       <div class=\"tab-pane active\" data-value=\"Plot\" id=\"tab-3613-1\"><\/div> #>       <div class=\"tab-pane\" data-value=\"Summary\" id=\"tab-3613-2\"><\/div> #>       <div class=\"tab-pane\" data-value=\"Table\" id=\"tab-3613-3\"><\/div> #>     <\/div> #>   <\/div> #> <\/body>  navbarPage(\"App Title\",   tabPanel(\"Plot\"),   navbarMenu(\"More\",     tabPanel(\"Summary\"),     \"----\",     \"Section header\",     tabPanel(\"Table\")   ) ) #> <body class=\"bslib-page-navbar\"> #>   <nav class=\"navbar navbar-default navbar-static-top\" role=\"navigation\"> #>     <div class=\"container-fluid\"> #>       <div class=\"navbar-header\"> #>         <span class=\"navbar-brand\">App Title<\/span> #>       <\/div> #>       <ul class=\"nav navbar-nav nav-underline\" data-tabsetid=\"7393\"> #>         <li class=\"active\"> #>           <a href=\"#tab-7393-1\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Plot\">Plot<\/a> #>         <\/li> #>         <li class=\"dropdown\"> #>           <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" data-bs-toggle=\"dropdown\" data-value=\"More\"> #>             More #>             <b class=\"caret\"><\/b> #>           <\/a> #>           <ul class=\"dropdown-menu\" data-tabsetid=\"7327\"> #>             <li> #>               <a href=\"#tab-7327-1\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Summary\">Summary<\/a> #>             <\/li> #>             <li class=\"divider\"><\/li> #>             <li class=\"dropdown-header\">Section header<\/li> #>             <li> #>               <a href=\"#tab-7327-4\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Table\">Table<\/a> #>             <\/li> #>           <\/ul> #>         <\/li> #>       <\/ul> #>     <\/div> #>   <\/nav> #>   <div class=\"container-fluid\"> #>     <div class=\"tab-content\" data-tabsetid=\"7393\"> #>       <div class=\"tab-pane active\" data-value=\"Plot\" id=\"tab-7393-1\"><\/div> #>       <div class=\"tab-pane\" data-value=\"Summary\" id=\"tab-7327-1\"><\/div> #>       <div class=\"tab-pane\" data-value=\"Table\" id=\"tab-7327-4\"><\/div> #>     <\/div> #>   <\/div> #> <\/body>"},{"path":"/reference/navlistPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a navigation list panel — navlistPanel","title":"Create a navigation list panel — navlistPanel","text":"Create navigation list panel provides list links left navigate set tabPanels displayed right.","code":""},{"path":"/reference/navlistPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a navigation list panel — navlistPanel","text":"","code":"navlistPanel(   ...,   id = NULL,   selected = NULL,   header = NULL,   footer = NULL,   well = TRUE,   fluid = TRUE,   widths = c(4, 8) )"},{"path":"/reference/navlistPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a navigation list panel — navlistPanel","text":"... tabPanel() elements include navlist id provided, can use input$id server logic determine current navlist items active. value correspond value argument passed tabPanel(). selected value (, none supplied, title) navigation item selected default. NULL, first navigation selected. header Tag list tags display common header tabPanels. footer Tag list tags display common footer tabPanels well TRUE place well (gray rounded rectangle) around navigation list. fluid TRUE use fluid layout; FALSE use fixed layout. widths Column widths navigation list tabset content areas respectively.","code":""},{"path":"/reference/navlistPanel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a navigation list panel — navlistPanel","text":"can include headers within navlistPanel including plain text elements list. Versions Shiny 0.11 supported separators \"------\", 0.11, separators longer supported. version 0.11 switched Bootstrap 3, support separators.","code":""},{"path":[]},{"path":"/reference/navlistPanel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a navigation list panel — navlistPanel","text":"","code":"fluidPage(    titlePanel(\"Application Title\"),    navlistPanel(     \"Header\",     tabPanel(\"First\"),     tabPanel(\"Second\"),     tabPanel(\"Third\")   ) ) #> <div class=\"container-fluid\"> #>   <h2>Application Title<\/h2> #>   <div class=\"row\"> #>     <div class=\"col-sm-4 well\"> #>       <ul class=\"nav nav-pills nav-stacked\" data-tabsetid=\"2812\"> #>         <li class=\"navbar-brand\">Header<\/li> #>         <li class=\"active\"> #>           <a href=\"#tab-2812-2\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"First\">First<\/a> #>         <\/li> #>         <li> #>           <a href=\"#tab-2812-3\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Second\">Second<\/a> #>         <\/li> #>         <li> #>           <a href=\"#tab-2812-4\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Third\">Third<\/a> #>         <\/li> #>       <\/ul> #>     <\/div> #>     <div class=\"col-sm-8\"> #>       <div class=\"tab-content\" data-tabsetid=\"2812\"> #>         <div class=\"tab-pane active\" data-value=\"First\" id=\"tab-2812-2\"><\/div> #>         <div class=\"tab-pane\" data-value=\"Second\" id=\"tab-2812-3\"><\/div> #>         <div class=\"tab-pane\" data-value=\"Third\" id=\"tab-2812-4\"><\/div> #>       <\/div> #>     <\/div> #>   <\/div> #> <\/div>"},{"path":"/reference/NS.html","id":null,"dir":"Reference","previous_headings":"","what":"Namespaced IDs for inputs/outputs — NS","title":"Namespaced IDs for inputs/outputs — NS","text":"NS function creates namespaced IDs bare IDs, joining using ns.sep delimiter. intended use Shiny modules. See https://shiny.rstudio.com/articles/modules.html.","code":""},{"path":"/reference/NS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Namespaced IDs for inputs/outputs — NS","text":"","code":"NS(namespace, id = NULL)  ns.sep"},{"path":"/reference/NS.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Namespaced IDs for inputs/outputs — NS","text":"object class character length 1.","code":""},{"path":"/reference/NS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Namespaced IDs for inputs/outputs — NS","text":"namespace character vector use namespace. can length, though single element common. Length 0 cause id returned without namespace, length 2 interpreted multiple namespaces, increasing order specificity (.e. starting top-level namespace). id id string namespaced (optional).","code":""},{"path":"/reference/NS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Namespaced IDs for inputs/outputs — NS","text":"id missing, returns function expects id string argument returns id namespace prepended.","code":""},{"path":"/reference/NS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Namespaced IDs for inputs/outputs — NS","text":"Shiny applications use IDs identify inputs outputs. IDs must unique within application, accidentally using input/output ID result unexpected behavior. traditional solution preventing name collisions namespaces; namespace ID directory file. Use NS function turn bare ID namespaced one, combining ns.sep .","code":""},{"path":[]},{"path":"/reference/numericInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a numeric input control — numericInput","title":"Create a numeric input control — numericInput","text":"Create input control entry numeric values","code":""},{"path":"/reference/numericInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a numeric input control — numericInput","text":"","code":"numericInput(   inputId,   label,   value,   min = NA,   max = NA,   step = NA,   width = NULL )"},{"path":"/reference/numericInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a numeric input control — numericInput","text":"inputId input slot used access value. label Display label control, NULL label. value Initial value. min Minimum allowed value max Maximum allowed value step Interval use stepping min max width width input, e.g. '400px', '100%'; see validateCssUnit().","code":""},{"path":"/reference/numericInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a numeric input control — numericInput","text":"numeric input control can added UI definition.","code":""},{"path":"/reference/numericInput.html","id":"server-value","dir":"Reference","previous_headings":"","what":"Server value","title":"Create a numeric input control — numericInput","text":"numeric vector length 1.","code":""},{"path":[]},{"path":"/reference/numericInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a numeric input control — numericInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   numericInput(\"obs\", \"Observations:\", 10, min = 1, max = 100),   verbatimTextOutput(\"value\") ) server <- function(input, output) {   output$value <- renderText({ input$obs }) } shinyApp(ui, server) }"},{"path":"/reference/observe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a reactive observer — observe","title":"Create a reactive observer — observe","text":"Creates observer given expression.","code":""},{"path":"/reference/observe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a reactive observer — observe","text":"","code":"observe(   x,   env = parent.frame(),   quoted = FALSE,   ...,   label = NULL,   suspended = FALSE,   priority = 0,   domain = getDefaultReactiveDomain(),   autoDestroy = TRUE,   ..stacktraceon = TRUE )"},{"path":"/reference/observe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a reactive observer — observe","text":"x expression (quoted unquoted). return value ignored. env parent environment reactive expression. default, calling environment, defining ordinary non-reactive expression. x quosure quoted TRUE, env ignored. quoted TRUE, quote()ed value x used x evaluated. x quosure like use expression value x, must set quoted TRUE. ... used. label label observer, useful debugging. suspended TRUE, start observer suspended state. FALSE (default), start non-suspended state. priority integer numeric controls priority observer executed. higher value means higher priority: observer higher priority value execute observers lower priority values. Positive, negative, zero values allowed. domain See domains. autoDestroy TRUE (default), observer automatically destroyed domain () ends. ..stacktraceon Advanced use . stack manipulation purposes; see stacktrace().","code":""},{"path":"/reference/observe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a reactive observer — observe","text":"observer reference class object. object following methods: suspend() Causes observer stop scheduling flushes (re-executions) response invalidations. observer invalidated prior call re-executed yet re-execution still occur, flush already scheduled. resume() Causes observer start re-executing response invalidations. observer invalidated suspended, schedule re-execution. destroy() Stops observer executing ever , even currently scheduled re-execution. setPriority(priority = 0) Change observer's priority. Note observer currently invalidated, change priority take effect next invalidation--unless observer also currently suspended, case priority change effective upon resume. setAutoDestroy(autoDestroy) Sets whether observer automatically destroyed domain () ends. autoDestroy TRUE domain already ended, destroy() called immediately.\" onInvalidate(callback) Register callback function run observer invalidated. arguments provided callback function invoked.","code":""},{"path":"/reference/observe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a reactive observer — observe","text":"observer like reactive expression can read reactive values call reactive expressions, automatically re-execute dependencies change. unlike reactive expressions, yield result used input reactive expressions. Thus, observers useful side effects (example, performing /O). Another contrast reactive expressions observers execution strategy. Reactive expressions use lazy evaluation; , dependencies change, re-execute right away rather wait called someone else. Indeed, called never re-execute. contrast, observers use eager evaluation; soon dependencies change, schedule re-execute. Starting Shiny 0.10.0, observers automatically destroyed default domain owns ends (e.g. Shiny session ends).","code":""},{"path":"/reference/observe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a reactive observer — observe","text":"","code":"values <- reactiveValues(A=1)  obsB <- observe({   print(values$A + 1) })  # To store expressions for later conversion to observe, use rlang::quo() myquo <- rlang::quo({ print(values$A + 3) }) obsC <- rlang::inject(observe(!!myquo))  # (Legacy) Can use quoted expressions obsD <- observe(quote({ print(values$A + 2) }), quoted = TRUE)  # In a normal Shiny app, the web client will trigger flush events. If you # are at the console, you can force a flush with flushReact() shiny:::flushReact() #> [1] -30 #> [1] 2 #> [1] 4 #> [1] 3"},{"path":"/reference/observeEvent.html","id":null,"dir":"Reference","previous_headings":"","what":"Event handler — observeEvent","title":"Event handler — observeEvent","text":"Respond \"event-like\" reactive inputs, values, expressions. Shiny 1.6.0, recommend using bindEvent() instead eventReactive() observeEvent(). bindEvent() can composed bindCache(), can also used render functions (like renderText() renderPlot()).","code":""},{"path":"/reference/observeEvent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event handler — observeEvent","text":"","code":"observeEvent(   eventExpr,   handlerExpr,   event.env = parent.frame(),   event.quoted = FALSE,   handler.env = parent.frame(),   handler.quoted = FALSE,   ...,   label = NULL,   suspended = FALSE,   priority = 0,   domain = getDefaultReactiveDomain(),   autoDestroy = TRUE,   ignoreNULL = TRUE,   ignoreInit = FALSE,   once = FALSE )  eventReactive(   eventExpr,   valueExpr,   event.env = parent.frame(),   event.quoted = FALSE,   value.env = parent.frame(),   value.quoted = FALSE,   ...,   label = NULL,   domain = getDefaultReactiveDomain(),   ignoreNULL = TRUE,   ignoreInit = FALSE )"},{"path":"/reference/observeEvent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Event handler — observeEvent","text":"eventExpr (quoted unquoted) expression represents event; can simple reactive value like input$click, call reactive expression like dataset(), even complex expression inside curly braces handlerExpr expression call whenever eventExpr invalidated. side-effect-producing action (return value ignored). executed within isolate() scope. event.env parent environment reactive expression. default, calling environment, defining ordinary non-reactive expression. eventExpr quosure event.quoted TRUE, event.env ignored. event.quoted TRUE, quote()ed value eventExpr used eventExpr evaluated. eventExpr quosure like use expression value eventExpr, must set event.quoted TRUE. handler.env parent environment reactive expression. default, calling environment, defining ordinary non-reactive expression. handlerExpr quosure handler.quoted TRUE, handler.env ignored. handler.quoted TRUE, quote()ed value handlerExpr used handlerExpr evaluated. handlerExpr quosure like use expression value handlerExpr, must set handler.quoted TRUE. ... Currently used. label label observer reactive, useful debugging. suspended TRUE, start observer suspended state. FALSE (default), start non-suspended state. priority integer numeric controls priority observer executed. observer given priority level always execute sooner observers lower priority level. Positive, negative, zero values allowed. domain See domains. autoDestroy TRUE (default), observer automatically destroyed domain () ends. ignoreNULL Whether action triggered (value calculated, case eventReactive) input event expression NULL. See Details. ignoreInit TRUE, , observeEvent first created/initialized, ignore handlerExpr (second argument), whether otherwise supposed run . default FALSE. See Details. Whether observeEvent immediately destroyed first time code handlerExpr run. pattern useful want subscribe event happen . valueExpr expression produces return value eventReactive. executed within isolate() scope. value.env parent environment reactive expression. default, calling environment, defining ordinary non-reactive expression. valueExpr quosure value.quoted TRUE, value.env ignored. value.quoted TRUE, quote()ed value valueExpr used valueExpr evaluated. valueExpr quosure like use expression value valueExpr, must set value.quoted TRUE.","code":""},{"path":"/reference/observeEvent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Event handler — observeEvent","text":"observeEvent returns observer reference class object (see observe()). eventReactive returns reactive expression object (see reactive()).","code":""},{"path":"/reference/observeEvent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Event handler — observeEvent","text":"Shiny's reactive programming framework primarily designed calculated values (reactive expressions) side-effect-causing actions (observers) respond inputs changing. often desired Shiny apps, always: sometimes want wait specific action taken user, like clicking actionButton(), calculating expression taking action. reactive value expression used trigger calculations way called event. situations demand imperative, \"event handling\" style programming possible--particularly intuitive--using reactive programming primitives observe() isolate(). observeEvent eventReactive provide straightforward APIs event handling wrap observe isolate. Use observeEvent whenever want perform action response event. (Note \"recalculate value\" generally count performing action--see eventReactive .) first argument event want respond , second argument function called whenever event occurs. Note observeEvent() equivalent using observe() %>% bindEvent() Shiny 1.6.0, recommend latter. Use eventReactive create calculated value updates response event. just like normal reactive expression except ignores usual invalidations come reactive dependencies; invalidates response given event. Note eventReactive() equivalent using reactive() %>% bindEvent() Shiny 1.6.0, recommend latter.","code":""},{"path":"/reference/observeEvent.html","id":"ignorenull-and-ignoreinit","dir":"Reference","previous_headings":"","what":"ignoreNULL and ignoreInit","title":"Event handler — observeEvent","text":"observeEvent eventReactive take ignoreNULL parameter affects behavior eventExpr evaluates NULL (special case actionButton(), 0). cases, ignoreNULL TRUE, observeEvent execute eventReactive raise silent validation error. useful behavior want action calculation app first starts, wait user initiate action first (like \"Submit\" button); whereas ignoreNULL=FALSE desirable want initially perform action/calculation just let user re-initiate (like \"Recalculate\" button). Likewise, observeEvent eventReactive also take ignoreInit argument. default, run right created (except , moment, eventExpr evaluates NULL ignoreNULL TRUE). responding click action button, may often useful set ignoreInit TRUE. example, setting observeEvent dynamically created button, ignoreInit = TRUE guarantee action (handlerExpr) triggered button actually clicked, instead also triggered created/initialized. Similarly, setting eventReactive responds dynamically created button used refresh data (returned eventReactive), use eventReactive([...], ignoreInit = TRUE) want let user decide /want refresh data (since, depending app, may computationally expensive operation). Even though ignoreNULL ignoreInit can used similar purposes independent one another. result combining : ignoreNULL = TRUE ignoreInit = FALSE default. combination means handlerExpr/ valueExpr run every time eventExpr NULL. , time creation observeEvent/eventReactive, eventExpr happens NULL, code runs. ignoreNULL = FALSE ignoreInit = FALSE combination means handlerExpr/valueExpr run every time matter . ignoreNULL = FALSE ignoreInit = TRUE combination means handlerExpr/valueExpr run observeEvent/eventReactive created (ignoreInit = TRUE), run every time. ignoreNULL = TRUE ignoreInit = TRUE combination means handlerExpr/valueExpr run observeEvent/eventReactive created ( ignoreInit = TRUE). , handlerExpr/valueExpr run every time eventExpr NULL.","code":""},{"path":[]},{"path":"/reference/observeEvent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Event handler — observeEvent","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {    ## App 1: Sample usage   shinyApp(     ui = fluidPage(       column(4,         numericInput(\"x\", \"Value\", 5),         br(),         actionButton(\"button\", \"Show\")       ),       column(8, tableOutput(\"table\"))     ),     server = function(input, output) {       # Take an action every time button is pressed;       # here, we just print a message to the console       observeEvent(input$button, {         cat(\"Showing\", input$x, \"rows\\n\")       })       # The observeEvent() above is equivalent to:       # observe({       #    cat(\"Showing\", input$x, \"rows\\n\")       #   }) %>%       #   bindEvent(input$button)        # Take a reactive dependency on input$button, but       # not on any of the stuff inside the function       df <- eventReactive(input$button, {         head(cars, input$x)       })       output$table <- renderTable({         df()       })     }   )    ## App 2: Using `once`   shinyApp(     ui = basicPage( actionButton(\"go\", \"Go\")),     server = function(input, output, session) {       observeEvent(input$go, {         print(paste(\"This will only be printed once; all\",               \"subsequent button clicks won't do anything\"))       }, once = TRUE)       # The observeEvent() above is equivalent to:       # observe({       #   print(paste(\"This will only be printed once; all\",       #         \"subsequent button clicks won't do anything\"))       #   }) %>%       #   bindEvent(input$go, once = TRUE)     }   )    ## App 3: Using `ignoreInit` and `once`   shinyApp(     ui = basicPage(actionButton(\"go\", \"Go\")),     server = function(input, output, session) {       observeEvent(input$go, {         insertUI(\"#go\", \"afterEnd\",                  actionButton(\"dynamic\", \"click to remove\"))          # set up an observer that depends on the dynamic         # input, so that it doesn't run when the input is         # created, and only runs once after that (since         # the side effect is remove the input from the DOM)         observeEvent(input$dynamic, {           removeUI(\"#dynamic\")         }, ignoreInit = TRUE, once = TRUE)       })     }   ) }"},{"path":"/reference/onBookmark.html","id":null,"dir":"Reference","previous_headings":"","what":"Add callbacks for Shiny session bookmarking events — onBookmark","title":"Add callbacks for Shiny session bookmarking events — onBookmark","text":"functions registering callbacks Shiny session events. called within application's server function. onBookmark registers function called just Shiny bookmarks state. onBookmarked registers function called just Shiny bookmarks state. onRestore registers function called session restored, server function executes, reactives, observers render functions run. onRestored registers function called session restored. similar onRestore, called reactives, observers, render functions run, results sent client browser. onRestored callbacks can useful sending update messages client browser.","code":""},{"path":"/reference/onBookmark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add callbacks for Shiny session bookmarking events — onBookmark","text":"","code":"onBookmark(fun, session = getDefaultReactiveDomain())  onBookmarked(fun, session = getDefaultReactiveDomain())  onRestore(fun, session = getDefaultReactiveDomain())  onRestored(fun, session = getDefaultReactiveDomain())"},{"path":"/reference/onBookmark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add callbacks for Shiny session bookmarking events — onBookmark","text":"fun callback function takes one argument. session shiny session object.","code":""},{"path":"/reference/onBookmark.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add callbacks for Shiny session bookmarking events — onBookmark","text":"functions return function can called arguments cancel registration. callback function passed functions take one argument, typically named \"state\" (onBookmark, onRestore, onRestored) \"url\" (onBookmarked). onBookmark, state object three relevant fields. values field environment can used save arbitrary values (see examples). state saved disk (opposed encoded URL), dir field contains name directory can used store extra files. Finally, state object input field, simply application's input object. can read, modified. onRestore onRestored, state object list. list contains input, named list input values restore, values, environment containing arbitrary values saved onBookmark, dir, name directory state restored , used save extra files. onBookmarked, callback function receives string bookmark URL. callback function used display UI client browser bookmark URL. callback function registered, Shiny default display modal dialog bookmark URL.","code":""},{"path":"/reference/onBookmark.html","id":"modules","dir":"Reference","previous_headings":"","what":"Modules","title":"Add callbacks for Shiny session bookmarking events — onBookmark","text":"callbacks may also used Shiny modules. used way, inputs values automatically namespaced module, callback functions registered module able see module's inputs values.","code":""},{"path":[]},{"path":"/reference/onBookmark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add callbacks for Shiny session bookmarking events — onBookmark","text":"","code":"## Only run these examples in interactive sessions if (interactive()) {  # Basic use of onBookmark and onRestore: This app saves the time in its # arbitrary values, and restores that time when the app is restored. ui <- function(req) {   fluidPage(     textInput(\"txt\", \"Input text\"),     bookmarkButton()   ) } server <- function(input, output) {   onBookmark(function(state) {     savedTime <- as.character(Sys.time())     cat(\"Last saved at\", savedTime, \"\\n\")     # state is a mutable reference object, and we can add arbitrary values to     # it.     state$values$time <- savedTime   })    onRestore(function(state) {     cat(\"Restoring from state bookmarked at\", state$values$time, \"\\n\")   }) } enableBookmarking(\"url\") shinyApp(ui, server)    ui <- function(req) {   fluidPage(     textInput(\"txt\", \"Input text\"),     bookmarkButton()   ) } server <- function(input, output, session) {   lastUpdateTime <- NULL    observeEvent(input$txt, {     updateTextInput(session, \"txt\",       label = paste0(\"Input text (Changed \", as.character(Sys.time()), \")\")     )   })    onBookmark(function(state) {     # Save content to a file     messageFile <- file.path(state$dir, \"message.txt\")     cat(as.character(Sys.time()), file = messageFile)   })    onRestored(function(state) {     # Read the file     messageFile <- file.path(state$dir, \"message.txt\")     timeText <- readChar(messageFile, 1000)      # updateTextInput must be called in onRestored, as opposed to onRestore,     # because onRestored happens after the client browser is ready.     updateTextInput(session, \"txt\",       label = paste0(\"Input text (Changed \", timeText, \")\")     )   }) } # \"server\" bookmarking is needed for writing to disk. enableBookmarking(\"server\") shinyApp(ui, server)   # This app has a module, and both the module and the main app code have # onBookmark and onRestore functions which write and read state$values$hash. The # module's version of state$values$hash does not conflict with the app's version # of state$values$hash. # # A basic module that captializes text. capitalizerUI <- function(id) {   ns <- NS(id)   wellPanel(     h4(\"Text captializer module\"),     textInput(ns(\"text\"), \"Enter text:\"),     verbatimTextOutput(ns(\"out\"))   ) } capitalizerServer <- function(input, output, session) {   output$out <- renderText({     toupper(input$text)   })   onBookmark(function(state) {     state$values$hash <- rlang::hash(input$text)   })   onRestore(function(state) {     if (identical(rlang::hash(input$text), state$values$hash)) {       message(\"Module's input text matches hash \", state$values$hash)     } else {       message(\"Module's input text does not match hash \", state$values$hash)     }   }) } # Main app code ui <- function(request) {   fluidPage(     sidebarLayout(       sidebarPanel(         capitalizerUI(\"tc\"),         textInput(\"text\", \"Enter text (not in module):\"),         bookmarkButton()       ),       mainPanel()     )   ) } server <- function(input, output, session) {   callModule(capitalizerServer, \"tc\")   onBookmark(function(state) {     state$values$hash <- rlang::hash(input$text)   })   onRestore(function(state) {     if (identical(rlang::hash(input$text), state$values$hash)) {       message(\"App's input text matches hash \", state$values$hash)     } else {       message(\"App's input text does not match hash \", state$values$hash)     }   }) } enableBookmarking(store = \"url\") shinyApp(ui, server) }"},{"path":"/reference/onFlush.html","id":null,"dir":"Reference","previous_headings":"","what":"Add callbacks for Shiny session events — onFlush","title":"Add callbacks for Shiny session events — onFlush","text":"functions registering callbacks Shiny session events. onFlush registers function called Shiny flushes reactive system. onFlushed registers function called Shiny flushes reactive system. onUnhandledError registers function called unhandled error occurs session closed. onSessionEnded registers function called client disconnected. functions called within application's server function. functions return function can called arguments cancel registration.","code":""},{"path":"/reference/onFlush.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add callbacks for Shiny session events — onFlush","text":"","code":"onFlush(fun, once = TRUE, session = getDefaultReactiveDomain())  onFlushed(fun, once = TRUE, session = getDefaultReactiveDomain())  onSessionEnded(fun, session = getDefaultReactiveDomain())  onUnhandledError(fun, session = getDefaultReactiveDomain())"},{"path":"/reference/onFlush.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add callbacks for Shiny session events — onFlush","text":"fun callback function. function run , cleared, re-run time event occurs. (onFlush onFlushed.) session shiny session object.","code":""},{"path":"/reference/onFlush.html","id":"unhandled-errors","dir":"Reference","previous_headings":"","what":"Unhandled Errors","title":"Add callbacks for Shiny session events — onFlush","text":"Unhandled errors errors otherwise handled Shiny application logic. words, errors either cause application crash result \"Error\" output UI. can use onUnhandledError() register function called unhandled error occurs. function called error object first argument. error fatal result session closing, error condition shiny.error.fatal class. Note onUnhandledError() callbacks used prevent app closing modify error condition. Instead, intended give opportunity log error perform cleanup operations.","code":""},{"path":[]},{"path":"/reference/onFlush.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add callbacks for Shiny session events — onFlush","text":"","code":"if (FALSE) { # interactive() library(shiny)  ui <- fixedPage(   markdown(c(     \"Set the number to 8 or higher to cause an error\",     \"in the `renderText()` output.\"   )),   sliderInput(\"number\", \"Number\", 0, 10, 4),   textOutput(\"text\"),   hr(),   markdown(c(     \"Click the button below to crash the app with an unhandled error\",     \"in an `observe()` block.\"   )),   actionButton(\"crash\", \"Crash the app!\") )  log_event <- function(level, ...) {   ts <- strftime(Sys.time(), \" [%F %T] \")   message(level, ts, ...) }  server <- function(input, output, session) {   log_event(\"INFO\", \"Session started\")    onUnhandledError(function(err) {     # log the unhandled error     level <- if (inherits(err, \"shiny.error.fatal\")) \"FATAL\" else \"ERROR\"     log_event(level, conditionMessage(err))   })    onStop(function() {     log_event(\"INFO\", \"Session ended\")   })    observeEvent(input$crash, stop(\"Oops, an unhandled error happened!\"))    output$text <- renderText({     if (input$number > 7) {       stop(\"that's too high!\")     }     sprintf(\"You picked number %d.\", input$number)   }) }  shinyApp(ui, server) }"},{"path":"/reference/onStop.html","id":null,"dir":"Reference","previous_headings":"","what":"Run code after an application or session ends — onStop","title":"Run code after an application or session ends — onStop","text":"function registers callback functions invoked application exits (runApp() exits), user session ends (client disconnects).","code":""},{"path":"/reference/onStop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run code after an application or session ends — onStop","text":"","code":"onStop(fun, session = getDefaultReactiveDomain())"},{"path":"/reference/onStop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run code after an application or session ends — onStop","text":"fun function called app finished running. session scope callback run. onStop called within server function, default current session, callback invoked current session ends. onStop called outside server function, callback invoked application exits. NULL, calling onStop outside server function, callback invoked application exits.","code":""},{"path":"/reference/onStop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run code after an application or session ends — onStop","text":"function , invoked, cancel callback.","code":""},{"path":[]},{"path":"/reference/onStop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run code after an application or session ends — onStop","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   # Open this application in multiple browsers, then close the browsers.   shinyApp(     ui = basicPage(\"onStop demo\"),      server = function(input, output, session) {       onStop(function() cat(\"Session stopped\\n\"))     },      onStart = function() {       cat(\"Doing application setup\\n\")        onStop(function() {         cat(\"Doing application cleanup\\n\")       })     }   ) } # In the example above, onStop() is called inside of onStart(). This is # the pattern that should be used when creating a shinyApp() object from # a function, or at the console. If instead you are writing an app.R which # will be invoked with runApp(), you can do it that way, or put the onStop() # before the shinyApp() call, as shown below.  if (FALSE) { # ==== app.R ==== cat(\"Doing application setup\\n\") onStop(function() {   cat(\"Doing application cleanup\\n\") })  shinyApp(   ui = basicPage(\"onStop demo\"),    server = function(input, output, session) {     onStop(function() cat(\"Session stopped\\n\"))   } ) # ==== end app.R ====   # Similarly, if you have a global.R, you can call onStop() from there. # ==== global.R ==== cat(\"Doing application setup\\n\") onStop(function() {   cat(\"Doing application cleanup\\n\") }) # ==== end global.R ==== }"},{"path":"/reference/outputOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Set options for an output object. — outputOptions","title":"Set options for an output object. — outputOptions","text":"available options output object: suspendWhenHidden. TRUE (default), output object suspended (execute) hidden web page. FALSE, output object suspend hidden, already hidden suspended, resume immediately. priority. priority level output object. Queued outputs higher priority values execute lower values.","code":""},{"path":"/reference/outputOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set options for an output object. — outputOptions","text":"","code":"outputOptions(x, name, ...)"},{"path":"/reference/outputOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set options for an output object. — outputOptions","text":"x shinyoutput object (typically output). name name output observer shinyoutput object. ... Options set output observer.","code":""},{"path":"/reference/outputOptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set options for an output object. — outputOptions","text":"","code":"if (FALSE) { # Get the list of options for all observers within output outputOptions(output)  # Disable suspend for output$myplot outputOptions(output, \"myplot\", suspendWhenHidden = FALSE)  # Change priority for output$myplot outputOptions(output, \"myplot\", priority = 10)  # Get the list of options for output$myplot outputOptions(output, \"myplot\") }"},{"path":"/reference/pageWithSidebar.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a page with a sidebar — pageWithSidebar","title":"Create a page with a sidebar — pageWithSidebar","text":"DEPRECATED: use fluidPage() sidebarLayout() instead.","code":""},{"path":"/reference/pageWithSidebar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a page with a sidebar — pageWithSidebar","text":"","code":"pageWithSidebar(headerPanel, sidebarPanel, mainPanel)"},{"path":"/reference/pageWithSidebar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a page with a sidebar — pageWithSidebar","text":"headerPanel headerPanel application title sidebarPanel sidebarPanel containing input controls mainPanel mainPanel containing outputs","code":""},{"path":"/reference/pageWithSidebar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a page with a sidebar — pageWithSidebar","text":"UI definition can passed shinyUI function","code":""},{"path":"/reference/parseQueryString.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a GET query string from a URL — parseQueryString","title":"Parse a GET query string from a URL — parseQueryString","text":"Returns named list key-value pairs.","code":""},{"path":"/reference/parseQueryString.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a GET query string from a URL — parseQueryString","text":"","code":"parseQueryString(str, nested = FALSE)"},{"path":"/reference/parseQueryString.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a GET query string from a URL — parseQueryString","text":"str query string. can leading \"?\" . nested Whether parse query string nested list contains pairs square brackets []. example, query [i1][j1]=x&b[i1][j1]=y&b[i2][j1]=z parsed list(= list(i1 = list(j1 = 'x')), b = list(i1 = list(j1 = 'y'), i2 = list(j1 = 'z'))) nested = TRUE, list(`[i1][j1]` = 'x', `b[i1][j1]` = 'y', `b[i2][j1]` = 'z') nested = FALSE.","code":""},{"path":"/reference/parseQueryString.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a GET query string from a URL — parseQueryString","text":"","code":"parseQueryString(\"?foo=1&bar=b%20a%20r\") #> $foo #> [1] \"1\" #>  #> $bar #> [1] \"b a r\" #>   if (FALSE) { # Example of usage within a Shiny app function(input, output, session) {    output$queryText <- renderText({     query <- parseQueryString(session$clientData$url_search)      # Ways of accessing the values     if (as.numeric(query$foo) == 1) {       # Do something     }     if (query[[\"bar\"]] == \"targetstring\") {       # Do something else     }      # Return a string with key-value pairs     paste(names(query), query, sep = \"=\", collapse=\", \")   }) } }"},{"path":"/reference/passwordInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a password input control — passwordInput","title":"Create a password input control — passwordInput","text":"Create password control entry passwords.","code":""},{"path":"/reference/passwordInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a password input control — passwordInput","text":"","code":"passwordInput(inputId, label, value = \"\", width = NULL, placeholder = NULL)"},{"path":"/reference/passwordInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a password input control — passwordInput","text":"inputId input slot used access value. label Display label control, NULL label. value Initial value. width width input, e.g. '400px', '100%'; see validateCssUnit(). placeholder character string giving user hint can entered control. Internet Explorer 8 9 support option.","code":""},{"path":"/reference/passwordInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a password input control — passwordInput","text":"text input control can added UI definition.","code":""},{"path":"/reference/passwordInput.html","id":"server-value","dir":"Reference","previous_headings":"","what":"Server value","title":"Create a password input control — passwordInput","text":"character string password input. default value \"\" unless value provided.","code":""},{"path":[]},{"path":"/reference/passwordInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a password input control — passwordInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   passwordInput(\"password\", \"Password:\"),   actionButton(\"go\", \"Go\"),   verbatimTextOutput(\"value\") ) server <- function(input, output) {   output$value <- renderText({     req(input$go)     isolate(input$password)   }) } shinyApp(ui, server) }"},{"path":"/reference/plotOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an plot or image output element — plotOutput","title":"Create an plot or image output element — plotOutput","text":"Render renderPlot() renderImage() within application page.","code":""},{"path":"/reference/plotOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an plot or image output element — plotOutput","text":"","code":"imageOutput(   outputId,   width = \"100%\",   height = \"400px\",   click = NULL,   dblclick = NULL,   hover = NULL,   brush = NULL,   inline = FALSE,   fill = FALSE )  plotOutput(   outputId,   width = \"100%\",   height = \"400px\",   click = NULL,   dblclick = NULL,   hover = NULL,   brush = NULL,   inline = FALSE,   fill = !inline )"},{"path":"/reference/plotOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an plot or image output element — plotOutput","text":"outputId output variable read plot/image . width, height Image width/height. Must valid CSS unit (like \"100%\", \"400px\", \"auto\") number, coerced string \"px\" appended. two arguments ignored inline = TRUE, case width/height plot must specified renderPlot(). Note , height, using \"auto\" \"100%\" generally work expected, height computed HTML/CSS. click can NULL (default), string, object created clickOpts() function. use value like \"plot_click\" (equivalently, clickOpts(id=\"plot_click\")), plot send coordinates server whenever clicked, value accessible via input$plot_click. value named list  x y elements indicating mouse position. dblclick just like click argument, double-click events. hover Similar click argument, can NULL (default), string, object created hoverOpts() function. use value like \"plot_hover\" (equivalently, hoverOpts(id=\"plot_hover\")), plot send coordinates server pauses plot, value accessible via input$plot_hover. value named list x y elements indicating mouse position. control hover time hover delay type, must use hoverOpts(). brush Similar click argument, can NULL (default), string, object created brushOpts() function. use value like \"plot_brush\" (equivalently, brushOpts(id=\"plot_brush\")), plot allow user \"brush\" plotting area, send information brushed area server, value accessible via input$plot_brush. Brushing means user able draw rectangle plotting area drag around. value named list xmin, xmax, ymin, ymax elements indicating brush area. control brush behavior, use brushOpts(). Multiple imageOutput/plotOutput calls may share id value; brushing one image plot cause brushes id disappear. inline use inline (span()) block container (div()) output fill Whether returned tag treated fill item, meaning height allowed grow/shrink fit fill container opinionated height (see htmltools::bindFillRole()) opinionated height. Examples fill containers include bslib::card() bslib::card_body_fill().","code":""},{"path":"/reference/plotOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an plot or image output element — plotOutput","text":"plot image output element can included panel.","code":""},{"path":"/reference/plotOutput.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create an plot or image output element — plotOutput","text":"arguments clickId hoverId work R base graphics (see graphics package). work grid-based graphics, ggplot2, lattice, .","code":""},{"path":"/reference/plotOutput.html","id":"interactive-plots","dir":"Reference","previous_headings":"","what":"Interactive plots","title":"Create an plot or image output element — plotOutput","text":"Plots images Shiny support mouse-based interaction, via clicking, double-clicking, hovering, brushing. interaction events occur, mouse coordinates sent server input$ variables, specified click, dblclick, hover, brush. plotOutput, coordinates sent scaled data space, possible. (moment, plots generated base graphics ggplot2 support scaling, although plots generated lattice others .) scaling possible, raw pixel coordinates sent. imageOutput, coordinates sent raw pixel coordinates. ggplot2 graphics, code renderPlot return ggplot object; instead code prints ggplot2 object something like print(p), coordinates interactive graphics properly scaled data space.","code":""},{"path":[]},{"path":"/reference/plotOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an plot or image output element — plotOutput","text":"","code":"# Only run these examples in interactive R sessions if (interactive()) {  # A basic shiny app with a plotOutput shinyApp(   ui = fluidPage(     sidebarLayout(       sidebarPanel(         actionButton(\"newplot\", \"New plot\")       ),       mainPanel(         plotOutput(\"plot\")       )     )   ),   server = function(input, output) {     output$plot <- renderPlot({       input$newplot       # Add a little noise to the cars data       cars2 <- cars + rnorm(nrow(cars))       plot(cars2)     })   } )   # A demonstration of clicking, hovering, and brushing shinyApp(   ui = basicPage(     fluidRow(       column(width = 4,         plotOutput(\"plot\", height=300,           click = \"plot_click\",  # Equiv, to click=clickOpts(id=\"plot_click\")           hover = hoverOpts(id = \"plot_hover\", delayType = \"throttle\"),           brush = brushOpts(id = \"plot_brush\")         ),         h4(\"Clicked points\"),         tableOutput(\"plot_clickedpoints\"),         h4(\"Brushed points\"),         tableOutput(\"plot_brushedpoints\")       ),       column(width = 4,         verbatimTextOutput(\"plot_clickinfo\"),         verbatimTextOutput(\"plot_hoverinfo\")       ),       column(width = 4,         wellPanel(actionButton(\"newplot\", \"New plot\")),         verbatimTextOutput(\"plot_brushinfo\")       )     )   ),   server = function(input, output, session) {     data <- reactive({       input$newplot       # Add a little noise to the cars data so the points move       cars + rnorm(nrow(cars))     })     output$plot <- renderPlot({       d <- data()       plot(d$speed, d$dist)     })     output$plot_clickinfo <- renderPrint({       cat(\"Click:\\n\")       str(input$plot_click)     })     output$plot_hoverinfo <- renderPrint({       cat(\"Hover (throttled):\\n\")       str(input$plot_hover)     })     output$plot_brushinfo <- renderPrint({       cat(\"Brush (debounced):\\n\")       str(input$plot_brush)     })     output$plot_clickedpoints <- renderTable({       # For base graphics, we need to specify columns, though for ggplot2,       # it's usually not necessary.       res <- nearPoints(data(), input$plot_click, \"speed\", \"dist\")       if (nrow(res) == 0)         return()       res     })     output$plot_brushedpoints <- renderTable({       res <- brushedPoints(data(), input$plot_brush, \"speed\", \"dist\")       if (nrow(res) == 0)         return()       res     })   } )   # Demo of clicking, hovering, brushing with imageOutput # Note that coordinates are in pixels shinyApp(   ui = basicPage(     fluidRow(       column(width = 4,         imageOutput(\"image\", height=300,           click = \"image_click\",           hover = hoverOpts(             id = \"image_hover\",             delay = 500,             delayType = \"throttle\"           ),           brush = brushOpts(id = \"image_brush\")         )       ),       column(width = 4,         verbatimTextOutput(\"image_clickinfo\"),         verbatimTextOutput(\"image_hoverinfo\")       ),       column(width = 4,         wellPanel(actionButton(\"newimage\", \"New image\")),         verbatimTextOutput(\"image_brushinfo\")       )     )   ),   server = function(input, output, session) {     output$image <- renderImage({       input$newimage        # Get width and height of image output       width  <- session$clientData$output_image_width       height <- session$clientData$output_image_height        # Write to a temporary PNG file       outfile <- tempfile(fileext = \".png\")        png(outfile, width=width, height=height)       plot(rnorm(200), rnorm(200))       dev.off()        # Return a list containing information about the image       list(         src = outfile,         contentType = \"image/png\",         width = width,         height = height,         alt = \"This is alternate text\"       )     })     output$image_clickinfo <- renderPrint({       cat(\"Click:\\n\")       str(input$image_click)     })     output$image_hoverinfo <- renderPrint({       cat(\"Hover (throttled):\\n\")       str(input$image_hover)     })     output$image_brushinfo <- renderPrint({       cat(\"Brush (debounced):\\n\")       str(input$image_brush)     })   } )  }"},{"path":"/reference/plotPNG.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture a plot as a PNG file. — plotPNG","title":"Capture a plot as a PNG file. — plotPNG","text":"PNG graphics device used determined following order: ragg package installed (shiny.useragg set FALSE), use ragg::agg_png(). quartz device available (.e., capabilities(\"aqua\") TRUE), use png(type = \"quartz\"). Cairo package installed (shiny.usecairo option set FALSE), use Cairo::CairoPNG(). Otherwise, use grDevices::png(). case, Linux Windows may antialias point shapes, resulting poor quality output.","code":""},{"path":"/reference/plotPNG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture a plot as a PNG file. — plotPNG","text":"","code":"plotPNG(   func,   filename = tempfile(fileext = \".png\"),   width = 400,   height = 400,   res = 72,   ... )"},{"path":"/reference/plotPNG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture a plot as a PNG file. — plotPNG","text":"func function generates plot. filename name output file. Defaults temp file extension .png. width Width pixels. height Height pixels. res Resolution pixels per inch. value passed graphics device. Note affects resolution PNG rendering R; change actual ppi browser. ... Arguments passed graphics device. can used set width, height, background color, etc.","code":""},{"path":"/reference/plotPNG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capture a plot as a PNG file. — plotPNG","text":"path newly generated PNG file.","code":""},{"path":"/reference/plotPNG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Capture a plot as a PNG file. — plotPNG","text":"NULL value provided width height ignored (.e., default width height graphics device used).","code":""},{"path":"/reference/Progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Reporting progress (object-oriented API) — Progress","title":"Reporting progress (object-oriented API) — Progress","text":"Reporting progress (object-oriented API) Reporting progress (object-oriented API)","code":""},{"path":"/reference/Progress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reporting progress (object-oriented API) — Progress","text":"Reports progress user long-running operations. package exposes two distinct programming APIs working progress. withProgress() setProgress() together provide simple function-based interface, Progress reference class provides object-oriented API. Instantiating Progress object causes progress panel created, displayed first time set method called. Calling close cause progress panel removed. version 0.14, progress indicators use Shiny's new notification API. want use old styling (example, may used customized CSS), can use style=\"old\" time call Progress$new(). want set style time Progress$new called, can instead call shinyOptions(progress.style=\"old\") just , inside server function.","code":""},{"path":[]},{"path":[]},{"path":"/reference/Progress.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Reporting progress (object-oriented API) — Progress","text":"Progress$new() Progress$set() Progress$inc() Progress$getMin() Progress$getMax() Progress$getValue() Progress$close() Progress$clone()","code":""},{"path":"/reference/Progress.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Reporting progress (object-oriented API) — Progress","text":"Creates new progress panel (display ).","code":""},{"path":"/reference/Progress.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"Progress$new(   session = getDefaultReactiveDomain(),   min = 0,   max = 1,   style = getShinyOption(\"progress.style\", default = \"notification\") )"},{"path":"/reference/Progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reporting progress (object-oriented API) — Progress","text":"session Shiny session object, provided shinyServer server function. min value represents starting point progress bar. Must less max. max value represents end progress bar. Must greater min. style Progress display style. \"notification\" (default), progress indicator show using Shiny's notification API. \"old\", use HTML CSS used Shiny 0.13.2 (backward-compatibility).","code":""},{"path":"/reference/Progress.html","id":"method-set-","dir":"Reference","previous_headings":"","what":"Method set()","title":"Reporting progress (object-oriented API) — Progress","text":"Updates progress panel. called first time, progress panel displayed.","code":""},{"path":"/reference/Progress.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"Progress$set(value = NULL, message = NULL, detail = NULL)"},{"path":"/reference/Progress.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reporting progress (object-oriented API) — Progress","text":"value Single-element numeric vector; value set progress bar, relative min max. NULL hides progress bar, currently visible. message single-element character vector; message displayed user, NULL hide current message (). detail single-element character vector; detail message displayed user, NULL hide current detail message (). detail message shown de-emphasized appearance relative message.","code":""},{"path":"/reference/Progress.html","id":"method-inc-","dir":"Reference","previous_headings":"","what":"Method inc()","title":"Reporting progress (object-oriented API) — Progress","text":"Like set, updates progress panel. difference inc increases progress bar amount, instead setting specific value.","code":""},{"path":"/reference/Progress.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"Progress$inc(amount = 0.1, message = NULL, detail = NULL)"},{"path":"/reference/Progress.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reporting progress (object-oriented API) — Progress","text":"amount inc() method, numeric value increment progress bar. message single-element character vector; message displayed user, NULL hide current message (). detail single-element character vector; detail message displayed user, NULL hide current detail message (). detail message shown de-emphasized appearance relative message.","code":""},{"path":"/reference/Progress.html","id":"method-getmin-","dir":"Reference","previous_headings":"","what":"Method getMin()","title":"Reporting progress (object-oriented API) — Progress","text":"Returns minimum value.","code":""},{"path":"/reference/Progress.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"Progress$getMin()"},{"path":"/reference/Progress.html","id":"method-getmax-","dir":"Reference","previous_headings":"","what":"Method getMax()","title":"Reporting progress (object-oriented API) — Progress","text":"Returns maximum value.","code":""},{"path":"/reference/Progress.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"Progress$getMax()"},{"path":"/reference/Progress.html","id":"method-getvalue-","dir":"Reference","previous_headings":"","what":"Method getValue()","title":"Reporting progress (object-oriented API) — Progress","text":"Returns current value.","code":""},{"path":"/reference/Progress.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"Progress$getValue()"},{"path":"/reference/Progress.html","id":"method-close-","dir":"Reference","previous_headings":"","what":"Method close()","title":"Reporting progress (object-oriented API) — Progress","text":"Removes progress panel. Future calls set close ignored.","code":""},{"path":"/reference/Progress.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"Progress$close()"},{"path":"/reference/Progress.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Reporting progress (object-oriented API) — Progress","text":"objects class cloneable method.","code":""},{"path":"/reference/Progress.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"Progress$clone(deep = FALSE)"},{"path":"/reference/Progress.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reporting progress (object-oriented API) — Progress","text":"deep Whether make deep clone.","code":""},{"path":"/reference/Progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   plotOutput(\"plot\") )  server <- function(input, output, session) {   output$plot <- renderPlot({     progress <- Progress$new(session, min=1, max=15)     on.exit(progress$close())      progress$set(message = 'Calculation in progress',                  detail = 'This may take a while...')      for (i in 1:15) {       progress$set(value = i)       Sys.sleep(0.5)     }     plot(cars)   }) }  shinyApp(ui, server) }"},{"path":"/reference/radioButtons.html","id":null,"dir":"Reference","previous_headings":"","what":"Create radio buttons — radioButtons","title":"Create radio buttons — radioButtons","text":"Create set radio buttons used select item list.","code":""},{"path":"/reference/radioButtons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create radio buttons — radioButtons","text":"","code":"radioButtons(   inputId,   label,   choices = NULL,   selected = NULL,   inline = FALSE,   width = NULL,   choiceNames = NULL,   choiceValues = NULL )"},{"path":"/reference/radioButtons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create radio buttons — radioButtons","text":"inputId input slot used access value. label Display label control, NULL label. choices List values select (elements list named name rather value displayed user). argument provided, choiceNames choiceValues must provided, vice-versa. values strings; types (logicals numbers) coerced strings. selected initially selected value. specified, defaults first item choices. start items selected, use character(0). inline TRUE, render choices inline (.e. horizontally) width width input, e.g. '400px', '100%'; see validateCssUnit(). choiceNames, choiceValues List names values, respectively, displayed user app correspond choice (reason, choiceNames choiceValues must length). either arguments provided, must provided choices must provided. advantage using named list choices choiceNames allows type UI object passed (tag objects, icons, HTML code, ...), instead just simple text. See Examples.","code":""},{"path":"/reference/radioButtons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create radio buttons — radioButtons","text":"set radio buttons can added UI definition.","code":""},{"path":"/reference/radioButtons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create radio buttons — radioButtons","text":"need represent \"None selected\" state, possible default radio buttons options selected using selected = character(0). However, recommended, gives user way return state made selection. Instead, consider first choices c(\"None selected\" = \"\").","code":""},{"path":"/reference/radioButtons.html","id":"server-value","dir":"Reference","previous_headings":"","what":"Server value","title":"Create radio buttons — radioButtons","text":"character string containing value selected button.","code":""},{"path":[]},{"path":"/reference/radioButtons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create radio buttons — radioButtons","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   radioButtons(\"dist\", \"Distribution type:\",                c(\"Normal\" = \"norm\",                  \"Uniform\" = \"unif\",                  \"Log-normal\" = \"lnorm\",                  \"Exponential\" = \"exp\")),   plotOutput(\"distPlot\") )  server <- function(input, output) {   output$distPlot <- renderPlot({     dist <- switch(input$dist,                    norm = rnorm,                    unif = runif,                    lnorm = rlnorm,                    exp = rexp,                    rnorm)      hist(dist(500))   }) }  shinyApp(ui, server)  ui <- fluidPage(   radioButtons(\"rb\", \"Choose one:\",                choiceNames = list(                  icon(\"calendar\"),                  HTML(\"<p style='color:red;'>Red Text<\/p>\"),                  \"Normal text\"                ),                choiceValues = list(                  \"icon\", \"html\", \"text\"                )),   textOutput(\"txt\") )  server <- function(input, output) {   output$txt <- renderText({     paste(\"You chose\", input$rb)   }) }  shinyApp(ui, server) }"},{"path":"/reference/reactive.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a reactive expression — reactive","title":"Create a reactive expression — reactive","text":"Wraps normal expression create reactive expression. Conceptually, reactive expression expression whose result change time.","code":""},{"path":"/reference/reactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a reactive expression — reactive","text":"","code":"reactive(   x,   env = parent.frame(),   quoted = FALSE,   ...,   label = NULL,   domain = getDefaultReactiveDomain(),   ..stacktraceon = TRUE )  is.reactive(x)"},{"path":"/reference/reactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a reactive expression — reactive","text":"x .reactive(), object test. reactive(), expression. passing quo()sure reactive(), remember use rlang::inject() distinguish passing content quosure, expression quosure. env parent environment reactive expression. default, calling environment, defining ordinary non-reactive expression. x quosure quoted TRUE, env ignored. quoted TRUE, quote()ed value x used x evaluated. x quosure like use expression value x, must set quoted TRUE. ... used. label label reactive expression, useful debugging. domain See domains. ..stacktraceon Advanced use . stack manipulation purposes; see stacktrace().","code":""},{"path":"/reference/reactive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a reactive expression — reactive","text":"function, wrapped S3 class \"reactive\"","code":""},{"path":"/reference/reactive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a reactive expression — reactive","text":"Reactive expressions expressions can read reactive values call reactive expressions. Whenever reactive value changes, reactive expressions depended marked \"invalidated\" automatically re-execute necessary. reactive expression marked invalidated, reactive expressions recently called also marked invalidated. way, invalidations ripple expressions depend . See Shiny tutorial information reactive expressions.","code":""},{"path":"/reference/reactive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a reactive expression — reactive","text":"","code":"library(rlang) values <- reactiveValues(A=1)  reactiveB <- reactive({   values$A + 1 }) # View the values from the R console with isolate() isolate(reactiveB()) #> [1] 2 # 2  # To store expressions for later conversion to reactive, use quote() myquo <- rlang::quo(values$A + 2) # Unexpected value! Sending a quosure directly will not work as expected. reactiveC <- reactive(myquo) # We'd hope for `3`, but instead we get the quosure that was supplied. isolate(reactiveC()) #> <quosure> #> expr: ^values$A + 2 #> env:  0x00000193a5fe26c8  # Instead, the quosure should be `rlang::inject()`ed reactiveD <- rlang::inject(reactive(!!myquo)) isolate(reactiveD()) #> [1] 3 # 3  # (Legacy) Can use quoted expressions expr <- quote({ values$A + 3 }) reactiveE <- reactive(expr, quoted = TRUE) isolate(reactiveE()) #> [1] 4 # 4"},{"path":"/reference/reactiveConsole.html","id":null,"dir":"Reference","previous_headings":"","what":"Activate reactivity in the console — reactiveConsole","title":"Activate reactivity in the console — reactiveConsole","text":"experimental feature allows enable reactivity console, purposes experimentation learning.","code":""},{"path":"/reference/reactiveConsole.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Activate reactivity in the console — reactiveConsole","text":"","code":"reactiveConsole(enabled)"},{"path":"/reference/reactiveConsole.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activate reactivity in the console — reactiveConsole","text":"enabled Turn console reactivity ?","code":""},{"path":"/reference/reactiveConsole.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Activate reactivity in the console — reactiveConsole","text":"","code":"reactiveConsole(TRUE) x <- reactiveVal(10) y <- observe({   message(\"The value of x is \", x()) }) x(20) x(30) reactiveConsole(FALSE)"},{"path":"/reference/reactiveFileReader.html","id":null,"dir":"Reference","previous_headings":"","what":"Reactive file reader — reactiveFileReader","title":"Reactive file reader — reactiveFileReader","text":"Given file path read function, returns reactive data source contents file.","code":""},{"path":"/reference/reactiveFileReader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reactive file reader — reactiveFileReader","text":"","code":"reactiveFileReader(intervalMillis, session, filePath, readFunc, ...)"},{"path":"/reference/reactiveFileReader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reactive file reader — reactiveFileReader","text":"intervalMillis Approximate number milliseconds wait checks file's last modified time. can numeric value, function returns numeric value. session user session associate file reader , NULL none. non-null, reader automatically stop session ends. filePath file path poll pass readFunc. can either single-element character vector, function returns one. readFunc function use read file; must expect first argument file path read. return value function used value reactive file reader. ... additional arguments pass readFunc whenever invoked.","code":""},{"path":"/reference/reactiveFileReader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reactive file reader — reactiveFileReader","text":"reactive expression returns contents file, automatically invalidates file changes disk (determined last modified time).","code":""},{"path":"/reference/reactiveFileReader.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reactive file reader — reactiveFileReader","text":"reactiveFileReader works periodically checking file's last modified time; changed, file re-read reactive dependents invalidated. intervalMillis, filePath, readFunc functions executed reactive context; therefore, may read reactive values reactive expressions.","code":""},{"path":[]},{"path":"/reference/reactiveFileReader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reactive file reader — reactiveFileReader","text":"","code":"if (FALSE) { # Per-session reactive file reader function(input, output, session) {   fileData <- reactiveFileReader(1000, session, 'data.csv', read.csv)    output$data <- renderTable({     fileData()   }) }  # Cross-session reactive file reader. In this example, all sessions share # the same reader, so read.csv only gets executed once no matter how many # user sessions are connected. fileData <- reactiveFileReader(1000, NULL, 'data.csv', read.csv) function(input, output, session) {   output$data <- renderTable({     fileData()   }) } }"},{"path":"/reference/reactivePoll.html","id":null,"dir":"Reference","previous_headings":"","what":"Reactive polling — reactivePoll","title":"Reactive polling — reactivePoll","text":"Used create reactive data source, works periodically polling non-reactive data source.","code":""},{"path":"/reference/reactivePoll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reactive polling — reactivePoll","text":"","code":"reactivePoll(intervalMillis, session, checkFunc, valueFunc)"},{"path":"/reference/reactivePoll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reactive polling — reactivePoll","text":"intervalMillis Approximate number milliseconds wait calls checkFunc. can either numeric value, function returns numeric value. session user session associate file reader , NULL none. non-null, reader automatically stop session ends. checkFunc relatively cheap function whose values time tested equality; inequality indicates underlying value changed needs invalidated re-read using valueFunc. See Details. valueFunc function calculates underlying value. See Details.","code":""},{"path":"/reference/reactivePoll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reactive polling — reactivePoll","text":"reactive expression returns result valueFunc, invalidates checkFunc changes.","code":""},{"path":"/reference/reactivePoll.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reactive polling — reactivePoll","text":"reactivePoll works pairing relatively cheap \"check\" function expensive value retrieval function. check function executed periodically always return consistent value data changes. check function returns different value, value retrieval function used re-populate data. Note check function return TRUE FALSE indicate whether underlying data changed. Rather, check function indicates change returning different value previous time called. example, reactivePoll used implement reactiveFileReader pairing check function simply returns last modified timestamp file, value retrieval function actually reads contents file. another example, one might read relational database table reactively using check function SELECT MAX(timestamp) table value retrieval function SELECT * table. intervalMillis, checkFunc, valueFunc functions executed reactive context; therefore, may read reactive values reactive expressions.","code":""},{"path":[]},{"path":"/reference/reactivePoll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reactive polling — reactivePoll","text":"","code":"function(input, output, session) {    data <- reactivePoll(1000, session,     # This function returns the time that log_file was last modified     checkFunc = function() {       if (file.exists(log_file))         file.info(log_file)$mtime[1]       else         \"\"     },     # This function returns the content of log_file     valueFunc = function() {       read.csv(log_file)     }   )    output$dataTable <- renderTable({     data()   }) } #> function(input, output, session) { #>  #>   data <- reactivePoll(1000, session, #>     # This function returns the time that log_file was last modified #>     checkFunc = function() { #>       if (file.exists(log_file)) #>         file.info(log_file)$mtime[1] #>       else #>         \"\" #>     }, #>     # This function returns the content of log_file #>     valueFunc = function() { #>       read.csv(log_file) #>     } #>   ) #>  #>   output$dataTable <- renderTable({ #>     data() #>   }) #> } #> <environment: 0x000001939fb1cb88>"},{"path":"/reference/reactiveTimer.html","id":null,"dir":"Reference","previous_headings":"","what":"Timer — reactiveTimer","title":"Timer — reactiveTimer","text":"Creates reactive timer given interval. reactive timer like reactive value, except reactive values triggered set, reactive timers triggered simply passage time.","code":""},{"path":"/reference/reactiveTimer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Timer — reactiveTimer","text":"","code":"reactiveTimer(intervalMs = 1000, session = getDefaultReactiveDomain())"},{"path":"/reference/reactiveTimer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Timer — reactiveTimer","text":"intervalMs often fire, milliseconds session session object. needed cancel scheduled invalidations user ended session. NULL, invalidation tied session, still occur.","code":""},{"path":"/reference/reactiveTimer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Timer — reactiveTimer","text":"-parameter function can called reactive context, order cause context invalidated next time timer interval elapses. Calling returned function also happens yield current time (base::Sys.time()).","code":""},{"path":"/reference/reactiveTimer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Timer — reactiveTimer","text":"Reactive expressions observers want invalidated timer need call timer function reactiveTimer returns, even current time value actually needed. See invalidateLater() safer simpler alternative.","code":""},{"path":[]},{"path":"/reference/reactiveTimer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Timer — reactiveTimer","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   sliderInput(\"n\", \"Number of observations\", 2, 1000, 500),   plotOutput(\"plot\") )  server <- function(input, output) {    # Anything that calls autoInvalidate will automatically invalidate   # every 2 seconds.   autoInvalidate <- reactiveTimer(2000)    observe({     # Invalidate and re-execute this reactive expression every time the     # timer fires.     autoInvalidate()      # Do something each time this is invalidated.     # The isolate() makes this observer _not_ get invalidated and re-executed     # when input$n changes.     print(paste(\"The value of input$n is\", isolate(input$n)))   })    # Generate a new histogram each time the timer fires, but not when   # input$n changes.   output$plot <- renderPlot({     autoInvalidate()     hist(rnorm(isolate(input$n)))   }) }  shinyApp(ui, server) }"},{"path":"/reference/reactiveVal.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a (single) reactive value — reactiveVal","title":"Create a (single) reactive value — reactiveVal","text":"reactiveVal function used construct \"reactive value\" object. object used reading writing value, like variable, special capabilities reactive programming. read value reactiveVal object, calling reactive expression takes dependency, change value, notifies reactives previously depended value.","code":""},{"path":"/reference/reactiveVal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a (single) reactive value — reactiveVal","text":"","code":"reactiveVal(value = NULL, label = NULL)"},{"path":"/reference/reactiveVal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a (single) reactive value — reactiveVal","text":"value optional initial value. label optional label, debugging purposes (see reactlog()). missing, label automatically created.","code":""},{"path":"/reference/reactiveVal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a (single) reactive value — reactiveVal","text":"function. Call function arguments (reactively) read value; call function single argument set value.","code":""},{"path":"/reference/reactiveVal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a (single) reactive value — reactiveVal","text":"reactiveVal similar reactiveValues(), except former single reactive value (like variable), whereas latter lets conveniently use multiple reactive values name (like named list variables). one-reactive value, natural use reactiveVal. See Examples section illustration.","code":""},{"path":"/reference/reactiveVal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a (single) reactive value — reactiveVal","text":"","code":"if (FALSE) {  # Create the object by calling reactiveVal r <- reactiveVal()  # Set the value by calling with an argument r(10)  # Read the value by calling without arguments r()  }  ## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   actionButton(\"minus\", \"-1\"),   actionButton(\"plus\", \"+1\"),   br(),   textOutput(\"value\") )  # The comments below show the equivalent logic using reactiveValues() server <- function(input, output, session) {   value <- reactiveVal(0)       # rv <- reactiveValues(value = 0)    observeEvent(input$minus, {     newValue <- value() - 1     # newValue <- rv$value - 1     value(newValue)             # rv$value <- newValue   })    observeEvent(input$plus, {     newValue <- value() + 1     # newValue <- rv$value + 1     value(newValue)             # rv$value <- newValue   })    output$value <- renderText({     value()                     # rv$value   }) }  shinyApp(ui, server)  }"},{"path":"/reference/reactiveValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an object for storing reactive values — reactiveValues","title":"Create an object for storing reactive values — reactiveValues","text":"function returns object storing reactive values. similar list, special capabilities reactive programming. read value , calling reactive expression takes reactive dependency value, write , notifies reactive functions depend value. Note values taken reactiveValues object reactive, reactiveValues object .","code":""},{"path":"/reference/reactiveValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an object for storing reactive values — reactiveValues","text":"","code":"reactiveValues(...)"},{"path":"/reference/reactiveValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an object for storing reactive values — reactiveValues","text":"... Objects added reactivevalues object. objects must named.","code":""},{"path":[]},{"path":"/reference/reactiveValues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an object for storing reactive values — reactiveValues","text":"","code":"# Create the object with no values values <- reactiveValues()  # Assign values to 'a' and 'b' values$a <- 3 values[['b']] <- 4  if (FALSE) { # From within a reactive context, you can access values with: values$a values[['a']] }  # If not in a reactive context (e.g., at the console), you can use isolate() # to retrieve the value: isolate(values$a) #> [1] 3 isolate(values[['a']]) #> [1] 3  # Set values upon creation values <- reactiveValues(a = 1, b = 2) isolate(values$a) #> [1] 1"},{"path":"/reference/reactiveValuesToList.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a reactivevalues object to a list — reactiveValuesToList","title":"Convert a reactivevalues object to a list — reactiveValuesToList","text":"function something similar might want expect base::.list() . difference calling context take dependencies every object reactivevalues object. avoid taking dependencies objects, can wrap call isolate().","code":""},{"path":"/reference/reactiveValuesToList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a reactivevalues object to a list — reactiveValuesToList","text":"","code":"reactiveValuesToList(x, all.names = FALSE)"},{"path":"/reference/reactiveValuesToList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a reactivevalues object to a list — reactiveValuesToList","text":"x reactivevalues object. .names TRUE, include objects leading dot. FALSE (default) include objects.","code":""},{"path":"/reference/reactiveValuesToList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a reactivevalues object to a list — reactiveValuesToList","text":"","code":"values <- reactiveValues(a = 1) if (FALSE) { reactiveValuesToList(values) }  # To get the objects without taking dependencies on them, use isolate(). # isolate() can also be used when calling from outside a reactive context (e.g. # at the console) isolate(reactiveValuesToList(values)) #> $a #> [1] 1 #>"},{"path":"/reference/reactlog.html","id":null,"dir":"Reference","previous_headings":"","what":"Reactive Log Visualizer — reactlog","title":"Reactive Log Visualizer — reactlog","text":"Provides interactive browser-based tool visualizing reactive dependencies execution application.","code":""},{"path":"/reference/reactlog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reactive Log Visualizer — reactlog","text":"","code":"reactlog()  reactlogShow(time = TRUE)  reactlogReset()"},{"path":"/reference/reactlog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reactive Log Visualizer — reactlog","text":"time boolean specifies whether display time reactive takes calculate result.","code":""},{"path":"/reference/reactlog.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reactive Log Visualizer — reactlog","text":"use reactive log visualizer, start fresh R session run command options(shiny.reactlog=TRUE); launch application usual way (e.g. using runApp()). time can hit Ctrl+F3 (Mac users, Command+F3) web browser launch reactive log visualization. reactive log visualization includes reactive activity time report loaded. want see recent activity, refresh browser. Note Shiny distinguish reactive dependencies \"belong\" one Shiny user session versus another, visualization include reactive activity taken place process, just particular application session. alternative pressing Ctrl/Command+F3--example, using reactives outside context Shiny application--can run reactlogShow function, generate reactive log visualization static HTML file launch default browser. case, refreshing browser load new activity report; need call reactlogShow() explicitly. security performance reasons, enable shiny.reactlog production environments. option enabled, possible user app see least source code reactive expressions observers.","code":""},{"path":"/reference/reactlog.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Reactive Log Visualizer — reactlog","text":"reactlog(): Return list reactive information.  Can used conjunction reactlog::reactlog_show later display reactlog graph. reactlogShow(): Display full reactlog graph sessions. reactlogReset(): Resets entire reactlog stack.  Useful debugging removing prior reactive history.","code":""},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. fastmap .key_missing, key_missing htmltools , br, code, div, em, h1, h2, h3, h4, h5, h6, hr, HTML, htmlTemplate, img, includeCSS, includeHTML, includeMarkdown, includeScript, includeText, .singleton, p, pre, singleton, span, strong, suppressDependencies, tag, tagAppendAttributes, tagAppendChild, tagAppendChildren, tagGetAttribute, tagHasAttribute, tagList, tags, tagSetChildren, validateCssUnit, withTags","code":""},{"path":"/reference/registerInputHandler.html","id":null,"dir":"Reference","previous_headings":"","what":"Register an Input Handler — registerInputHandler","title":"Register an Input Handler — registerInputHandler","text":"Adds input handler data type. called, Shiny use function provided refine data passed back client (deserialized jsonlite) making available input variable server.R file.","code":""},{"path":"/reference/registerInputHandler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register an Input Handler — registerInputHandler","text":"","code":"registerInputHandler(type, fun, force = FALSE)"},{"path":"/reference/registerInputHandler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register an Input Handler — registerInputHandler","text":"type type handler added --- single-element character vector. fun handler function. function used parse data delivered client available input variable. function called following three parameters: value input provided client, deserialized using jsonlite. shinysession input exists. name input. force TRUE, overwrite existing handler without warning. FALSE, throw error class already handler defined.","code":""},{"path":"/reference/registerInputHandler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register an Input Handler — registerInputHandler","text":"function register handler duration R process (unless Shiny explicitly reloaded). reason, type used specific package minimize risk colliding another Shiny package might use data type name. recommend format \"packageName.widgetName\". called package's .onLoad() function. Currently Shiny registers following handlers: shiny.matrix, shiny.number, shiny.date. type custom Shiny Input widget deduced using getType() JavaScript function registered Shiny inputBinding.","code":""},{"path":[]},{"path":"/reference/registerInputHandler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register an Input Handler — registerInputHandler","text":"","code":"if (FALSE) { # Register an input handler which rounds a input number to the nearest integer # In a package, this should be called from the .onLoad function. registerInputHandler(\"mypackage.validint\", function(x, shinysession, name) {   if (is.null(x)) return(NA)   round(x) })  ## On the Javascript side, the associated input binding must have a corresponding getType method: # getType: function(el) { #   return \"mypackage.validint\"; # }  }"},{"path":"/reference/registerThemeDependency.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a theme dependency — registerThemeDependency","title":"Register a theme dependency — registerThemeDependency","text":"function registers function returns htmlDependency() list objects. session$setCurrentTheme() called, function re-executed, resulting html dependency sent client.","code":""},{"path":"/reference/registerThemeDependency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a theme dependency — registerThemeDependency","text":"","code":"registerThemeDependency(func)"},{"path":"/reference/registerThemeDependency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a theme dependency — registerThemeDependency","text":"func function takes one argument, theme (sass::sass_layer() object), returns htmlDependency object, list .","code":""},{"path":"/reference/registerThemeDependency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a theme dependency — registerThemeDependency","text":"Note func anonymous function, function defined within calling function. , registerThemeDependency() called multiple times function, tries deduplicate ","code":""},{"path":"/reference/removeInputHandler.html","id":null,"dir":"Reference","previous_headings":"","what":"Deregister an Input Handler — removeInputHandler","title":"Deregister an Input Handler — removeInputHandler","text":"Removes Input Handler. Rather using previously specified handler data type, default jsonlite serialization used.","code":""},{"path":"/reference/removeInputHandler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deregister an Input Handler — removeInputHandler","text":"","code":"removeInputHandler(type)"},{"path":"/reference/removeInputHandler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deregister an Input Handler — removeInputHandler","text":"type type handlers removed.","code":""},{"path":"/reference/removeInputHandler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deregister an Input Handler — removeInputHandler","text":"handler previously associated type, one existed. Otherwise, NULL.","code":""},{"path":[]},{"path":"/reference/renderCachedPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot output with cached images — renderCachedPlot","title":"Plot output with cached images — renderCachedPlot","text":"Renders reactive plot, plot images cached disk. Shiny 1.6.0, shortcut using bindCache() renderPlot().","code":""},{"path":"/reference/renderCachedPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot output with cached images — renderCachedPlot","text":"","code":"renderCachedPlot(   expr,   cacheKeyExpr,   sizePolicy = sizeGrowthRatio(width = 400, height = 400, growthRate = 1.2),   res = 72,   cache = \"app\",   ...,   alt = \"Plot object\",   outputArgs = list(),   width = NULL,   height = NULL )"},{"path":"/reference/renderCachedPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot output with cached images — renderCachedPlot","text":"expr expression generates plot. cacheKeyExpr expression returns cache key. key unique identifier plot: assumption cache key , plot . sizePolicy function takes two arguments, width height, returns list width height. purpose round actual pixel dimensions browser dimensions, generate cache images every possible pixel dimension. See sizeGrowthRatio() information default sizing policy. res resolution PNG, pixels per inch. cache scope cache, cache object. can \"app\" (default), \"session\", cache object like cachem::cache_disk(). See Cache Scoping section information. ... Arguments passed plotPNG(). can used set width, height, background color, etc. alt Alternate text HTML <img> tag displayed viewed (.e., user uses screen reader). addition character string, value may reactive expression (function referencing reactive values) returns character string. value NA (default), ggplot2::get_alt_text() used extract alt text ggplot objects; plots, NA results alt text \"Plot object\". NULL \"\" recommended limited decorative images. outputArgs list arguments passed implicit call plotOutput() renderPlot used interactive R Markdown document. width, height used. specified via argument sizePolicy.","code":""},{"path":"/reference/renderCachedPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot output with cached images — renderCachedPlot","text":"expr expression generates plot, similar renderPlot. Unlike renderPlot, expression take reactive dependencies. re-executed cache key changes. cacheKeyExpr expression , evaluated, returns object serialized hashed using rlang::hash() function generate string used cache key. key used identify contents plot: cache key previous time, assumes plot can retrieved cache. cacheKeyExpr reactive, re-evaluated upstream reactives invalidated. also trigger re-execution plotting expression, expr. key consist \"normal\" R objects, like vectors lists. Lists turn contain normal R objects. key contains environments, external pointers, reference objects --- even objects attached attributes --- possible change unpredictably even expect . Additionally, entire key serialized hashed, contains large object --- large data set, example --- may noticeable performance penalty. face issues cache key, can work around extracting important parts objects, /converting normal R objects returning . expression even serialize hash information efficient way return string, turn hashed (quickly) rlang::hash() function. Internally, result cacheKeyExpr combined name output (assign output$plot1, combined \"plot1\") form actual key used. result, even multiple plots cacheKeyExpr, cache key collisions.","code":""},{"path":"/reference/renderCachedPlot.html","id":"interactive-plots","dir":"Reference","previous_headings":"","what":"Interactive plots","title":"Plot output with cached images — renderCachedPlot","text":"renderCachedPlot can used create interactive plots. See plotOutput() information examples.","code":""},{"path":[]},{"path":"/reference/renderCachedPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot output with cached images — renderCachedPlot","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  # A basic example that uses the default app-scoped memory cache. # The cache will be shared among all simultaneous users of the application. shinyApp(   fluidPage(     sidebarLayout(       sidebarPanel(         sliderInput(\"n\", \"Number of points\", 4, 32, value = 8, step = 4)       ),       mainPanel(plotOutput(\"plot\"))     )   ),   function(input, output, session) {     output$plot <- renderCachedPlot({         Sys.sleep(2)  # Add an artificial delay         seqn <- seq_len(input$n)         plot(mtcars$wt[seqn], mtcars$mpg[seqn],              xlim = range(mtcars$wt), ylim = range(mtcars$mpg))       },       cacheKeyExpr = { list(input$n) }     )   } )    # An example uses a data object shared across sessions. mydata() is part of # the cache key, so when its value changes, plots that were previously # stored in the cache will no longer be used (unless mydata() changes back # to its previous value). mydata <- reactiveVal(data.frame(x = rnorm(400), y = rnorm(400)))  ui <- fluidPage(   sidebarLayout(     sidebarPanel(       sliderInput(\"n\", \"Number of points\", 50, 400, 100, step = 50),       actionButton(\"newdata\", \"New data\")     ),     mainPanel(       plotOutput(\"plot\")     )   ) )  server <- function(input, output, session) {   observeEvent(input$newdata, {     mydata(data.frame(x = rnorm(400), y = rnorm(400)))   })    output$plot <- renderCachedPlot(     {       Sys.sleep(2)       d <- mydata()       seqn <- seq_len(input$n)       plot(d$x[seqn], d$y[seqn], xlim = range(d$x), ylim = range(d$y))     },     cacheKeyExpr = { list(input$n, mydata()) },   ) }  shinyApp(ui, server)   # A basic application with two plots, where each plot in each session has # a separate cache. shinyApp(   fluidPage(     sidebarLayout(       sidebarPanel(         sliderInput(\"n\", \"Number of points\", 4, 32, value = 8, step = 4)       ),       mainPanel(         plotOutput(\"plot1\"),         plotOutput(\"plot2\")       )     )   ),   function(input, output, session) {     output$plot1 <- renderCachedPlot({         Sys.sleep(2)  # Add an artificial delay         seqn <- seq_len(input$n)         plot(mtcars$wt[seqn], mtcars$mpg[seqn],              xlim = range(mtcars$wt), ylim = range(mtcars$mpg))       },       cacheKeyExpr = { list(input$n) },       cache = cachem::cache_mem()     )     output$plot2 <- renderCachedPlot({         Sys.sleep(2)  # Add an artificial delay         seqn <- seq_len(input$n)         plot(mtcars$wt[seqn], mtcars$mpg[seqn],              xlim = range(mtcars$wt), ylim = range(mtcars$mpg))       },       cacheKeyExpr = { list(input$n) },       cache = cachem::cache_mem()     )   } )  }  if (FALSE) { # At the top of app.R, this set the application-scoped cache to be a memory # cache that is 20 MB in size, and where cached objects expire after one # hour. shinyOptions(cache = cachem::cache_mem(max_size = 20e6, max_age = 3600))  # At the top of app.R, this set the application-scoped cache to be a disk # cache that can be shared among multiple concurrent R processes, and is # deleted when the system reboots. shinyOptions(cache = cachem::cache_disk(file.path(dirname(tempdir()), \"myapp-cache\")))  # At the top of app.R, this set the application-scoped cache to be a disk # cache that can be shared among multiple concurrent R processes, and # persists on disk across reboots. shinyOptions(cache = cachem::cache_disk(\"./myapp-cache\"))  # At the top of the server function, this set the session-scoped cache to be # a memory cache that is 5 MB in size. server <- function(input, output, session) {   shinyOptions(cache = cachem::cache_mem(max_size = 5e6))    output$plot <- renderCachedPlot(     ...,     cache = \"session\"   ) }  }"},{"path":"/reference/renderDataTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Table output with the JavaScript DataTables library — dataTableOutput","title":"Table output with the JavaScript DataTables library — dataTableOutput","text":"function deprecated, use DT::renderDT() instead. provides superset functionality, better performance, better user experience.","code":""},{"path":"/reference/renderDataTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table output with the JavaScript DataTables library — dataTableOutput","text":"","code":"dataTableOutput(outputId)  renderDataTable(   expr,   options = NULL,   searchDelay = 500,   callback = \"function(oTable) {}\",   escape = TRUE,   env = parent.frame(),   quoted = FALSE,   outputArgs = list() )"},{"path":"/reference/renderDataTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table output with the JavaScript DataTables library — dataTableOutput","text":"outputId output variable read table expr expression returns data frame matrix. options list initialization options passed DataTables, function return list.  can find complete list options https://datatables.net/reference/option/. top-level strings class \"AsIs\" (created ()) evaluated JavaScript. useful type option value supported JSON, e.g., JavaScript function, can obtained  evaluating character string. applies root-level elements options list, worked lower-level elements list. searchDelay delay searching, milliseconds (avoid frequent search requests). callback JavaScript function applied DataTable object. useful DataTables plug-ins, often require DataTable instance available. escape Whether escape HTML entities table: TRUE means escape whole table, FALSE means escape . Alternatively, can specify numeric column indices column names indicate columns escape, e.g. 1:5 (first 5 columns), c(1, 3, 4), c(-1, -3) (columns except first third), c('Species', 'Sepal.Length'). env parent environment reactive expression. default, calling environment, defining ordinary non-reactive expression. expr quosure quoted TRUE, env ignored. quoted TRUE, quote()ed value expr used expr evaluated. expr quosure like use expression value expr, must set quoted TRUE. outputArgs list arguments passed implicit call dataTableOutput() renderDataTable() used interactive R Markdown document.","code":""},{"path":"/reference/renderDataTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table output with the JavaScript DataTables library — dataTableOutput","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   # pass a callback function to DataTables using I()   shinyApp(     ui = fluidPage(       fluidRow(         column(12,           dataTableOutput('table')         )       )     ),     server = function(input, output) {       output$table <- renderDataTable(iris,         options = list(           pageLength = 5,           initComplete = I(\"function(settings, json) {alert('Done.');}\")         )       )     }   ) }"},{"path":"/reference/renderImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Image file output — renderImage","title":"Image file output — renderImage","text":"Renders reactive image suitable assigning output slot.","code":""},{"path":"/reference/renderImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image file output — renderImage","text":"","code":"renderImage(   expr,   env = parent.frame(),   quoted = FALSE,   deleteFile,   outputArgs = list() )"},{"path":"/reference/renderImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image file output — renderImage","text":"expr expression returns list. env parent environment reactive expression. default, calling environment, defining ordinary non-reactive expression. expr quosure quoted TRUE, env ignored. quoted TRUE, quote()ed value expr used expr evaluated. expr quosure like use expression value expr, must set quoted TRUE. deleteFile file func()$src deleted sent client browser? Generally speaking, image temp file generated within func, TRUE; image temp file, FALSE. (backward compatibility reasons, argument missing, warning emitted, file temp directory deleted. future, warning become error.) outputArgs list arguments passed implicit call imageOutput() renderImage used interactive R Markdown document.","code":""},{"path":"/reference/renderImage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image file output — renderImage","text":"expression expr must return list containing attributes img object client web page. image display, properly, list must least one entry, src, path image file. may also useful contentType entry specifying MIME type image. one provided, renderImage try autodetect type, based file extension. elements width, height, class, alt, can also added list, used attributes img object. corresponding HTML output tag div img CSS class name shiny-image-output.","code":""},{"path":[]},{"path":"/reference/renderImage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image file output — renderImage","text":"","code":"## Only run examples in interactive R sessions if (interactive()) { options(device.ask.default = FALSE)  ui <- fluidPage(   sliderInput(\"n\", \"Number of observations\", 2, 1000, 500),   plotOutput(\"plot1\"),   plotOutput(\"plot2\"),   plotOutput(\"plot3\") )  server <- function(input, output, session) {    # A plot of fixed size   output$plot1 <- renderImage({     # A temp file to save the output. It will be deleted after renderImage     # sends it, because deleteFile=TRUE.     outfile <- tempfile(fileext='.png')      # Generate a png     png(outfile, width=400, height=400)     hist(rnorm(input$n))     dev.off()      # Return a list     list(src = outfile,          alt = \"This is alternate text\")   }, deleteFile = TRUE)    # A dynamically-sized plot   output$plot2 <- renderImage({     # Read plot2's width and height. These are reactive values, so this     # expression will re-run whenever these values change.     width  <- session$clientData$output_plot2_width     height <- session$clientData$output_plot2_height      # A temp file to save the output.     outfile <- tempfile(fileext='.png')      png(outfile, width=width, height=height)     hist(rnorm(input$n))     dev.off()      # Return a list containing the filename     list(src = outfile,          width = width,          height = height,          alt = \"This is alternate text\")   }, deleteFile = TRUE)    # Send a pre-rendered image, and don't delete the image after sending it   # NOTE: For this example to work, it would require files in a subdirectory   # named images/   output$plot3 <- renderImage({     # When input$n is 1, filename is ./images/image1.jpeg     filename <- normalizePath(file.path('./images',                               paste('image', input$n, '.jpeg', sep='')))      # Return a list containing the filename     list(src = filename)   }, deleteFile = FALSE) }  shinyApp(ui, server) }"},{"path":"/reference/renderPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Output — renderPlot","title":"Plot Output — renderPlot","text":"Renders reactive plot suitable assigning output slot.","code":""},{"path":"/reference/renderPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Output — renderPlot","text":"","code":"renderPlot(   expr,   width = \"auto\",   height = \"auto\",   res = 72,   ...,   alt = NA,   env = parent.frame(),   quoted = FALSE,   execOnResize = FALSE,   outputArgs = list() )"},{"path":"/reference/renderPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Output — renderPlot","text":"expr expression generates plot. width, height Height width can specified three ways: \"auto\", default, uses size specified plotOutput() (.e. offsetWidth/`offsetHeight`` HTML element bound plot.) integer, defining width/height pixels. function returns width/height pixels (\"auto\"). function executed reactive context can refer reactive values expression make width/height reactive. rendering inline plot, must provide numeric values (pixels) width height. res Resolution resulting plot, pixels per inch. value passed plotPNG(). Note affects resolution PNG rendering R; change actual ppi browser. ... Arguments passed plotPNG(). can used set width, height, background color, etc. alt Alternate text HTML <img> tag displayed viewed (.e., user uses screen reader). addition character string, value may reactive expression (function referencing reactive values) returns character string. value NA (default), ggplot2::get_alt_text() used extract alt text ggplot objects; plots, NA results alt text \"Plot object\". NULL \"\" recommended limited decorative images. env parent environment reactive expression. default, calling environment, defining ordinary non-reactive expression. expr quosure quoted TRUE, env ignored. quoted TRUE, quote()ed value expr used expr evaluated. expr quosure like use expression value expr, must set quoted TRUE. execOnResize FALSE (default), plot resized, Shiny replay plot drawing commands grDevices::replayPlot() instead re-executing expr. can result faster plot redrawing, may rare cases undesirable. encounter problems resizing plot, can Shiny re-execute code resize setting TRUE. outputArgs list arguments passed implicit call plotOutput() renderPlot used interactive R Markdown document.","code":""},{"path":"/reference/renderPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Output — renderPlot","text":"corresponding HTML output tag div img CSS class name shiny-plot-output.","code":""},{"path":"/reference/renderPlot.html","id":"interactive-plots","dir":"Reference","previous_headings":"","what":"Interactive plots","title":"Plot Output — renderPlot","text":"ggplot2 graphics, code renderPlot return ggplot object; instead code prints ggplot2 object something like print(p), coordinates interactive graphics properly scaled data space. See plotOutput() information interactive plots.","code":""},{"path":[]},{"path":"/reference/renderPrint.html","id":null,"dir":"Reference","previous_headings":"","what":"Text Output — renderPrint","title":"Text Output — renderPrint","text":"renderPrint() prints result expr, renderText() pastes together single string. renderPrint() equivalent print(); renderText() equivalent cat(). functions capture printed output generated evaluating expr. renderPrint() usually paired verbatimTextOutput(); renderText() usually paired textOutput().","code":""},{"path":"/reference/renderPrint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Text Output — renderPrint","text":"","code":"renderPrint(   expr,   env = parent.frame(),   quoted = FALSE,   width = getOption(\"width\"),   outputArgs = list() )  renderText(   expr,   env = parent.frame(),   quoted = FALSE,   outputArgs = list(),   sep = \" \" )"},{"path":"/reference/renderPrint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Text Output — renderPrint","text":"expr expression evaluate. env parent environment reactive expression. default, calling environment, defining ordinary non-reactive expression. expr quosure quoted TRUE, env ignored. quoted TRUE, quote()ed value expr used expr evaluated. expr quosure like use expression value expr, must set quoted TRUE. width Width printed output. outputArgs list arguments passed implicit call verbatimTextOutput() textOutput() functions used interactive RMarkdown document. sep separator passed cat appended element.","code":""},{"path":"/reference/renderPrint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Text Output — renderPrint","text":"renderPrint(), note given expression returns NULL NULL actually visible output. display nothing, make function return invisible().","code":""},{"path":"/reference/renderPrint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Text Output — renderPrint","text":"corresponding HTML output tag can anything (though pre recommended need monospace font whitespace preserved) CSS class name shiny-text-output.","code":""},{"path":"/reference/renderPrint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Text Output — renderPrint","text":"","code":"isolate({  # renderPrint captures any print output, converts it to a string, and # returns it visFun <- renderPrint({ \"foo\" }) visFun() # '[1] \"foo\"'  invisFun <- renderPrint({ invisible(\"foo\") }) invisFun() # ''  multiprintFun <- renderPrint({   print(\"foo\");   \"bar\" }) multiprintFun() # '[1] \"foo\"\\n[1] \"bar\"'  nullFun <- renderPrint({ NULL }) nullFun() # 'NULL'  invisNullFun <- renderPrint({ invisible(NULL) }) invisNullFun() # ''  vecFun <- renderPrint({ 1:5 }) vecFun() # '[1] 1 2 3 4 5'   # Contrast with renderText, which takes the value returned from the function # and uses cat() to convert it to a string visFun <- renderText({ \"foo\" }) visFun() # 'foo'  invisFun <- renderText({ invisible(\"foo\") }) invisFun() # 'foo'  multiprintFun <- renderText({   print(\"foo\");   \"bar\" }) multiprintFun() # 'bar'  nullFun <- renderText({ NULL }) nullFun() # ''  invisNullFun <- renderText({ invisible(NULL) }) invisNullFun() # ''  vecFun <- renderText({ 1:5 }) vecFun() # '1 2 3 4 5'  }) #> [1] \"foo\" #> [1] \"1 2 3 4 5\""},{"path":"/reference/renderTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Table Output — tableOutput","title":"Table Output — tableOutput","text":"tableOuptut()/renderTable() pair creates reactive table suitable display small matrices data frames. columns formatted xtable::xtable(). See renderDataTable() data frames big fit single page.","code":""},{"path":"/reference/renderTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table Output — tableOutput","text":"","code":"tableOutput(outputId)  renderTable(   expr,   striped = FALSE,   hover = FALSE,   bordered = FALSE,   spacing = c(\"s\", \"xs\", \"m\", \"l\"),   width = \"auto\",   align = NULL,   rownames = FALSE,   colnames = TRUE,   digits = NULL,   na = \"NA\",   ...,   env = parent.frame(),   quoted = FALSE,   outputArgs = list() )"},{"path":"/reference/renderTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table Output — tableOutput","text":"outputId output variable read table expr expression returns R object can used xtable::xtable(). striped, hover, bordered Logicals: TRUE, apply corresponding Bootstrap table format output table. spacing spacing rows table (xs stands \"extra small\", s \"small\", m \"medium\" l \"large\"). width Table width. Must valid CSS unit (like \"100%\", \"400px\", \"auto\") number, coerced string \"px\" appended. align string specifies column alignment. equal 'l', 'c' 'r', columns , respectively, left-, center- right-aligned. Otherwise, align must number characters resulting table (rownames = TRUE, equal ncol()+1), -th character specifying alignment -th column (besides 'l', 'c' 'r', '?' also permitted - '?' placeholder particular column, indicating keep default alignment). NULL, numeric/integer columns (including row names, numbers) right-aligned everything else left-aligned (align = '?' produces result). rownames, colnames Logicals: include rownames? include colnames (column headers)? digits integer specifying number decimal places numeric columns (apply columns integer class). digits set negative value, numeric columns displayed scientific format precision abs(digits) digits. na string use table cells whose values missing (.e. either evaluate NA NaN). ... Arguments passed xtable::xtable() xtable::print.xtable(). env parent environment reactive expression. default, calling environment, defining ordinary non-reactive expression. expr quosure quoted TRUE, env ignored. quoted TRUE, quote()ed value expr used expr evaluated. expr quosure like use expression value expr, must set quoted TRUE. outputArgs list arguments passed implicit call tableOutput() renderTable used interactive R Markdown document.","code":""},{"path":"/reference/renderTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table Output — tableOutput","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   # table example   shinyApp(     ui = fluidPage(       fluidRow(         column(12,           tableOutput('table')         )       )     ),     server = function(input, output) {       output$table <- renderTable(iris)     }   ) }"},{"path":"/reference/renderUI.html","id":null,"dir":"Reference","previous_headings":"","what":"UI Output — renderUI","title":"UI Output — renderUI","text":"Renders reactive HTML using Shiny UI library.","code":""},{"path":"/reference/renderUI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI Output — renderUI","text":"","code":"renderUI(expr, env = parent.frame(), quoted = FALSE, outputArgs = list())"},{"path":"/reference/renderUI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI Output — renderUI","text":"expr expression returns Shiny tag object, HTML(), list objects. env parent environment reactive expression. default, calling environment, defining ordinary non-reactive expression. expr quosure quoted TRUE, env ignored. quoted TRUE, quote()ed value expr used expr evaluated. expr quosure like use expression value expr, must set quoted TRUE. outputArgs list arguments passed implicit call uiOutput() renderUI used interactive R Markdown document.","code":""},{"path":"/reference/renderUI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"UI Output — renderUI","text":"corresponding HTML output tag div CSS class name shiny-html-output (use uiOutput()).","code":""},{"path":[]},{"path":"/reference/renderUI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UI Output — renderUI","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   uiOutput(\"moreControls\") )  server <- function(input, output) {   output$moreControls <- renderUI({     tagList(       sliderInput(\"n\", \"N\", 1, 1000, 500),       textInput(\"label\", \"Label\")     )   }) } shinyApp(ui, server) }"},{"path":"/reference/repeatable.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a random number generator repeatable — repeatable","title":"Make a random number generator repeatable — repeatable","text":"Given function generates random data, returns wrapped version function always uses seed called. seed use can passed explicitly desired; otherwise, random number used.","code":""},{"path":"/reference/repeatable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a random number generator repeatable — repeatable","text":"","code":"repeatable(rngfunc, seed = stats::runif(1, 0, .Machine$integer.max))"},{"path":"/reference/repeatable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a random number generator repeatable — repeatable","text":"rngfunc function affected R session's seed. seed seed set every time resulting function called.","code":""},{"path":"/reference/repeatable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a random number generator repeatable — repeatable","text":"repeatable version function passed .","code":""},{"path":"/reference/repeatable.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Make a random number generator repeatable — repeatable","text":"called, returned function attempts preserve R session's current seed snapshotting restoring base::.Random.seed().","code":""},{"path":"/reference/repeatable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a random number generator repeatable — repeatable","text":"","code":"rnormA <- repeatable(rnorm) rnormB <- repeatable(rnorm) rnormA(3)  # [1]  1.8285879 -0.7468041 -0.4639111 #> [1] 1.0000840 0.7345643 1.7086582 rnormA(3)  # [1]  1.8285879 -0.7468041 -0.4639111 #> [1] 1.0000840 0.7345643 1.7086582 rnormA(5)  # [1]  1.8285879 -0.7468041 -0.4639111 -1.6510126 -1.4686924 #> [1]  1.0000840  0.7345643  1.7086582 -0.4016216  1.2537031 rnormB(5)  # [1] -0.7946034  0.2568374 -0.6567597  1.2451387 -0.8375699 #> [1] -0.1180581  0.3763196  0.2919217 -0.2744056 -0.5607413"},{"path":"/reference/req.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for required values — req","title":"Check for required values — req","text":"Ensure values available (\"truthy\") proceeding calculation action. given values truthy, operation stopped raising \"silent\" exception (logged Shiny, displayed Shiny app's UI).","code":""},{"path":"/reference/req.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for required values — req","text":"","code":"req(..., cancelOutput = FALSE)"},{"path":"/reference/req.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for required values — req","text":"... Values check truthiness. cancelOutput TRUE output evaluated, stop processing usual instead clearing output, leave whatever state happens . \"progress\", TRUE, also keep output recalculating state; intended cases -progress calculation completed reactive flush cycle, still expected provide result future.","code":""},{"path":"/reference/req.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for required values — req","text":"first value passed .","code":""},{"path":"/reference/req.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for required values — req","text":"req function designed used one two ways. first call like statement (ignoring return value) attempting operations using required values:   example, r() called input$, input$b, rv$state NULL, FALSE, \"\", etc., req call trigger error propagates way whatever render block observer executing. second use wrap expression must truthy:   example, req(input$plotType) first checks input$plotType truthy, , returns . convenient way check value \"inline\" first use.","code":"rv <- reactiveValues(state = FALSE)  r <- reactive({    req(input$a, input$b, rv$state)    # Code that uses input$a, input$b, and/or rv$state...  }) output$plot <- renderPlot({    if (req(input$plotType) == \"histogram\") {      hist(dataset())    } else if (input$plotType == \"scatter\") {      qplot(dataset(), aes(x = x, y = y))    }  })"},{"path":"/reference/req.html","id":"using-req-false-","dir":"Reference","previous_headings":"","what":"Using req(FALSE)","title":"Check for required values — req","text":"can use req(FALSE) (.e. condition) already performed checks needed point just want stop reactive chain now. advantage , except perhaps ease readability complicated condition check (perhaps like divide condition nested statements).","code":""},{"path":"/reference/req.html","id":"using-canceloutput-true","dir":"Reference","previous_headings":"","what":"Using cancelOutput = TRUE","title":"Check for required values — req","text":"req(..., cancelOutput = TRUE) used, \"silent\" exception also raised, treated slightly differently one outputs currently evaluated. cases, reactive chain proceed update, output(s) left whatever state happen (whatever last valid state). Note always going case used inside output context (e.g. output$txt <- ...). may may case used inside non-output context (e.g. reactive(), observe() observeEvent()) --- depending whether output$... triggered result calls. See examples concrete scenarios.","code":""},{"path":"/reference/req.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for required values — req","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {   ui <- fluidPage(     textInput('data', 'Enter a dataset from the \"datasets\" package', 'cars'),     p('(E.g. \"cars\", \"mtcars\", \"pressure\", \"faithful\")'), hr(),     tableOutput('tbl')   )    server <- function(input, output) {     output$tbl <- renderTable({        ## to require that the user types something, use: `req(input$data)`       ## but better: require that input$data is valid and leave the last       ## valid table up       req(exists(input$data, \"package:datasets\", inherits = FALSE),           cancelOutput = TRUE)        head(get(input$data, \"package:datasets\", inherits = FALSE))     })   }    shinyApp(ui, server) }"},{"path":"/reference/resourcePaths.html","id":null,"dir":"Reference","previous_headings":"","what":"Resource Publishing — addResourcePath","title":"Resource Publishing — addResourcePath","text":"Add, remove, list directory static resources Shiny's web server, given path prefix. Primarily intended package authors make supporting JavaScript/CSS files available components.","code":""},{"path":"/reference/resourcePaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resource Publishing — addResourcePath","text":"","code":"addResourcePath(prefix, directoryPath)  resourcePaths()  removeResourcePath(prefix)"},{"path":"/reference/resourcePaths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resource Publishing — addResourcePath","text":"prefix URL prefix (without slashes). Valid characters -z, -Z, 0-9, hyphen, period, underscore. example, value 'foo' means request paths begin '/foo' mapped given directory. directoryPath directory contains static resources served.","code":""},{"path":"/reference/resourcePaths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resource Publishing — addResourcePath","text":"Shiny provides two ways serving static files (.e., resources): Static files www/ directory automatically made available request path begins /. addResourcePath() makes static files directoryPath available request path begins prefix. second approach primarily intended package authors make supporting JavaScript/CSS files available components. Tools managing static resources published Shiny's web server: addResourcePath() adds directory static resources. resourcePaths() lists currently active resource mappings. removeResourcePath() removes directory static resources.","code":""},{"path":[]},{"path":"/reference/resourcePaths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resource Publishing — addResourcePath","text":"","code":"addResourcePath('datasets', system.file('data', package='datasets')) resourcePaths() #>                                           datasets  #> \"D:/Program Files/R/R-4.3.2/library/datasets/data\"  removeResourcePath('datasets') resourcePaths() #> named character(0)  # make sure all resources are removed lapply(names(resourcePaths()), removeResourcePath) #> list()"},{"path":"/reference/restoreInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Restore an input value — restoreInput","title":"Restore an input value — restoreInput","text":"restores input value current restore context. called early inside input functions (like textInput()).","code":""},{"path":"/reference/restoreInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restore an input value — restoreInput","text":"","code":"restoreInput(id, default)"},{"path":"/reference/restoreInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restore an input value — restoreInput","text":"id Name input value restore. default default value use, value restore.","code":""},{"path":"/reference/runApp.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Shiny Application — runApp","title":"Run Shiny Application — runApp","text":"Runs Shiny application. function normally return; interrupt R stop application (usually pressing Ctrl+C Esc).","code":""},{"path":"/reference/runApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Shiny Application — runApp","text":"","code":"runApp(   appDir = getwd(),   port = getOption(\"shiny.port\"),   launch.browser = getOption(\"shiny.launch.browser\", interactive()),   host = getOption(\"shiny.host\", \"127.0.0.1\"),   workerId = \"\",   quiet = FALSE,   display.mode = c(\"auto\", \"normal\", \"showcase\"),   test.mode = getOption(\"shiny.testmode\", FALSE) )"},{"path":"/reference/runApp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Shiny Application — runApp","text":"appDir application run. one following: directory containing server.R, plus, either ui.R www directory contains file index.html. directory containing app.R. .R file containing Shiny application, ending expression produces Shiny app object. list ui server components. Shiny app object created shinyApp(). port TCP port application listen . port specified, shiny.port option set (options(shiny.port = XX)), port used. Otherwise, use random port 3000:8000, excluding ports blocked Google Chrome considered unsafe: 3659, 4045, 5060, 5061, 6000, 6566, 6665:6669 6697. twenty random ports tried. launch.browser true, system's default web browser launched automatically app started. Defaults true interactive sessions . value parameter can also function call application's URL. host IPv4 address application listen . Defaults shiny.host option, set, \"127.0.0.1\" . See Details. workerId Can generally ignored. Exists help editions Shiny Server Pro route requests correct process. quiet Shiny status messages shown? Defaults FALSE. display.mode mode display application. set value \"showcase\", shows application code metadata DESCRIPTION file application directory alongside application. set \"normal\", displays application normally. Defaults \"auto\", displays application mode given DESCRIPTION file, . test.mode application launched test mode? used recording running automated tests. Defaults shiny.testmode option, FALSE option set.","code":""},{"path":"/reference/runApp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Shiny Application — runApp","text":"host parameter introduced Shiny 0.9.0. default value \"127.0.0.1\" means , contrary previous versions Shiny, current machine can access locally hosted Shiny apps. allow clients connect, use value \"0.0.0.0\" instead (value hard-coded Shiny 0.8.0 earlier).","code":""},{"path":"/reference/runApp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Shiny Application — runApp","text":"","code":"if (FALSE) { # Start app in the current working directory runApp()  # Start app in a subdirectory called myapp runApp(\"myapp\") }  ## Only run this example in interactive R sessions if (interactive()) {   options(device.ask.default = FALSE)    # Apps can be run without a server.r and ui.r file   runApp(list(     ui = bootstrapPage(       numericInput('n', 'Number of obs', 100),       plotOutput('plot')     ),     server = function(input, output) {       output$plot <- renderPlot({ hist(runif(input$n)) })     }   ))     # Running a Shiny app object   app <- shinyApp(     ui = bootstrapPage(       numericInput('n', 'Number of obs', 100),       plotOutput('plot')     ),     server = function(input, output) {       output$plot <- renderPlot({ hist(runif(input$n)) })     }   )   runApp(app) }"},{"path":"/reference/runExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Shiny Example Applications — runExample","title":"Run Shiny Example Applications — runExample","text":"Launch Shiny example applications, optionally, system's web browser.","code":""},{"path":"/reference/runExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Shiny Example Applications — runExample","text":"","code":"runExample(   example = NA,   port = getOption(\"shiny.port\"),   launch.browser = getOption(\"shiny.launch.browser\", interactive()),   host = getOption(\"shiny.host\", \"127.0.0.1\"),   display.mode = c(\"auto\", \"normal\", \"showcase\"),   package = \"shiny\" )"},{"path":"/reference/runExample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Shiny Example Applications — runExample","text":"example name example run, NA (default) list available examples. port TCP port application listen . port specified, shiny.port option set (options(shiny.port = XX)), port used. Otherwise, use random port 3000:8000, excluding ports blocked Google Chrome considered unsafe: 3659, 4045, 5060, 5061, 6000, 6566, 6665:6669 6697. twenty random ports tried. launch.browser true, system's default web browser launched automatically app started. Defaults true interactive sessions . host IPv4 address application listen . Defaults shiny.host option, set, \"127.0.0.1\" . display.mode mode display example. Defaults showcase, may set normal see example without code commentary. package package find example (defaults \"shiny\"). provide examples package, store examples inst/examples-shiny directory package. example subdirectory runnable runApp() called subdirectory. Example apps can include DESCRIPTION file README.md file provide metadata commentary example. See article Display Modes Shiny website information.","code":""},{"path":"/reference/runExample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Shiny Example Applications — runExample","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   # List all available examples   runExample()    # Run one of the examples   runExample(\"01_hello\")    # Print the directory containing the code for all examples   system.file(\"examples\", package=\"shiny\") }"},{"path":"/reference/runGadget.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a gadget — runGadget","title":"Run a gadget — runGadget","text":"Similar runApp, handles input$cancel automatically, running RStudio, defaults viewing app Viewer pane.","code":""},{"path":"/reference/runGadget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a gadget — runGadget","text":"","code":"runGadget(   app,   server = NULL,   port = getOption(\"shiny.port\"),   viewer = paneViewer(),   stopOnCancel = TRUE )"},{"path":"/reference/runGadget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a gadget — runGadget","text":"app Either Shiny app object created shinyApp() et al, , UI object. server Ignored app Shiny app object; otherwise, passed along shinyApp (.e. shinyApp(ui = app, server = server)). port See runApp(). viewer Specify gadget displayed--viewer pane, dialog window, external browser--passing call one viewer() functions. stopOnCancel TRUE (default), observeEvent automatically created handles input$cancel calling stopApp() error. Pass FALSE want handle input$cancel .","code":""},{"path":"/reference/runGadget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a gadget — runGadget","text":"value returned gadget.","code":""},{"path":"/reference/runGadget.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a gadget — runGadget","text":"","code":"if (FALSE) { library(shiny)  ui <- fillPage(...)  server <- function(input, output, session) {   ... }  # Either pass ui/server as separate arguments... runGadget(ui, server)  # ...or as a single app object runGadget(shinyApp(ui, server)) }"},{"path":"/reference/runTests.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs the tests associated with this Shiny app — runTests","title":"Runs the tests associated with this Shiny app — runTests","text":"Sources .R files top-level tests/ much like R CMD check. files typically simple runners tests nested directories tests/.","code":""},{"path":"/reference/runTests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs the tests associated with this Shiny app — runTests","text":"","code":"runTests(appDir = \".\", filter = NULL, assert = TRUE, envir = globalenv())"},{"path":"/reference/runTests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs the tests associated with this Shiny app — runTests","text":"appDir base directory application. filter NULL, tests file names matching regular expression executed. Matching performed file name including extension. assert Logical value determines error thrown error captured. envir Parent testing environment base individual testing environments.","code":""},{"path":"/reference/runTests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs the tests associated with this Shiny app — runTests","text":"data frame classed supplemental class \"shiny_runtests\". data frame following columns:","code":""},{"path":"/reference/runTests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Runs the tests associated with this Shiny app — runTests","text":"Historically, shinytest recommended placing tests top-level tests/ directory. older folder structure supported runTests. Please see shinyAppTemplate() details.","code":""},{"path":"/reference/runUrl.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a Shiny application from a URL — runUrl","title":"Run a Shiny application from a URL — runUrl","text":"runUrl() downloads launches Shiny application hosted downloadable URL. Shiny application must saved .zip, .tar, .tar.gz file. Shiny application files must contained root directory subdirectory archive. example, files might myapp/server.r myapp/ui.r. functions runGitHub() runGist() based runUrl(), using URL's GitHub (https://github.com) GitHub gists (https://gist.github.com), respectively.","code":""},{"path":"/reference/runUrl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a Shiny application from a URL — runUrl","text":"","code":"runUrl(url, filetype = NULL, subdir = NULL, destdir = NULL, ...)  runGist(gist, destdir = NULL, ...)  runGitHub(   repo,   username = getOption(\"github.user\"),   ref = \"HEAD\",   subdir = NULL,   destdir = NULL,   ... )"},{"path":"/reference/runUrl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a Shiny application from a URL — runUrl","text":"url URL application. filetype file type (\".zip\", \".tar\", \".tar.gz\". Defaults file extension taken url. subdir subdirectory repository contains app. default, function run app top level repo, can use path \"inst/shinyapp\". destdir Directory store downloaded application files. NULL (default), application files stored temporary directory removed app exits ... arguments passed runApp(), port launch.browser. gist identifier gist. example, gist https://gist.github.com/jcheng5/3239667, 3239667, '3239667', 'https://gist.github.com/jcheng5/3239667' valid values. repo Name repository. username GitHub username. repo form \"username/repo\", username taken repo. ref Desired git reference. commit, tag, branch name. Defaults \"HEAD\", means default branch GitHub, typically \"main\" \"master\".","code":""},{"path":"/reference/runUrl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a Shiny application from a URL — runUrl","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   runUrl('https://github.com/rstudio/shiny_example/archive/main.tar.gz')    # Can run an app from a subdirectory in the archive   runUrl(\"https://github.com/rstudio/shiny_example/archive/main.zip\",     subdir = \"inst/shinyapp/\") } ## Only run this example in interactive R sessions if (interactive()) {   runGist(3239667)   runGist(\"https://gist.github.com/jcheng5/3239667\")    # Old URL format without username   runGist(\"https://gist.github.com/3239667\") }  ## Only run this example in interactive R sessions if (interactive()) {   runGitHub(\"shiny_example\", \"rstudio\")   # or runGitHub(\"rstudio/shiny_example\")    # Can run an app from a subdirectory in the repo   runGitHub(\"shiny_example\", \"rstudio\", subdir = \"inst/shinyapp/\") }"},{"path":"/reference/safeError.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare an error safe for the user to see — safeError","title":"Declare an error safe for the user to see — safeError","text":"used want let user see error message even default sanitize errors. error e call stop(safeError(e)), Shiny ignore value getOption(\"shiny.sanitize.errors\") always display error app .","code":""},{"path":"/reference/safeError.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare an error safe for the user to see — safeError","text":"","code":"safeError(error)"},{"path":"/reference/safeError.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare an error safe for the user to see — safeError","text":"error Either \"error\" object \"character\" object (string). latter case, string become message error returned safeError.","code":""},{"path":"/reference/safeError.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Declare an error safe for the user to see — safeError","text":"\"error\" object","code":""},{"path":"/reference/safeError.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Declare an error safe for the user to see — safeError","text":"error generated safeError priority Shiny errors. can dangerous. example, set options(shiny.sanitize.errors = TRUE), default error messages omitted app, replaced generic error message. However, apply safeError: whatever pass error displayed user. , used sure error message contain sensitive information. situations, safeError can make users' lives much easier giving hint error occurred.","code":""},{"path":[]},{"path":"/reference/safeError.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Declare an error safe for the user to see — safeError","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  # uncomment the desired line to experiment with shiny.sanitize.errors # options(shiny.sanitize.errors = TRUE) # options(shiny.sanitize.errors = FALSE)  # Define UI ui <- fluidPage(   textInput('number', 'Enter your favorite number from 1 to 10', '5'),   textOutput('normalError'),   textOutput('safeError') )  # Server logic server <- function(input, output) {   output$normalError <- renderText({     number <- input$number     if (number %in% 1:10) {       return(paste('You chose', number, '!'))     } else {       stop(         paste(number, 'is not a number between 1 and 10')       )     }   })   output$safeError <- renderText({     number <- input$number     if (number %in% 1:10) {       return(paste('You chose', number, '!'))     } else {       stop(safeError(         paste(number, 'is not a number between 1 and 10')       ))     }   }) }  # Complete app with UI and server components shinyApp(ui, server) }"},{"path":"/reference/selectInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a select list input control — selectInput","title":"Create a select list input control — selectInput","text":"Create select list can used choose single multiple items list values.","code":""},{"path":"/reference/selectInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a select list input control — selectInput","text":"","code":"selectInput(   inputId,   label,   choices,   selected = NULL,   multiple = FALSE,   selectize = TRUE,   width = NULL,   size = NULL )  selectizeInput(inputId, ..., options = NULL, width = NULL)"},{"path":"/reference/selectInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a select list input control — selectInput","text":"inputId input slot used access value. label Display label control, NULL label. choices List values select . elements list named, name --- rather value --- displayed user. also possible group related inputs providing named list whose elements (either named unnamed) lists, vectors, factors. case, outermost names used group labels (leveraging <optgroup> HTML tag) elements respective sublist. See example section small demo feature. selected initially selected value (multiple values multiple = TRUE). specified defaults first value single-select lists values multiple select lists. multiple selection multiple items allowed? selectize Whether use selectize.js . width width input, e.g. '400px', '100%'; see validateCssUnit(). size Number items show selection box; larger number result taller box. compatible selectize=TRUE. Normally, multiple=FALSE, select input drop-list, size set, box instead. ... Arguments passed selectInput(). options list options. See documentation selectize.js(https://selectize.dev/docs/usage) possible options (character option values inside base::() treated literal JavaScript code; see renderDataTable() details).","code":""},{"path":"/reference/selectInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a select list input control — selectInput","text":"select list control can added UI definition.","code":""},{"path":"/reference/selectInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a select list input control — selectInput","text":"default, selectInput() selectizeInput() use JavaScript library selectize.js (https://selectize.dev/) instead basic select input element. use standard HTML select input element, use selectInput() selectize=FALSE. selectize mode, first element choices value \"\", name treated placeholder prompt. example: selectInput(\"letter\", \"Letter\", c(\"Choose one\" = \"\", LETTERS)) Performance note: selectInput() selectizeInput() can slow significantly thousands choices used; legacy browsers like Internet Explorer, user interface may hang many seconds. large numbers choices, Shiny offers \"server-side selectize\" option massively improves performance efficiency; see selectize article Shiny Dev Center details.","code":""},{"path":"/reference/selectInput.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a select list input control — selectInput","text":"selectize input created selectizeInput() allows deletion selected option even single select input, return empty string value. default behavior selectize.js. However, selectize input created selectInput(..., selectize = TRUE) ignore empty string value single choice input empty string choices argument. keep compatibility selectInput(..., selectize = FALSE).","code":""},{"path":"/reference/selectInput.html","id":"server-value","dir":"Reference","previous_headings":"","what":"Server value","title":"Create a select list input control — selectInput","text":"vector character strings, usually length 1, value selected items. multiple=TRUE nothing selected, value NULL.","code":""},{"path":[]},{"path":"/reference/selectInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a select list input control — selectInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  # basic example shinyApp(   ui = fluidPage(     selectInput(\"variable\", \"Variable:\",                 c(\"Cylinders\" = \"cyl\",                   \"Transmission\" = \"am\",                   \"Gears\" = \"gear\")),     tableOutput(\"data\")   ),   server = function(input, output) {     output$data <- renderTable({       mtcars[, c(\"mpg\", input$variable), drop = FALSE]     }, rownames = TRUE)   } )  # demoing group support in the `choices` arg shinyApp(   ui = fluidPage(     selectInput(\"state\", \"Choose a state:\",       list(`East Coast` = list(\"NY\", \"NJ\", \"CT\"),            `West Coast` = list(\"WA\", \"OR\", \"CA\"),            `Midwest` = list(\"MN\", \"WI\", \"IA\"))     ),     textOutput(\"result\")   ),   server = function(input, output) {     output$result <- renderText({       paste(\"You chose\", input$state)     })   } ) }"},{"path":"/reference/serverInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect information about the Shiny Server environment — serverInfo","title":"Collect information about the Shiny Server environment — serverInfo","text":"function returns information current Shiny Server, version, whether open source edition professional edition. app served Shiny Server, function just returns list(shinyServer = FALSE).","code":""},{"path":"/reference/serverInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect information about the Shiny Server environment — serverInfo","text":"","code":"serverInfo()"},{"path":"/reference/serverInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect information about the Shiny Server environment — serverInfo","text":"list Shiny Server information.","code":""},{"path":"/reference/serverInfo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collect information about the Shiny Server environment — serverInfo","text":"function return meaningful data using Shiny Server version 1.2.2 later.","code":""},{"path":"/reference/session.html","id":null,"dir":"Reference","previous_headings":"","what":"Session object — session","title":"Session object — session","text":"Shiny server functions can optionally include session parameter (e.g. function(input, output, session)). session object environment can used access information functionality relating session. following list describes items available environment; can accessed using $ operator (example, session$clientData$url_search).","code":""},{"path":"/reference/session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Session object — session","text":"allowReconnect(value) value TRUE run hosting environment (Shiny Server Connect) reconnections enabled,  session ends due network connection closing, client attempt reconnect server. reconnection successful, browser send current input values new session server, server recalculate outputs send back client. value FALSE, reconnections disabled (default state). \"force\", client browser always attempt reconnect. reason use \"force\" testing local connection (without Shiny Server Connect). clientData reactiveValues() object contains information client. pixelratio reports \"device pixel ratio\" web browser, 1 none reported. value 2 Apple Retina displays. singletons - internal use url_protocol, url_hostname, url_port, url_pathname, url_search, url_hash_initial url_hash can used get components URL requested browser load Shiny app page. values browser's perspective, neither HTTP proxies Shiny Server affect values. url_search value may used parseQueryString() access query string parameters. clientData also contains information output. output_outputId_width output_outputId_height give dimensions (using offsetWidth offsetHeight) DOM element bound outputId, output_outputId_hidden logical indicates whether element hidden. values may NULL output bound. input session's input object (passed Shiny server function argument). isClosed() function returns TRUE client disconnected. ns(id) Server-side version ns <- NS(id). bare IDs need explicitly namespaced current module, session$ns(\"name\") return fully-qualified ID. onEnded(callback) Synonym onSessionEnded. onFlush(func, =TRUE) Registers function called next time (=TRUE) every time (=FALSE) Shiny flushes reactive system. Returns function can called arguments cancel registration. onFlushed(func, =TRUE) Registers function called next time (=TRUE) every time (=FALSE) Shiny flushes reactive system. Returns function can called arguments cancel registration. onSessionEnded(callback) Registers function called client disconnected. Returns function can called arguments cancel registration. output session's output object (passed Shiny server function argument). reactlog internal use. registerDataObj(name, data, filterFunc) Publishes R object URL endpoint unique session. name must single element character vector; used form part URL. filterFunc must function takes two arguments: data (value passed registerDataObj) req (environment implements Rook specification HTTP requests). filterFunc called values whenever HTTP request made URL endpoint. return value filterFunc Rook-style response. reload() equivalent hitting browser's Reload button. works session actually connected. request environment implements Rook specification HTTP requests. request used initiate websocket connection (opposed request downloaded web page app). userData environment app authors module/package authors store whatever session-specific data want. user User's log-information. Useful identifying users hosted platforms RStudio Connect Shiny Server. groups user's relevant group information. Useful determining privileges user . resetBrush(brushId) Resets/clears brush given brushId, exists imageOutput plotOutput app. sendCustomMessage(type, message) Sends custom message web page. type must single-element character vector giving type message, message can jsonlite-encodable value. Custom messages meaning Shiny ; used solely convey information custom JavaScript logic browser. can adding JavaScript code browser calls Shiny.addCustomMessageHandler(type, function(message){...}) page loads; function provide addCustomMessageHandler invoked time sendCustomMessage called server. sendBinaryMessage(type, message) Similar sendCustomMessage, message must raw vector registration method client Shiny.addBinaryMessageHandler(type, function(message){...}). message argument client DataView. sendInputMessage(inputId, message) Sends message input session's client web page; input present bound page time message received, input binding object's receiveMessage(el, message) method called. sendInputMessage generally called directly Shiny apps, friendlier wrapper functions like updateTextInput(). setBookmarkExclude(names) Set input names excluded bookmarking. getBookmarkExclude() Returns set input names excluded bookmarking. onBookmark(fun) Registers function called just bookmarking state. onBookmarked(fun) Registers function called just bookmarking state. onRestore(fun) Registers function called session restored, reactives, observers, render functions run. onRestored(fun) Registers function called session restored, reactives, observers, render functions run. doBookmark() bookmarking invoke onBookmark onBookmarked callback functions. exportTestValues() Registers expressions export test mode, available test snapshot URL. getTestSnapshotUrl(input=TRUE, output=TRUE, export=TRUE, format=\"json\") Returns URL test snapshots. effect shiny.testmode option set TRUE. input, output, export arguments, TRUE means return values. also possible specify name values return providing character vector, input=c(\"x\", \"y\"). format can \"rds\" \"json\". setCurrentTheme(theme) Sets current bootstrapLib() theme, updates value getCurrentTheme(), invalidates session$getCurrentTheme(), calls function(s) registered registerThemeDependency() provided theme. function calls return htmltools::htmlDependency()s stylesheets, stylesheets \"refreshed\" (.e., new stylesheets inserted page old ones disabled removed). getCurrentTheme() reactive read current bootstrapLib() theme.","code":""},{"path":"/reference/setBookmarkExclude.html","id":null,"dir":"Reference","previous_headings":"","what":"Exclude inputs from bookmarking — setBookmarkExclude","title":"Exclude inputs from bookmarking — setBookmarkExclude","text":"function tells Shiny inputs excluded bookmarking. called inside application's server function.","code":""},{"path":"/reference/setBookmarkExclude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exclude inputs from bookmarking — setBookmarkExclude","text":"","code":"setBookmarkExclude(names = character(0), session = getDefaultReactiveDomain())"},{"path":"/reference/setBookmarkExclude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exclude inputs from bookmarking — setBookmarkExclude","text":"names character vector containing names inputs exclude bookmarking. session shiny session object.","code":""},{"path":"/reference/setBookmarkExclude.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exclude inputs from bookmarking — setBookmarkExclude","text":"function can also called module's server function, case exclude inputs specified names, module. affect inputs modules top level Shiny application.","code":""},{"path":[]},{"path":"/reference/setSerializer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a function for serializing an input before bookmarking application state — setSerializer","title":"Add a function for serializing an input before bookmarking application state — setSerializer","text":"Add function serializing input bookmarking application state","code":""},{"path":"/reference/setSerializer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a function for serializing an input before bookmarking application state — setSerializer","text":"","code":"setSerializer(inputId, fun, session = getDefaultReactiveDomain())"},{"path":"/reference/setSerializer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a function for serializing an input before bookmarking application state — setSerializer","text":"inputId Name input value. fun function takes input value returns modified value. returned value used test snapshot. session Shiny session object.","code":""},{"path":"/reference/shiny-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Web Application Framework for R — shiny-package","title":"Web Application Framework for R — shiny-package","text":"Shiny makes incredibly easy build interactive web applications R. Automatic \"reactive\" binding inputs outputs extensive prebuilt widgets make possible build beautiful, responsive, powerful applications minimal effort.","code":""},{"path":"/reference/shiny-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Web Application Framework for R — shiny-package","text":"Shiny tutorial https://shiny.rstudio.com/tutorial/ explains framework depth, walks building simple application, includes extensive annotated examples.","code":""},{"path":[]},{"path":"/reference/shiny-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Web Application Framework for R — shiny-package","text":"Maintainer: Winston Chang winston@posit.co (ORCID) Authors: Joe Cheng joe@posit.co JJ Allaire jj@posit.co Carson Sievert carson@posit.co (ORCID) Barret Schloerke barret@posit.co (ORCID) Yihui Xie yihui@posit.co Jeff Allen Jonathan McPherson jonathan@posit.co Alan Dipert Barbara Borges contributors: Posit Software, PBC [copyright holder, funder] jQuery Foundation (jQuery library jQuery UI library) [copyright holder] jQuery contributors (jQuery library; authors listed inst/www/shared/jquery-AUTHORS.txt) [contributor, copyright holder] jQuery UI contributors (jQuery UI library; authors listed inst/www/shared/jqueryui/AUTHORS.txt) [contributor, copyright holder] Mark Otto (Bootstrap library) [contributor] Jacob Thornton (Bootstrap library) [contributor] Bootstrap contributors (Bootstrap library) [contributor] Twitter, Inc (Bootstrap library) [copyright holder] Prem Nawaz Khan (Bootstrap accessibility plugin) [contributor] Victor Tsaran (Bootstrap accessibility plugin) [contributor] Dennis Lembree (Bootstrap accessibility plugin) [contributor] Srinivasu Chakravarthula (Bootstrap accessibility plugin) [contributor] Cathy O'Connor (Bootstrap accessibility plugin) [contributor] PayPal, Inc (Bootstrap accessibility plugin) [copyright holder] Stefan Petre (Bootstrap-datepicker library) [contributor, copyright holder] Andrew Rowls (Bootstrap-datepicker library) [contributor, copyright holder] Brian Reavis (selectize.js library) [contributor, copyright holder] Salmen Bejaoui (selectize-plugin-a11y library) [contributor, copyright holder] Denis Ineshin (ion.rangeSlider library) [contributor, copyright holder] Sami Samhuri (Javascript strftime library) [contributor, copyright holder] SpryMedia Limited (DataTables library) [contributor, copyright holder] John Fraser (showdown.js library) [contributor, copyright holder] John Gruber (showdown.js library) [contributor, copyright holder] Ivan Sagalaev (highlight.js library) [contributor, copyright holder] R Core Team (tar implementation R) [contributor, copyright holder]","code":""},{"path":"/reference/shiny.appobj.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny App object — shiny.appobj","title":"Shiny App object — shiny.appobj","text":"Internal methods shiny.appobj S3 class.","code":""},{"path":"/reference/shiny.appobj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny App object — shiny.appobj","text":"","code":"as.shiny.appobj(x)  # S3 method for shiny.appobj as.shiny.appobj(x)  # S3 method for list as.shiny.appobj(x)  # S3 method for character as.shiny.appobj(x)  is.shiny.appobj(x)  # S3 method for shiny.appobj print(x, ...)  # S3 method for shiny.appobj as.tags(x, ...)"},{"path":"/reference/shiny.appobj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny App object — shiny.appobj","text":"x Object convert Shiny app. ... Ignored.","code":""},{"path":"/reference/shinyApp.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Shiny app object — shinyApp","title":"Create a Shiny app object — shinyApp","text":"functions create Shiny app objects either explicit UI/server pair (shinyApp), passing path directory contains Shiny app (shinyAppDir).","code":""},{"path":"/reference/shinyApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Shiny app object — shinyApp","text":"","code":"shinyApp(   ui,   server,   onStart = NULL,   options = list(),   uiPattern = \"/\",   enableBookmarking = NULL )  shinyAppDir(appDir, options = list())  shinyAppFile(appFile, options = list())"},{"path":"/reference/shinyApp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Shiny app object — shinyApp","text":"ui UI definition app (example, call fluidPage() nested controls). bookmarking enabled (see enableBookmarking), must single argument function returns UI definition. server function three parameters: input, output, session. function called session ensuring app independent. onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. appDir Path directory contains Shiny app (.e. server.R file either ui.R www/index.html) appFile Path .R file containing Shiny application","code":""},{"path":"/reference/shinyApp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Shiny app object — shinyApp","text":"object represents app. Printing object passing runApp() run app.","code":""},{"path":"/reference/shinyApp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Shiny app object — shinyApp","text":"Normally function used R console, Shiny app object automatically passed print() function, runs app. called middle function, value passed print() app run. make app run, pass app object print() runApp().","code":""},{"path":"/reference/shinyApp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Shiny app object — shinyApp","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   options(device.ask.default = FALSE)    shinyApp(     ui = fluidPage(       numericInput(\"n\", \"n\", 1),       plotOutput(\"plot\")     ),     server = function(input, output) {       output$plot <- renderPlot( plot(head(cars, input$n)) )     }   )    shinyAppDir(system.file(\"examples/01_hello\", package=\"shiny\"))     # The object can be passed to runApp()   app <- shinyApp(     ui = fluidPage(       numericInput(\"n\", \"n\", 1),       plotOutput(\"plot\")     ),     server = function(input, output) {       output$plot <- renderPlot( plot(head(cars, input$n)) )     }   )    runApp(app) }"},{"path":"/reference/shinyAppTemplate.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Shiny application from a template — shinyAppTemplate","title":"Generate a Shiny application from a template — shinyAppTemplate","text":"function populates directory files Shiny application.","code":""},{"path":"/reference/shinyAppTemplate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Shiny application from a template — shinyAppTemplate","text":"","code":"shinyAppTemplate(path = NULL, examples = \"default\", dryrun = FALSE)"},{"path":"/reference/shinyAppTemplate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Shiny application from a template — shinyAppTemplate","text":"path Path create new shiny application template. examples Either one \"default\", \"ask\", \"\", combination \"app\", \"rdir\", \"module\", \"tests\". interactive session, \"default\" falls back \"ask\"; non-interactive session, \"default\" falls back \"\". \"ask\", function prompt user select template items added new app directory. \"\", template items added app directory. dryrun TRUE, actually write files; just print files written.","code":""},{"path":"/reference/shinyAppTemplate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a Shiny application from a template — shinyAppTemplate","text":"interactive R session, function , default, prompt user select components add application. Choices   option 1 selected, full example application including following files directories created:   notes files: app.R main application file. files R/ subdirectory automatically sourced application run. R/example.R R/example-module.R automatically sourced application run. first contains function lexical_sort(), second contains code module created moduleServer() function, used application. tests/ contains various tests application. may choose use remove . can executed runTests() function. tests/testthat.R test runner test files tests/testthat/ directory using shinytest2 package. tests/testthat/setup-shinytest2.R setup file source ./R folder testing environment. tests/testthat/test-examplemodule.R test application's module server function. tests/testthat/test-server.R test application's server code tests/testthat/test-shinytest2.R test uses shinytest2 package snapshot-based testing. tests/testthat/test-sort.R test supporting function R/ directory.","code":"1: All  2: app.R              : Main application file  3: R/example.R        : Helper file with R code  4: R/example-module.R : Example module  5: tests/testthat/    : Tests using the testthat and shinytest2 package appdir/  |- app.R  |- R  |   |- example-module.R  |   `- example.R  `- tests      |- testthat.R      `- testthat          |- setup-shinytest2.R          |- test-examplemodule.R          |- test-server.R          |- test-shinytest2.R          `- test-sort.R"},{"path":"/reference/shinyDeprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Print message for deprecated functions in Shiny — shinyDeprecated","title":"Print message for deprecated functions in Shiny — shinyDeprecated","text":"disable messages, use options(shiny.deprecation.messages=FALSE).","code":""},{"path":"/reference/shinyDeprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print message for deprecated functions in Shiny — shinyDeprecated","text":"","code":"shinyDeprecated(   version,   what,   with = NULL,   details = NULL,   type = c(\"deprecated\", \"superseded\") )"},{"path":"/reference/shinyDeprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print message for deprecated functions in Shiny — shinyDeprecated","text":"version Shiny version function deprecated Function possible arguments Possible function arguments used instead details Additional information added new line displayed message","code":""},{"path":"/reference/shinyOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set Shiny options — getShinyOption","title":"Get or set Shiny options — getShinyOption","text":"two mechanisms working options Shiny. One options() function, part base R, shinyOptions() function, Shiny package. reason two mechanisms legacy code scoping. options() function sets options globally, duration R process. getOption() function retrieves value option. shiny related options type prefixed \"shiny.\". shinyOptions() function sets value shiny option, unlike options(), always global scope; options may scoped globally, application, user session application, depending context. getShinyOption() function retrieves value shiny option. Currently, options set via shinyOptions internal use .","code":""},{"path":"/reference/shinyOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set Shiny options — getShinyOption","text":"","code":"getShinyOption(name, default = NULL)  shinyOptions(...)"},{"path":"/reference/shinyOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set Shiny options — getShinyOption","text":"name Name option get. default Value returned option currently set. ... Options set, form name = value.","code":""},{"path":"/reference/shinyOptions.html","id":"options-with-options-","dir":"Reference","previous_headings":"","what":"Options with options()","title":"Get or set Shiny options — getShinyOption","text":"shiny.autoreload (defaults FALSE) TRUE Shiny app launched, app directory continually monitored changes files extensions: r, htm, html, js, css, png, jpg, jpeg, gif. changes detected, connected Shiny sessions reloaded. allows fast feedback loops tweaking Shiny UI. Since monitoring changes expensive (simply poll last modified times), feature intended development. can customize file patterns Shiny monitor setting shiny.autoreload.pattern option. example, monitor ui.R: options(shiny.autoreload.pattern = glob2rx(\"ui.R\")) default polling interval 500 milliseconds. can change setting e.g. options(shiny.autoreload.interval = 2000) (every two seconds). shiny.deprecation.messages (defaults TRUE) controls whether messages deprecated functions Shiny printed. See shinyDeprecated() information. shiny.error (defaults NULL) can function called error occurs. example, options(shiny.error=recover) result debugger prompt error occurs. shiny.fullstacktrace (defaults FALSE) Controls whether \"pretty\" (FALSE) full stack traces (TRUE) dumped console errors occur Shiny app execution. Pretty stack traces attempt show user-supplied code, pruning always done 100% correctly. shiny.host (defaults \"127.0.0.1\") IP address Shiny listen . See runApp() information. shiny.jquery.version (defaults 3) major version jQuery use. Currently values 3 1 supported. 1, jQuery 1.12.4 used. 3, jQuery 3.6.0 used. shiny.json.digits (defaults (16)) Max number digits use converting numbers JSON format send client web browser. Use () specify significant digits. Use NA max precision. shiny.launch.browser (defaults interactive()) boolean controls default behavior app run. See runApp() information. shiny.mathjax.url (defaults \"https://mathjax.rstudio.com/latest/MathJax.js\") URL used load MathJax, via withMathJax(). shiny.mathjax.config (defaults \"config=TeX-AMS-MML_HTMLorMML\") querystring used load MathJax, via withMathJax(). shiny.maxRequestSize (defaults 5MB) number specifies maximum web request size, serves size limit file uploads. shiny.minified (defaults TRUE) default Whether include Shiny's JavaScript minified (shiny.min.js) un-minified (shiny.js) file. un-minified version larger, can helpful development debugging. shiny.port (defaults random open port) port number Shiny listen . See runApp() information. shiny.reactlog (defaults FALSE) TRUE, enable logging reactive events, can viewed later reactlogShow() function. incurs substantial performance penalty used production. shiny.sanitize.errors (defaults FALSE) TRUE, normal errors (.e. errors wrapped safeError) show app; simple generic error message printed instead (error stack trace printed console remain unchanged). want sanitize errors general, want particular error e get displayed user, set option TRUE use stop(safeError(e)) errors want user see. shiny.stacktraceoffset (defaults TRUE) TRUE, Shiny's printed stack traces display srcrefs one line usual location. arguably intuitive arrangement casual R users, name function appears next srcref defined, rather currently called . shiny.suppressMissingContextError (defaults FALSE) Normally, invoking reactive outside reactive context (isolate()) results error. TRUE, error cases. used debugging demonstrations reactivity console. shiny.testmode (defaults FALSE) TRUE, various features testing Shiny applications enabled. shiny.snapshotsortc (defaults FALSE) TRUE, test snapshot keys shinytest sorted consistently using C locale.  Snapshots retrieved shinytest2 always sort using C locale. shiny.trace (defaults FALSE) Print messages sent R server web browser client R console. useful debugging. Possible values \"send\" (print messages sent client), \"recv\" (print messages received server), TRUE (print messages), FALSE (default; print messages). shiny.autoload.r (defaults TRUE) TRUE, R/ shiny app automatically sourced. shiny.useragg (defaults TRUE) Set FALSE prevent PNG rendering via ragg package. See plotPNG() information. shiny.usecairo (defaults TRUE) Set FALSE prevent PNG rendering via Cairo package. See plotPNG() information. shiny.devmode (defaults NULL) Option enable Shiny Developer Mode. set, different default getOption(key) values returned. See devmode() details.","code":""},{"path":"/reference/shinyOptions.html","id":"scoping-for-shinyoptions-","dir":"Reference","previous_headings":"","what":"Scoping for shinyOptions()","title":"Get or set Shiny options — getShinyOption","text":"three levels scoping shinyOptions(): global, application, session. global option set available default. calls shinyOptions() getShinyOption() outside app access global option set. Shiny application run runApp(), global option set duplicated new option set available application level. options set global.R, app.R, ui.R, server.R (outside server function), application-level options modified. time user session started, application-level option set duplicated, session. options set inside server function, scoped session.","code":""},{"path":"/reference/shinyOptions.html","id":"options-with-shinyoptions-","dir":"Reference","previous_headings":"","what":"Options with shinyOptions()","title":"Get or set Shiny options — getShinyOption","text":"number global options affect Shiny's behavior. can set globally options() locally (single app) shinyOptions(). cache caching object used renderCachedPlot(). specified, cachem::cache_mem() used.","code":""},{"path":"/reference/shinyServer.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Server Functionality — shinyServer","title":"Define Server Functionality — shinyServer","text":"Defines server-side logic Shiny application. generally involves creating functions map user inputs various kinds output. older versions Shiny, necessary call shinyServer() server.R file, longer required Shiny 0.10. Now server.R file may simply return appropriate server function (last expression code), without calling shinyServer(). Call shinyServer application's server.R file, passing \"server function\" provides server-side logic application. server function called client (web browser) first loads Shiny application's page. must take input output parameter. return value ignored. also takes optional session parameter, used greater control needed. See tutorial write server function.","code":""},{"path":"/reference/shinyServer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Server Functionality — shinyServer","text":"","code":"shinyServer(func)"},{"path":"/reference/shinyServer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Server Functionality — shinyServer","text":"func server function application. See details section information.","code":""},{"path":"/reference/shinyServer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Server Functionality — shinyServer","text":"","code":"if (FALSE) { # A very simple Shiny app that takes a message from the user # and outputs an uppercase version of it. shinyServer(function(input, output, session) {   output$uppercase <- renderText({     toupper(input$message)   }) })   # It is also possible for a server.R file to simply return the function, # without calling shinyServer(). # For example, the server.R file could contain just the following: function(input, output, session) {   output$uppercase <- renderText({     toupper(input$message)   }) } }"},{"path":"/reference/shinyUI.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Shiny UI handler — shinyUI","title":"Create a Shiny UI handler — shinyUI","text":"Historically function used ui.R files register user interface Shiny. longer required Shiny 0.10; simply ensure last expression returned ui.R user interface. function kept backwards compatibility older applications. returns value passed .","code":""},{"path":"/reference/shinyUI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Shiny UI handler — shinyUI","text":"","code":"shinyUI(ui)"},{"path":"/reference/shinyUI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Shiny UI handler — shinyUI","text":"ui user interface definition","code":""},{"path":"/reference/shinyUI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Shiny UI handler — shinyUI","text":"user interface definition, without modifications side effects.","code":""},{"path":"/reference/showBookmarkUrlModal.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a modal dialog for bookmarking — showBookmarkUrlModal","title":"Display a modal dialog for bookmarking — showBookmarkUrlModal","text":"wrapper function urlModal() automatically called application bookmarked onBookmark() callback set. displays modal dialog bookmark URL, along subtitle appropriate type bookmarking used (\"url\" \"server\").","code":""},{"path":"/reference/showBookmarkUrlModal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a modal dialog for bookmarking — showBookmarkUrlModal","text":"","code":"showBookmarkUrlModal(url)"},{"path":"/reference/showBookmarkUrlModal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a modal dialog for bookmarking — showBookmarkUrlModal","text":"url URL show modal dialog.","code":""},{"path":"/reference/showModal.html","id":null,"dir":"Reference","previous_headings":"","what":"Show or remove a modal dialog — showModal","title":"Show or remove a modal dialog — showModal","text":"causes modal dialog displayed client browser, typically used modalDialog().","code":""},{"path":"/reference/showModal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show or remove a modal dialog — showModal","text":"","code":"showModal(ui, session = getDefaultReactiveDomain())  removeModal(session = getDefaultReactiveDomain())"},{"path":"/reference/showModal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show or remove a modal dialog — showModal","text":"ui UI content show modal. session session object passed function given shinyServer.","code":""},{"path":[]},{"path":"/reference/showNotification.html","id":null,"dir":"Reference","previous_headings":"","what":"Show or remove a notification — showNotification","title":"Show or remove a notification — showNotification","text":"functions show remove notifications Shiny application.","code":""},{"path":"/reference/showNotification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show or remove a notification — showNotification","text":"","code":"showNotification(   ui,   action = NULL,   duration = 5,   closeButton = TRUE,   id = NULL,   type = c(\"default\", \"message\", \"warning\", \"error\"),   session = getDefaultReactiveDomain() )  removeNotification(id, session = getDefaultReactiveDomain())"},{"path":"/reference/showNotification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show or remove a notification — showNotification","text":"ui Content message. action Message content represents action. example, link user can click . separate ui customized layouts can handle main notification content separately action content. duration Number seconds display message disappears. Use NULL make message automatically disappear. closeButton TRUE, display button make notification disappear clicked. FALSE display. id unique identifier notification. id optional showNotification(): Shiny automatically create one needed. supply , Shiny update existing notification exists, otherwise create new one. id required removeNotification(). type string controls color notification. One \"default\" (gray), \"message\" (blue), \"warning\" (yellow), \"error\" (red). session Session object send notification .","code":""},{"path":"/reference/showNotification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show or remove a notification — showNotification","text":"ID notification.","code":""},{"path":"/reference/showNotification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show or remove a notification — showNotification","text":"","code":"## Only run examples in interactive R sessions if (interactive()) { # Show a message when button is clicked shinyApp(   ui = fluidPage(     actionButton(\"show\", \"Show\")   ),   server = function(input, output) {     observeEvent(input$show, {       showNotification(\"Message text\",         action = a(href = \"javascript:location.reload();\", \"Reload page\")       )     })   } )  # App with show and remove buttons shinyApp(   ui = fluidPage(     actionButton(\"show\", \"Show\"),     actionButton(\"remove\", \"Remove\")   ),   server = function(input, output) {     # A queue of notification IDs     ids <- character(0)     # A counter     n <- 0      observeEvent(input$show, {       # Save the ID for removal later       id <- showNotification(paste(\"Message\", n), duration = NULL)       ids <<- c(ids, id)       n <<- n + 1     })      observeEvent(input$remove, {       if (length(ids) > 0)         removeNotification(ids[1])       ids <<- ids[-1]     })   } ) }"},{"path":"/reference/showTab.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamically hide/show a tabPanel — showTab","title":"Dynamically hide/show a tabPanel — showTab","text":"Dynamically hide show tabPanel() (navbarMenu())existing tabsetPanel(), navlistPanel() navbarPage().","code":""},{"path":"/reference/showTab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamically hide/show a tabPanel — showTab","text":"","code":"showTab(inputId, target, select = FALSE, session = getDefaultReactiveDomain())  hideTab(inputId, target, session = getDefaultReactiveDomain())"},{"path":"/reference/showTab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamically hide/show a tabPanel — showTab","text":"inputId id tabsetPanel (navlistPanel navbarPage) find target. target value tabPanel hidden/shown. See Details want hide/show entire navbarMenu instead. select target selected upon shown? session shiny session within call function.","code":""},{"path":"/reference/showTab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamically hide/show a tabPanel — showTab","text":"navbarPage, can hide/show conventional tabPanels (whether top level nested inside navbarMenu), well entire navbarMenu(). latter case, target menuName gave navbarMenu first created (default, equal value title argument).","code":""},{"path":[]},{"path":"/reference/showTab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamically hide/show a tabPanel — showTab","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {  ui <- navbarPage(\"Navbar page\", id = \"tabs\",   tabPanel(\"Home\",     actionButton(\"hideTab\", \"Hide 'Foo' tab\"),     actionButton(\"showTab\", \"Show 'Foo' tab\"),     actionButton(\"hideMenu\", \"Hide 'More' navbarMenu\"),     actionButton(\"showMenu\", \"Show 'More' navbarMenu\")   ),   tabPanel(\"Foo\", \"This is the foo tab\"),   tabPanel(\"Bar\", \"This is the bar tab\"),   navbarMenu(\"More\",     tabPanel(\"Table\", \"Table page\"),     tabPanel(\"About\", \"About page\"),     \"------\",     \"Even more!\",     tabPanel(\"Email\", \"Email page\")   ) )  server <- function(input, output, session) {   observeEvent(input$hideTab, {     hideTab(inputId = \"tabs\", target = \"Foo\")   })    observeEvent(input$showTab, {     showTab(inputId = \"tabs\", target = \"Foo\")   })    observeEvent(input$hideMenu, {     hideTab(inputId = \"tabs\", target = \"More\")   })    observeEvent(input$showMenu, {     showTab(inputId = \"tabs\", target = \"More\")   }) }  shinyApp(ui, server) }"},{"path":"/reference/sidebarLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout a sidebar and main area — sidebarLayout","title":"Layout a sidebar and main area — sidebarLayout","text":"Create layout (sidebarLayout()) sidebar (sidebarPanel()) main area (mainPanel()). sidebar displayed distinct background color typically contains input controls. main area occupies 2/3 horizontal width typically contains outputs.","code":""},{"path":"/reference/sidebarLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout a sidebar and main area — sidebarLayout","text":"","code":"sidebarLayout(   sidebarPanel,   mainPanel,   position = c(\"left\", \"right\"),   fluid = TRUE )  sidebarPanel(..., width = 4)  mainPanel(..., width = 8)"},{"path":"/reference/sidebarLayout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout a sidebar and main area — sidebarLayout","text":"sidebarPanel sidebarPanel() containing input controls. mainPanel mainPanel() containing outputs. position position sidebar relative main area (\"left\" \"right\"). fluid TRUE use fluid layout; FALSE use fixed layout. ... Output elements include sidebar/main panel. width width sidebar main panel. default, sidebar takes 1/3 width, main panel 2/3. total width must 12 less.","code":""},{"path":[]},{"path":"/reference/sidebarLayout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layout a sidebar and main area — sidebarLayout","text":"","code":"## Only run examples in interactive R sessions if (interactive()) { options(device.ask.default = FALSE)  # Define UI ui <- fluidPage(    # Application title   titlePanel(\"Hello Shiny!\"),    sidebarLayout(      # Sidebar with a slider input     sidebarPanel(       sliderInput(\"obs\",                   \"Number of observations:\",                   min = 0,                   max = 1000,                   value = 500)     ),      # Show a plot of the generated distribution     mainPanel(       plotOutput(\"distPlot\")     )   ) )  # Server logic server <- function(input, output) {   output$distPlot <- renderPlot({     hist(rnorm(input$obs))   }) }  # Complete app with UI and server components shinyApp(ui, server) }"},{"path":"/reference/sizeGrowthRatio.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a sizing function that grows at a given ratio — sizeGrowthRatio","title":"Create a sizing function that grows at a given ratio — sizeGrowthRatio","text":"Returns function takes two-element vector representing input width height, returns two-element vector width height. possible widths base width times growthRate integer power. example, base width 500 growth rate 1.25, possible widths include 320, 400, 500, 625, 782, , smaller larger. Sizes rounded next pixel. Heights computed way widths.","code":""},{"path":"/reference/sizeGrowthRatio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a sizing function that grows at a given ratio — sizeGrowthRatio","text":"","code":"sizeGrowthRatio(width = 400, height = 400, growthRate = 1.2)"},{"path":"/reference/sizeGrowthRatio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a sizing function that grows at a given ratio — sizeGrowthRatio","text":"width, height Base width height. growthRate Growth rate multiplier.","code":""},{"path":[]},{"path":"/reference/sizeGrowthRatio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a sizing function that grows at a given ratio — sizeGrowthRatio","text":"","code":"f <- sizeGrowthRatio(500, 500, 1.25) f(c(400, 400)) #> [1] 500 500 f(c(500, 500)) #> [1] 500 500 f(c(530, 550)) #> [1] 625 625 f(c(625, 700)) #> [1] 625 782"},{"path":"/reference/sliderInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Slider Input Widget — sliderInput","title":"Slider Input Widget — sliderInput","text":"Constructs slider widget select number, date, date-time range.","code":""},{"path":"/reference/sliderInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slider Input Widget — sliderInput","text":"","code":"sliderInput(   inputId,   label,   min,   max,   value,   step = NULL,   round = FALSE,   ticks = TRUE,   animate = FALSE,   width = NULL,   sep = \",\",   pre = NULL,   post = NULL,   timeFormat = NULL,   timezone = NULL,   dragRange = TRUE )  animationOptions(   interval = 1000,   loop = FALSE,   playButton = NULL,   pauseButton = NULL )"},{"path":"/reference/sliderInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slider Input Widget — sliderInput","text":"inputId input slot used access value. label Display label control, NULL label. min, max minimum maximum values (inclusive) can selected. value initial value slider, either number, date (class Date), date-time (class POSIXt). length one vector create regular slider; length two vector create double-ended range slider. Must lie min max. step Specifies interval selectable value slider. Either NULL, default, uses heuristic determine step size single number. values dates, step days; values date-times, step seconds. round TRUE round values nearest integer; FALSE rounding desired; integer round number digits (example, 1 round nearest 10, -2 round nearest .01). rounding applied snapping nearest step. ticks FALSE hide tick marks, TRUE show according simple heuristics. animate TRUE show simple animation controls default settings; FALSE ; custom settings list, created using animationOptions(). width width input, e.g. '400px', '100%'; see validateCssUnit(). sep Separator thousands places numbers. pre prefix string put front value. post suffix string put value. timeFormat used values Date POSIXt objects. time format string, passed Javascript strftime library. See https://github.com/samsonjs/strftime details. allowed format specifications similar, identical, R's base::strftime() function. Dates, default \"%F\" (like \"2015-07-01\"), POSIXt, default \"%F %T\" (like \"2015-07-01 15:32:10\"). timezone used values POSIXt objects. string specifying time zone offset displayed times, format \"+HHMM\" \"-HHMM\". NULL (default), times displayed browser's time zone. value \"+0000\" result UTC time. dragRange option used range slider (two values). TRUE (default), range can dragged. words, min max can dragged together. FALSE, range dragged. interval interval, milliseconds, animation step. loop TRUE automatically restart animation reaches end. playButton Specifies appearance play button. Valid values one-element character vector (simple text label), HTML tag list tags (using tag() friends), raw HTML (using HTML()). pauseButton Similar playButton, pause button.","code":""},{"path":"/reference/sliderInput.html","id":"server-value","dir":"Reference","previous_headings":"","what":"Server value","title":"Slider Input Widget — sliderInput","text":"number, date, date-time (depending class value), case slider range, vector two numbers/dates/date-times.","code":""},{"path":[]},{"path":"/reference/sliderInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slider Input Widget — sliderInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) { options(device.ask.default = FALSE)  ui <- fluidPage(   sliderInput(\"obs\", \"Number of observations:\",     min = 0, max = 1000, value = 500   ),   plotOutput(\"distPlot\") )  # Server logic server <- function(input, output) {   output$distPlot <- renderPlot({     hist(rnorm(input$obs))   }) }  # Complete app with UI and server components shinyApp(ui, server) }"},{"path":"/reference/snapshotExclude.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark an output to be excluded from test snapshots — snapshotExclude","title":"Mark an output to be excluded from test snapshots — snapshotExclude","text":"Mark output excluded test snapshots","code":""},{"path":"/reference/snapshotExclude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark an output to be excluded from test snapshots — snapshotExclude","text":"","code":"snapshotExclude(x)"},{"path":"/reference/snapshotExclude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark an output to be excluded from test snapshots — snapshotExclude","text":"x reactive assigned output.","code":""},{"path":"/reference/snapshotPreprocessInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a function for preprocessing an input before taking a test snapshot — snapshotPreprocessInput","title":"Add a function for preprocessing an input before taking a test snapshot — snapshotPreprocessInput","text":"Add function preprocessing input taking test snapshot","code":""},{"path":"/reference/snapshotPreprocessInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a function for preprocessing an input before taking a test snapshot — snapshotPreprocessInput","text":"","code":"snapshotPreprocessInput(inputId, fun, session = getDefaultReactiveDomain())"},{"path":"/reference/snapshotPreprocessInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a function for preprocessing an input before taking a test snapshot — snapshotPreprocessInput","text":"inputId Name input value. fun function takes input value returns modified value. returned value used test snapshot. session Shiny session object.","code":""},{"path":"/reference/snapshotPreprocessOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a function for preprocessing an output before taking a test snapshot — snapshotPreprocessOutput","title":"Add a function for preprocessing an output before taking a test snapshot — snapshotPreprocessOutput","text":"Add function preprocessing output taking test snapshot","code":""},{"path":"/reference/snapshotPreprocessOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a function for preprocessing an output before taking a test snapshot — snapshotPreprocessOutput","text":"","code":"snapshotPreprocessOutput(x, fun)"},{"path":"/reference/snapshotPreprocessOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a function for preprocessing an output before taking a test snapshot — snapshotPreprocessOutput","text":"x reactive assigned output. fun function takes output value input returns modified value. returned value used test snapshot.","code":""},{"path":"/reference/splitLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"Split layout — splitLayout","title":"Split layout — splitLayout","text":"Lays elements horizontally, dividing available horizontal space equal parts (default).","code":""},{"path":"/reference/splitLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split layout — splitLayout","text":"","code":"splitLayout(..., cellWidths = NULL, cellArgs = list())"},{"path":"/reference/splitLayout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split layout — splitLayout","text":"... Unnamed arguments become child elements layout. Named arguments become HTML attributes outermost tag. cellWidths Character numeric vector indicating widths individual cells. Recycling used needed. Character values interpreted CSS lengths (see validateCssUnit()), numeric values pixels. cellArgs additional attributes used cell layout.","code":""},{"path":[]},{"path":"/reference/splitLayout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split layout — splitLayout","text":"","code":"## Only run examples in interactive R sessions if (interactive()) { options(device.ask.default = FALSE)  # Server code used for all examples server <- function(input, output) {   output$plot1 <- renderPlot(plot(cars))   output$plot2 <- renderPlot(plot(pressure))   output$plot3 <- renderPlot(plot(AirPassengers)) }  # Equal sizing ui <- splitLayout(   plotOutput(\"plot1\"),   plotOutput(\"plot2\") ) shinyApp(ui, server)  # Custom widths ui <- splitLayout(cellWidths = c(\"25%\", \"75%\"),   plotOutput(\"plot1\"),   plotOutput(\"plot2\") ) shinyApp(ui, server)  # All cells at 300 pixels wide, with cell padding # and a border around everything ui <- splitLayout(   style = \"border: 1px solid silver;\",   cellWidths = 300,   cellArgs = list(style = \"padding: 6px\"),   plotOutput(\"plot1\"),   plotOutput(\"plot2\"),   plotOutput(\"plot3\") ) shinyApp(ui, server) }"},{"path":"/reference/stacktrace.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack trace manipulation functions — stacktrace","title":"Stack trace manipulation functions — stacktrace","text":"Advanced (borderline internal) functions capturing, printing, manipulating stack traces.","code":""},{"path":"/reference/stacktrace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack trace manipulation functions — stacktrace","text":"","code":"captureStackTraces(expr)  withLogErrors(   expr,   full = get_devmode_option(\"shiny.fullstacktrace\", FALSE),   offset = getOption(\"shiny.stacktraceoffset\", TRUE) )  printError(   cond,   full = get_devmode_option(\"shiny.fullstacktrace\", FALSE),   offset = getOption(\"shiny.stacktraceoffset\", TRUE) )  printStackTrace(   cond,   full = get_devmode_option(\"shiny.fullstacktrace\", FALSE),   offset = getOption(\"shiny.stacktraceoffset\", TRUE) )  conditionStackTrace(cond)  conditionStackTrace(cond) <- value  ..stacktraceon..(expr)  ..stacktraceoff..(expr)"},{"path":"/reference/stacktrace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack trace manipulation functions — stacktrace","text":"expr expression wrap. full TRUE, every element sys.calls() included stack trace. default (FALSE), calls Shiny deems uninteresting hidden. offset TRUE (default), srcrefs reassigned calls originated , destinations calls. used stack traces languages, feels intuitive, definition function indicated call location specified srcref match . FALSE, srcrefs left alone (traditional R treatment srcref callsite). cond condition may previously annotated captureStackTraces (withLogErrors). value stack trace value assign condition.","code":""},{"path":"/reference/stacktrace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stack trace manipulation functions — stacktrace","text":"printError printStackTrace return invisible(). functions pass results expr.","code":""},{"path":"/reference/stacktrace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stack trace manipulation functions — stacktrace","text":"captureStackTraces runs given expr uncaught errors occur, annotates stack trace info use printError printStackTrace. necessary use captureStackTraces around expression withLogErrors, latter includes call former. Note expr contains calls (either directly indirectly) try, tryCatch error handler, stack traces therein captured unless another captureStackTraces call inserted interior try tryCatch. calls catch error prevent traveling condition handler installed captureStackTraces. withLogErrors captures stack traces logs errors occur expr, allow errors propagate beyond point (.e. catch error). caveats apply captureStackTraces regard try/tryCatch apply withLogErrors. printError prints error stack trace () using warning(immediate.=TRUE). printStackTrace prints stack trace . conditionStackTrace conditionStackTrace<- accessor functions getting/setting stack traces conditions. two functions ..stacktraceon.. ..stacktraceoff.. runtime behavior normal execution; exist create artifacts stack trace (sys.call()) instruct stack trace pretty printer parts stack trace interesting . initial state 1 walk outermost call inwards. ..stacktraceoff.. decrements state one, ..stacktraceon.. increments state one. stack trace frame whose value less 1 hidden, finally, ..stacktraceon.. ..stacktraceoff.. calls hidden .","code":""},{"path":"/reference/stacktrace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack trace manipulation functions — stacktrace","text":"","code":"# Keeps tryCatch and withVisible related calls off the # pretty-printed stack trace  visibleFunction1 <- function() {   stop(\"Kaboom!\") }  visibleFunction2 <- function() {   visibleFunction1() }  hiddenFunction <- function(expr) {   expr }  # An example without ..stacktraceon/off.. manipulation. # The outer \"try\" is just to prevent example() from stopping. try({   # The withLogErrors call ensures that stack traces are captured   # and that errors that bubble up are logged using warning().   withLogErrors({     # tryCatch and withVisible are just here to add some noise to     # the stack trace.     tryCatch(       withVisible({         hiddenFunction(visibleFunction2())       })     )   }) }) #> Warning: Error in visibleFunction1: Kaboom! #> shiny devmode - Turning on full stack trace. To disable, call `options(shiny.fullstacktrace = FALSE)` #> This message is displayed once every 8 hours. #> Error in visibleFunction1() : Kaboom!  # Now the same example, but with ..stacktraceon/off.. to hide some # of the less-interesting bits (tryCatch and withVisible). ..stacktraceoff..({   try({     withLogErrors({       tryCatch(         withVisible(           hiddenFunction(             ..stacktraceon..(visibleFunction2())           )         )       )     })   }) }) #> Warning: Error in visibleFunction1: Kaboom! #> Error in visibleFunction1() : Kaboom!"},{"path":"/reference/stopApp.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop the currently running Shiny app — stopApp","title":"Stop the currently running Shiny app — stopApp","text":"Stops currently running Shiny app, returning control caller runApp().","code":""},{"path":"/reference/stopApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop the currently running Shiny app — stopApp","text":"","code":"stopApp(returnValue = invisible())"},{"path":"/reference/stopApp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop the currently running Shiny app — stopApp","text":"returnValue value returned runApp().","code":""},{"path":"/reference/submitButton.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a submit button — submitButton","title":"Create a submit button — submitButton","text":"Create submit button app. Apps include submit button automatically update outputs inputs change, rather wait user explicitly clicks submit button. use submitButton generally discouraged favor versatile actionButton() (see details ).","code":""},{"path":"/reference/submitButton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a submit button — submitButton","text":"","code":"submitButton(text = \"Apply Changes\", icon = NULL, width = NULL)"},{"path":"/reference/submitButton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a submit button — submitButton","text":"text Button caption icon Optional icon() appear button width width button, e.g. '400px', '100%'; see validateCssUnit().","code":""},{"path":"/reference/submitButton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a submit button — submitButton","text":"submit button can added UI definition.","code":""},{"path":"/reference/submitButton.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a submit button — submitButton","text":"Submit buttons unusual Shiny inputs, recommend using actionButton() instead submitButton want delay reaction. See article information (including demo \"translate\" code using submitButton code using actionButton). essence, presence submit button stops inputs sending values automatically server. means, instance, two submit buttons app, clicking either one cause inputs app send values server. probably want, submit button unwieldy simplest apps. problems submit buttons: example, dynamically created submit buttons (example, renderUI() insertUI()) work.","code":""},{"path":[]},{"path":"/reference/submitButton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a submit button — submitButton","text":"","code":"if (interactive()) {  shinyApp(   ui = basicPage(     numericInput(\"num\", label = \"Make changes\", value = 1),     submitButton(\"Update View\", icon(\"refresh\")),     helpText(\"When you click the button above, you should see\",              \"the output below update to reflect the value you\",              \"entered at the top:\"),     verbatimTextOutput(\"value\")   ),   server = function(input, output) {      # submit buttons do not have a value of their own,     # they control when the app accesses values of other widgets.     # input$num is the value of the number widget.     output$value <- renderPrint({ input$num })   } ) }"},{"path":"/reference/tabPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tab panel — tabPanel","title":"Create a tab panel — tabPanel","text":"Create tab panel","code":""},{"path":"/reference/tabPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tab panel — tabPanel","text":"","code":"tabPanel(title, ..., value = title, icon = NULL)  tabPanelBody(value, ..., icon = NULL)"},{"path":"/reference/tabPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tab panel — tabPanel","text":"title Display title tab ... UI elements include within tab value value sent tabsetPanel reports tab selected. omitted tabsetPanel id, title used. icon Optional icon appear tab. attribute valid using tabPanel within navbarPage().","code":""},{"path":"/reference/tabPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tab panel — tabPanel","text":"tab can passed tabsetPanel()","code":""},{"path":"/reference/tabPanel.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create a tab panel — tabPanel","text":"tabPanel(): Create tab panel can included within tabsetPanel() navbarPage(). tabPanelBody(): Create tab panel drops title argument. function used within tabsetPanel(type = \"hidden\"). See tabsetPanel() example usage.","code":""},{"path":[]},{"path":"/reference/tabPanel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tab panel — tabPanel","text":"","code":"# Show a tabset that includes a plot, summary, and # table view of the generated distribution mainPanel(   tabsetPanel(     tabPanel(\"Plot\", plotOutput(\"plot\")),     tabPanel(\"Summary\", verbatimTextOutput(\"summary\")),     tabPanel(\"Table\", tableOutput(\"table\"))   ) ) #> <div class=\"col-sm-8\" role=\"main\"> #>   <div class=\"tabbable\"> #>     <ul class=\"nav nav-tabs\" data-tabsetid=\"5104\"> #>       <li class=\"active\"> #>         <a href=\"#tab-5104-1\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Plot\">Plot<\/a> #>       <\/li> #>       <li> #>         <a href=\"#tab-5104-2\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Summary\">Summary<\/a> #>       <\/li> #>       <li> #>         <a href=\"#tab-5104-3\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Table\">Table<\/a> #>       <\/li> #>     <\/ul> #>     <div class=\"tab-content\" data-tabsetid=\"5104\"> #>       <div class=\"tab-pane active\" data-value=\"Plot\" id=\"tab-5104-1\"> #>         <div class=\"shiny-plot-output html-fill-item\" id=\"plot\" style=\"width:100%;height:400px;\"><\/div> #>       <\/div> #>       <div class=\"tab-pane\" data-value=\"Summary\" id=\"tab-5104-2\"> #>         <pre class=\"shiny-text-output noplaceholder\" id=\"summary\"><\/pre> #>       <\/div> #>       <div class=\"tab-pane\" data-value=\"Table\" id=\"tab-5104-3\"> #>         <div id=\"table\" class=\"shiny-html-output\"><\/div> #>       <\/div> #>     <\/div> #>   <\/div> #> <\/div>"},{"path":"/reference/tabsetPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tabset panel — tabsetPanel","title":"Create a tabset panel — tabsetPanel","text":"Create tabset contains tabPanel() elements. Tabsets useful dividing output multiple independently viewable sections.","code":""},{"path":"/reference/tabsetPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tabset panel — tabsetPanel","text":"","code":"tabsetPanel(   ...,   id = NULL,   selected = NULL,   type = c(\"tabs\", \"pills\", \"hidden\"),   header = NULL,   footer = NULL )"},{"path":"/reference/tabsetPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tabset panel — tabsetPanel","text":"... tabPanel() elements include tabset id provided, can use input$id server logic determine current tabs active. value correspond value argument passed tabPanel(). selected value (, none supplied, title) tab selected default. NULL, first tab selected. type \"tabs\" Standard tab look \"pills\" Selected tabs use background fill color \"hidden\" Hides selectable tabs. Use type = \"hidden\" conjunction tabPanelBody() updateTabsetPanel() control active tab via input controls. (See example ) header Tag list tags display common header tabPanels. footer Tag list tags display common footer tabPanels","code":""},{"path":"/reference/tabsetPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tabset panel — tabsetPanel","text":"tabset can passed mainPanel()","code":""},{"path":[]},{"path":"/reference/tabsetPanel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tabset panel — tabsetPanel","text":"","code":"# Show a tabset that includes a plot, summary, and # table view of the generated distribution mainPanel(   tabsetPanel(     tabPanel(\"Plot\", plotOutput(\"plot\")),     tabPanel(\"Summary\", verbatimTextOutput(\"summary\")),     tabPanel(\"Table\", tableOutput(\"table\"))   ) ) #> <div class=\"col-sm-8\" role=\"main\"> #>   <div class=\"tabbable\"> #>     <ul class=\"nav nav-tabs\" data-tabsetid=\"9151\"> #>       <li class=\"active\"> #>         <a href=\"#tab-9151-1\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Plot\">Plot<\/a> #>       <\/li> #>       <li> #>         <a href=\"#tab-9151-2\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Summary\">Summary<\/a> #>       <\/li> #>       <li> #>         <a href=\"#tab-9151-3\" data-toggle=\"tab\" data-bs-toggle=\"tab\" data-value=\"Table\">Table<\/a> #>       <\/li> #>     <\/ul> #>     <div class=\"tab-content\" data-tabsetid=\"9151\"> #>       <div class=\"tab-pane active\" data-value=\"Plot\" id=\"tab-9151-1\"> #>         <div class=\"shiny-plot-output html-fill-item\" id=\"plot\" style=\"width:100%;height:400px;\"><\/div> #>       <\/div> #>       <div class=\"tab-pane\" data-value=\"Summary\" id=\"tab-9151-2\"> #>         <pre class=\"shiny-text-output noplaceholder\" id=\"summary\"><\/pre> #>       <\/div> #>       <div class=\"tab-pane\" data-value=\"Table\" id=\"tab-9151-3\"> #>         <div id=\"table\" class=\"shiny-html-output\"><\/div> #>       <\/div> #>     <\/div> #>   <\/div> #> <\/div>  ui <- fluidPage(   sidebarLayout(     sidebarPanel(       radioButtons(\"controller\", \"Controller\", 1:3, 1)     ),     mainPanel(       tabsetPanel(         id = \"hidden_tabs\",         # Hide the tab values.         # Can only switch tabs by using `updateTabsetPanel()`         type = \"hidden\",         tabPanelBody(\"panel1\", \"Panel 1 content\"),         tabPanelBody(\"panel2\", \"Panel 2 content\"),         tabPanelBody(\"panel3\", \"Panel 3 content\")       )     )   ) )  server <- function(input, output, session) {   observeEvent(input$controller, {     updateTabsetPanel(session, \"hidden_tabs\", selected = paste0(\"panel\", input$controller))   }) }  if (interactive()) {   shinyApp(ui, server) }"},{"path":"/reference/testServer.html","id":null,"dir":"Reference","previous_headings":"","what":"Reactive testing for Shiny server functions and modules — testServer","title":"Reactive testing for Shiny server functions and modules — testServer","text":"way test reactive interactions Shiny applications. Reactive interactions defined server function applications modules.","code":""},{"path":"/reference/testServer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reactive testing for Shiny server functions and modules — testServer","text":"","code":"testServer(app = NULL, expr, args = list(), session = MockShinySession$new())"},{"path":"/reference/testServer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reactive testing for Shiny server functions and modules — testServer","text":"app server function (.e. function input, output, session), module function (.e. function first argument id calls moduleServer(). can also provide app, path app, anything .shiny.appobj() can handle. expr Test code containing expectations. objects inside server function environment made available environment test expression (done using data mask rlang::eval_tidy()). includes parameters server function (e.g. input, output, session), along values created inside server function. args Additional arguments pass module function. app module, id argument provided, one generated supplied automatically. session MockShinySession object use reactive domain. session object used domain invocation server module test evaluation expr.","code":""},{"path":"/reference/testServer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reactive testing for Shiny server functions and modules — testServer","text":"","code":"# Testing a server function  ---------------------------------------------- server <- function(input, output, session) {   x <- reactive(input$a * input$b) }  testServer(server, {   session$setInputs(a = 2, b = 3)   stopifnot(x() == 6) }) #> The value of x is 30   # Testing a module -------------------------------------------------------- myModuleServer <- function(id, multiplier = 2, prefix = \"I am \") {   moduleServer(id, function(input, output, session) {     myreactive <- reactive({       input$x * multiplier     })     output$txt <- renderText({       paste0(prefix, myreactive())     })   }) }  testServer(myModuleServer, args = list(multiplier = 2), {   session$setInputs(x = 1)   # You're also free to use third-party   # testing packages like testthat:   #   expect_equal(myreactive(), 2)   stopifnot(myreactive() == 2)   stopifnot(output$txt == \"I am 2\")    session$setInputs(x = 2)   stopifnot(myreactive() == 4)   stopifnot(output$txt == \"I am 4\")   # Any additional arguments, below, are passed along to the module. })"},{"path":"/reference/textAreaInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a textarea input control — textAreaInput","title":"Create a textarea input control — textAreaInput","text":"Create textarea input control entry unstructured text values.","code":""},{"path":"/reference/textAreaInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a textarea input control — textAreaInput","text":"","code":"textAreaInput(   inputId,   label,   value = \"\",   width = NULL,   height = NULL,   cols = NULL,   rows = NULL,   placeholder = NULL,   resize = NULL )"},{"path":"/reference/textAreaInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a textarea input control — textAreaInput","text":"inputId input slot used access value. label Display label control, NULL label. value Initial value. width width input, e.g. '400px', '100%'; see validateCssUnit(). height height input, e.g. '400px', '100%'; see validateCssUnit(). cols Value visible character columns input, e.g. 80. argument take effect CSS width rule defined element; rule come width argument function containing page layout fluidPage(). rows value visible character rows input, e.g. 6. height argument specified, height take precedence browser's rendering. placeholder character string giving user hint can entered control. Internet Explorer 8 9 support option. resize directions textarea box can resized. Can one \"\", \"none\", \"vertical\", \"horizontal\". default, NULL, use client browser's default setting resizing textareas.","code":""},{"path":"/reference/textAreaInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a textarea input control — textAreaInput","text":"textarea input control can added UI definition.","code":""},{"path":"/reference/textAreaInput.html","id":"server-value","dir":"Reference","previous_headings":"","what":"Server value","title":"Create a textarea input control — textAreaInput","text":"character string text input. default value \"\" unless value provided.","code":""},{"path":[]},{"path":"/reference/textAreaInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a textarea input control — textAreaInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   textAreaInput(\"caption\", \"Caption\", \"Data Summary\", width = \"1000px\"),   verbatimTextOutput(\"value\") ) server <- function(input, output) {   output$value <- renderText({ input$caption }) } shinyApp(ui, server)  }"},{"path":"/reference/textInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a text input control — textInput","title":"Create a text input control — textInput","text":"Create input control entry unstructured text values","code":""},{"path":"/reference/textInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a text input control — textInput","text":"","code":"textInput(inputId, label, value = \"\", width = NULL, placeholder = NULL)"},{"path":"/reference/textInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a text input control — textInput","text":"inputId input slot used access value. label Display label control, NULL label. value Initial value. width width input, e.g. '400px', '100%'; see validateCssUnit(). placeholder character string giving user hint can entered control. Internet Explorer 8 9 support option.","code":""},{"path":"/reference/textInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a text input control — textInput","text":"text input control can added UI definition.","code":""},{"path":"/reference/textInput.html","id":"server-value","dir":"Reference","previous_headings":"","what":"Server value","title":"Create a text input control — textInput","text":"character string text input. default value \"\" unless value provided.","code":""},{"path":[]},{"path":"/reference/textInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a text input control — textInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   textInput(\"caption\", \"Caption\", \"Data Summary\"),   verbatimTextOutput(\"value\") ) server <- function(input, output) {   output$value <- renderText({ input$caption }) } shinyApp(ui, server) }"},{"path":"/reference/textOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a text output element — textOutput","title":"Create a text output element — textOutput","text":"Render reactive output variable text within application page. textOutput() usually paired renderText() puts regular text <div> <span>; verbatimTextOutput() usually paired renderPrint() provides fixed-width text <pre>.","code":""},{"path":"/reference/textOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a text output element — textOutput","text":"","code":"textOutput(outputId, container = if (inline) span else div, inline = FALSE)  verbatimTextOutput(outputId, placeholder = FALSE)"},{"path":"/reference/textOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a text output element — textOutput","text":"outputId output variable read value container function generate HTML element contain text inline use inline (span()) block container (div()) output placeholder output empty NULL, empty rectangle displayed serve placeholder? (affect behavior output nonempty)","code":""},{"path":"/reference/textOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a text output element — textOutput","text":"output element use UI.","code":""},{"path":"/reference/textOutput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a text output element — textOutput","text":"functions, text HTML-escaped prior rendering.","code":""},{"path":"/reference/textOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a text output element — textOutput","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   shinyApp(     ui = basicPage(       textInput(\"txt\", \"Enter the text to display below:\"),       textOutput(\"text\"),       verbatimTextOutput(\"verb\")     ),     server = function(input, output) {       output$text <- renderText({ input$txt })       output$verb <- renderText({ input$txt })     }   ) }"},{"path":"/reference/titlePanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a panel containing an application title. — titlePanel","title":"Create a panel containing an application title. — titlePanel","text":"Create panel containing application title.","code":""},{"path":"/reference/titlePanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a panel containing an application title. — titlePanel","text":"","code":"titlePanel(title, windowTitle = title)"},{"path":"/reference/titlePanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a panel containing an application title. — titlePanel","text":"title application title display windowTitle title displayed browser window.","code":""},{"path":"/reference/titlePanel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a panel containing an application title. — titlePanel","text":"Calling function side effect including title tag within head. can also specify page title explicitly using title parameter top-level page function.","code":""},{"path":"/reference/titlePanel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a panel containing an application title. — titlePanel","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   titlePanel(\"Hello Shiny!\") ) shinyApp(ui, server = function(input, output) { }) }"},{"path":"/reference/updateActionButton.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the label or icon of an action button on the client — updateActionButton","title":"Change the label or icon of an action button on the client — updateActionButton","text":"Change label icon action button client","code":""},{"path":"/reference/updateActionButton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the label or icon of an action button on the client — updateActionButton","text":"","code":"updateActionButton(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   icon = NULL,   disabled = NULL )  updateActionLink(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   icon = NULL )"},{"path":"/reference/updateActionButton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the label or icon of an action button on the client — updateActionButton","text":"session session object passed function given shinyServer. Default getDefaultReactiveDomain(). inputId id input object. label label set input object. icon optional icon() appear button. disabled TRUE, button clickable; FALSE, .","code":""},{"path":"/reference/updateActionButton.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change the label or icon of an action button on the client — updateActionButton","text":"input updater functions send message client, telling change settings input object. messages collected sent observers (including outputs) finished running. syntax functions similar functions created inputs first place. example, numericInput() updateNumericInput() take similar set arguments. arguments NULL values ignored; result changes input object client. radioButtons(), checkboxGroupInput() selectInput(), set choices can cleared using choices=character(0). Similarly, inputs, selected item can cleared using selected=character(0).","code":""},{"path":[]},{"path":"/reference/updateActionButton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the label or icon of an action button on the client — updateActionButton","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   actionButton(\"update\", \"Update other buttons and link\"),   br(),   actionButton(\"goButton\", \"Go\"),   br(),   actionButton(\"goButton2\", \"Go 2\", icon = icon(\"area-chart\")),   br(),   actionButton(\"goButton3\", \"Go 3\"),   br(),   actionLink(\"goLink\", \"Go Link\") )  server <- function(input, output, session) {   observe({     req(input$update)      # Updates goButton's label and icon     updateActionButton(session, \"goButton\",       label = \"New label\",       icon = icon(\"calendar\"))      # Leaves goButton2's label unchanged and     # removes its icon     updateActionButton(session, \"goButton2\",       icon = character(0))      # Leaves goButton3's icon, if it exists,     # unchanged and changes its label     updateActionButton(session, \"goButton3\",       label = \"New label 3\")      # Updates goLink's label and icon     updateActionButton(session, \"goLink\",       label = \"New link label\",       icon = icon(\"link\"))   }) }  shinyApp(ui, server) }"},{"path":"/reference/updateCheckboxGroupInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a checkbox group input on the client — updateCheckboxGroupInput","title":"Change the value of a checkbox group input on the client — updateCheckboxGroupInput","text":"Change value checkbox group input client","code":""},{"path":"/reference/updateCheckboxGroupInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a checkbox group input on the client — updateCheckboxGroupInput","text":"","code":"updateCheckboxGroupInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   choices = NULL,   selected = NULL,   inline = FALSE,   choiceNames = NULL,   choiceValues = NULL )"},{"path":"/reference/updateCheckboxGroupInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a checkbox group input on the client — updateCheckboxGroupInput","text":"session session object passed function given shinyServer. Default getDefaultReactiveDomain(). inputId id input object. label label set input object. choices List values show checkboxes . elements list named name rather value displayed user. argument provided, choiceNames choiceValues must provided, vice-versa. values strings; types (logicals numbers) coerced strings. selected values initially selected, . inline TRUE, render choices inline (.e. horizontally) choiceNames, choiceValues List names values, respectively, displayed user app correspond choice (reason, choiceNames choiceValues must length). either arguments provided, must provided choices must provided. advantage using named list choices choiceNames allows type UI object passed (tag objects, icons, HTML code, ...), instead just simple text. See Examples.","code":""},{"path":"/reference/updateCheckboxGroupInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change the value of a checkbox group input on the client — updateCheckboxGroupInput","text":"input updater functions send message client, telling change settings input object. messages collected sent observers (including outputs) finished running. syntax functions similar functions created inputs first place. example, numericInput() updateNumericInput() take similar set arguments. arguments NULL values ignored; result changes input object client. radioButtons(), checkboxGroupInput() selectInput(), set choices can cleared using choices=character(0). Similarly, inputs, selected item can cleared using selected=character(0).","code":""},{"path":[]},{"path":"/reference/updateCheckboxGroupInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a checkbox group input on the client — updateCheckboxGroupInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   p(\"The first checkbox group controls the second\"),   checkboxGroupInput(\"inCheckboxGroup\", \"Input checkbox\",     c(\"Item A\", \"Item B\", \"Item C\")),   checkboxGroupInput(\"inCheckboxGroup2\", \"Input checkbox 2\",     c(\"Item A\", \"Item B\", \"Item C\")) )  server <- function(input, output, session) {   observe({     x <- input$inCheckboxGroup      # Can use character(0) to remove all choices     if (is.null(x))       x <- character(0)      # Can also set the label and select items     updateCheckboxGroupInput(session, \"inCheckboxGroup2\",       label = paste(\"Checkboxgroup label\", length(x)),       choices = x,       selected = x     )   }) }  shinyApp(ui, server) }"},{"path":"/reference/updateCheckboxInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a checkbox input on the client — updateCheckboxInput","title":"Change the value of a checkbox input on the client — updateCheckboxInput","text":"Change value checkbox input client","code":""},{"path":"/reference/updateCheckboxInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a checkbox input on the client — updateCheckboxInput","text":"","code":"updateCheckboxInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL )"},{"path":"/reference/updateCheckboxInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a checkbox input on the client — updateCheckboxInput","text":"session session object passed function given shinyServer. Default getDefaultReactiveDomain(). inputId id input object. label label set input object. value Initial value (TRUE FALSE).","code":""},{"path":"/reference/updateCheckboxInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change the value of a checkbox input on the client — updateCheckboxInput","text":"input updater functions send message client, telling change settings input object. messages collected sent observers (including outputs) finished running. syntax functions similar functions created inputs first place. example, numericInput() updateNumericInput() take similar set arguments. arguments NULL values ignored; result changes input object client. radioButtons(), checkboxGroupInput() selectInput(), set choices can cleared using choices=character(0). Similarly, inputs, selected item can cleared using selected=character(0).","code":""},{"path":[]},{"path":"/reference/updateCheckboxInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a checkbox input on the client — updateCheckboxInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   sliderInput(\"controller\", \"Controller\", 0, 1, 0, step = 1),   checkboxInput(\"inCheckbox\", \"Input checkbox\") )  server <- function(input, output, session) {   observe({     # TRUE if input$controller is odd, FALSE if even.     x_even <- input$controller %% 2 == 1      updateCheckboxInput(session, \"inCheckbox\", value = x_even)   }) }  shinyApp(ui, server) }"},{"path":"/reference/updateDateInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a date input on the client — updateDateInput","title":"Change the value of a date input on the client — updateDateInput","text":"Change value date input client","code":""},{"path":"/reference/updateDateInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a date input on the client — updateDateInput","text":"","code":"updateDateInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL,   min = NULL,   max = NULL )"},{"path":"/reference/updateDateInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a date input on the client — updateDateInput","text":"session session object passed function given shinyServer. Default getDefaultReactiveDomain(). inputId id input object. label label set input object. value starting date. Either Date object, string yyyy-mm-dd format. NULL (default), use current date client's time zone. min minimum allowed date. Either Date object, string yyyy-mm-dd format. max maximum allowed date. Either Date object, string yyyy-mm-dd format.","code":""},{"path":"/reference/updateDateInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change the value of a date input on the client — updateDateInput","text":"input updater functions send message client, telling change settings input object. messages collected sent observers (including outputs) finished running. syntax functions similar functions created inputs first place. example, numericInput() updateNumericInput() take similar set arguments. arguments NULL values ignored; result changes input object client. radioButtons(), checkboxGroupInput() selectInput(), set choices can cleared using choices=character(0). Similarly, inputs, selected item can cleared using selected=character(0).","code":""},{"path":[]},{"path":"/reference/updateDateInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a date input on the client — updateDateInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   sliderInput(\"n\", \"Day of month\", 1, 30, 10),   dateInput(\"inDate\", \"Input date\") )  server <- function(input, output, session) {   observe({     date <- as.Date(paste0(\"2013-04-\", input$n))     updateDateInput(session, \"inDate\",       label = paste(\"Date label\", input$n),       value = date,       min   = date - 3,       max   = date + 3     )   }) }  shinyApp(ui, server) }"},{"path":"/reference/updateDateRangeInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the start and end values of a date range input on the client — updateDateRangeInput","title":"Change the start and end values of a date range input on the client — updateDateRangeInput","text":"Change start end values date range input client","code":""},{"path":"/reference/updateDateRangeInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the start and end values of a date range input on the client — updateDateRangeInput","text":"","code":"updateDateRangeInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   start = NULL,   end = NULL,   min = NULL,   max = NULL )"},{"path":"/reference/updateDateRangeInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the start and end values of a date range input on the client — updateDateRangeInput","text":"session session object passed function given shinyServer. Default getDefaultReactiveDomain(). inputId id input object. label label set input object. start initial start date. Either Date object, string yyyy-mm-dd format. NULL (default), use current date client's time zone. end initial end date. Either Date object, string yyyy-mm-dd format. NULL (default), use current date client's time zone. min minimum allowed date. Either Date object, string yyyy-mm-dd format. max maximum allowed date. Either Date object, string yyyy-mm-dd format.","code":""},{"path":"/reference/updateDateRangeInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change the start and end values of a date range input on the client — updateDateRangeInput","text":"input updater functions send message client, telling change settings input object. messages collected sent observers (including outputs) finished running. syntax functions similar functions created inputs first place. example, numericInput() updateNumericInput() take similar set arguments. arguments NULL values ignored; result changes input object client. radioButtons(), checkboxGroupInput() selectInput(), set choices can cleared using choices=character(0). Similarly, inputs, selected item can cleared using selected=character(0).","code":""},{"path":[]},{"path":"/reference/updateDateRangeInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the start and end values of a date range input on the client — updateDateRangeInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   sliderInput(\"n\", \"Day of month\", 1, 30, 10),   dateRangeInput(\"inDateRange\", \"Input date range\") )  server <- function(input, output, session) {   observe({     date <- as.Date(paste0(\"2013-04-\", input$n))      updateDateRangeInput(session, \"inDateRange\",       label = paste(\"Date range label\", input$n),       start = date - 1,       end = date + 1,       min = date - 5,       max = date + 5     )   }) }  shinyApp(ui, server) }"},{"path":"/reference/updateNumericInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a number input on the client — updateNumericInput","title":"Change the value of a number input on the client — updateNumericInput","text":"Change value number input client","code":""},{"path":"/reference/updateNumericInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a number input on the client — updateNumericInput","text":"","code":"updateNumericInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL,   min = NULL,   max = NULL,   step = NULL )"},{"path":"/reference/updateNumericInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a number input on the client — updateNumericInput","text":"session session object passed function given shinyServer. Default getDefaultReactiveDomain(). inputId id input object. label label set input object. value Initial value. min Minimum allowed value max Maximum allowed value step Interval use stepping min max","code":""},{"path":"/reference/updateNumericInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change the value of a number input on the client — updateNumericInput","text":"input updater functions send message client, telling change settings input object. messages collected sent observers (including outputs) finished running. syntax functions similar functions created inputs first place. example, numericInput() updateNumericInput() take similar set arguments. arguments NULL values ignored; result changes input object client. radioButtons(), checkboxGroupInput() selectInput(), set choices can cleared using choices=character(0). Similarly, inputs, selected item can cleared using selected=character(0).","code":""},{"path":[]},{"path":"/reference/updateNumericInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a number input on the client — updateNumericInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   sliderInput(\"controller\", \"Controller\", 0, 20, 10),   numericInput(\"inNumber\", \"Input number\", 0),   numericInput(\"inNumber2\", \"Input number 2\", 0) )  server <- function(input, output, session) {    observeEvent(input$controller, {     # We'll use the input$controller variable multiple times, so save it as x     # for convenience.     x <- input$controller      updateNumericInput(session, \"inNumber\", value = x)      updateNumericInput(session, \"inNumber2\",       label = paste(\"Number label \", x),       value = x, min = x-10, max = x+10, step = 5)   }) }  shinyApp(ui, server) }"},{"path":"/reference/updateQueryString.html","id":null,"dir":"Reference","previous_headings":"","what":"Update URL in browser's location bar — updateQueryString","title":"Update URL in browser's location bar — updateQueryString","text":"function updates client browser's query string location bar. typically called observer. Note work Internet Explorer 9 .","code":""},{"path":"/reference/updateQueryString.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update URL in browser's location bar — updateQueryString","text":"","code":"updateQueryString(   queryString,   mode = c(\"replace\", \"push\"),   session = getDefaultReactiveDomain() )"},{"path":"/reference/updateQueryString.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update URL in browser's location bar — updateQueryString","text":"queryString new query string show location bar. mode query string updated, current history entry replaced (default), new history entry pushed onto history stack? former used live bookmarking context. latter useful want navigate states using browser's back forward buttons. See Examples. session Shiny session object.","code":""},{"path":"/reference/updateQueryString.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update URL in browser's location bar — updateQueryString","text":"mode = \"push\", three updates currently allowed: query string (format: ?param1=val1&param2=val2) hash (format: #hash) query string hash (format: ?param1=val1&param2=val2#hash) words, mode = \"push\", queryString must start either ? #. technical curiosity: hood, function calling HTML5 history API (names mode argument come ). mode = \"replace\", function called window.history.replaceState(null, null, queryString). mode = \"push\", function called window.history.pushState(null, null, queryString).","code":""},{"path":[]},{"path":"/reference/updateQueryString.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update URL in browser's location bar — updateQueryString","text":"","code":"## Only run these examples in interactive sessions if (interactive()) {    ## App 1: Doing \"live\" bookmarking   ## Update the browser's location bar every time an input changes.   ## This should not be used with enableBookmarking(\"server\"),   ## because that would create a new saved state on disk every time   ## the user changes an input.   enableBookmarking(\"url\")   shinyApp(     ui = function(req) {       fluidPage(         textInput(\"txt\", \"Text\"),         checkboxInput(\"chk\", \"Checkbox\")       )     },     server = function(input, output, session) {       observe({         # Trigger this observer every time an input changes         reactiveValuesToList(input)         session$doBookmark()       })       onBookmarked(function(url) {         updateQueryString(url)       })     }   )    ## App 2: Printing the value of the query string   ## (Use the back and forward buttons to see how the browser   ## keeps a record of each state)   shinyApp(     ui = fluidPage(       textInput(\"txt\", \"Enter new query string\"),       helpText(\"Format: ?param1=val1&param2=val2\"),       actionButton(\"go\", \"Update\"),       hr(),       verbatimTextOutput(\"query\")     ),     server = function(input, output, session) {       observeEvent(input$go, {         updateQueryString(input$txt, mode = \"push\")       })       output$query <- renderText({         query <- getQueryString()         queryText <- paste(names(query), query,                        sep = \"=\", collapse=\", \")         paste(\"Your query string is:\\n\", queryText)       })     }   ) }"},{"path":"/reference/updateRadioButtons.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a radio input on the client — updateRadioButtons","title":"Change the value of a radio input on the client — updateRadioButtons","text":"Change value radio input client","code":""},{"path":"/reference/updateRadioButtons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a radio input on the client — updateRadioButtons","text":"","code":"updateRadioButtons(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   choices = NULL,   selected = NULL,   inline = FALSE,   choiceNames = NULL,   choiceValues = NULL )"},{"path":"/reference/updateRadioButtons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a radio input on the client — updateRadioButtons","text":"session session object passed function given shinyServer. Default getDefaultReactiveDomain(). inputId id input object. label label set input object. choices List values select (elements list named name rather value displayed user). argument provided, choiceNames choiceValues must provided, vice-versa. values strings; types (logicals numbers) coerced strings. selected initially selected value. specified, defaults first item choices. start items selected, use character(0). inline TRUE, render choices inline (.e. horizontally) choiceNames, choiceValues List names values, respectively, displayed user app correspond choice (reason, choiceNames choiceValues must length). either arguments provided, must provided choices must provided. advantage using named list choices choiceNames allows type UI object passed (tag objects, icons, HTML code, ...), instead just simple text. See Examples.","code":""},{"path":"/reference/updateRadioButtons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change the value of a radio input on the client — updateRadioButtons","text":"input updater functions send message client, telling change settings input object. messages collected sent observers (including outputs) finished running. syntax functions similar functions created inputs first place. example, numericInput() updateNumericInput() take similar set arguments. arguments NULL values ignored; result changes input object client. radioButtons(), checkboxGroupInput() selectInput(), set choices can cleared using choices=character(0). Similarly, inputs, selected item can cleared using selected=character(0).","code":""},{"path":[]},{"path":"/reference/updateRadioButtons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a radio input on the client — updateRadioButtons","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   p(\"The first radio button group controls the second\"),   radioButtons(\"inRadioButtons\", \"Input radio buttons\",     c(\"Item A\", \"Item B\", \"Item C\")),   radioButtons(\"inRadioButtons2\", \"Input radio buttons 2\",     c(\"Item A\", \"Item B\", \"Item C\")) )  server <- function(input, output, session) {   observe({     x <- input$inRadioButtons      # Can also set the label and select items     updateRadioButtons(session, \"inRadioButtons2\",       label = paste(\"radioButtons label\", x),       choices = x,       selected = x     )   }) }  shinyApp(ui, server) }"},{"path":"/reference/updateSelectInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a select input on the client — updateSelectInput","title":"Change the value of a select input on the client — updateSelectInput","text":"Change value select input client","code":""},{"path":"/reference/updateSelectInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a select input on the client — updateSelectInput","text":"","code":"updateSelectInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   choices = NULL,   selected = NULL )  updateSelectizeInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   choices = NULL,   selected = NULL,   options = list(),   server = FALSE )  updateVarSelectInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   data = NULL,   selected = NULL )  updateVarSelectizeInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   data = NULL,   selected = NULL,   options = list(),   server = FALSE )"},{"path":"/reference/updateSelectInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a select input on the client — updateSelectInput","text":"session session object passed function given shinyServer. Default getDefaultReactiveDomain(). inputId id input object. label label set input object. choices List values select . elements list named, name --- rather value --- displayed user. also possible group related inputs providing named list whose elements (either named unnamed) lists, vectors, factors. case, outermost names used group labels (leveraging <optgroup> HTML tag) elements respective sublist. See example section small demo feature. selected initially selected value (multiple values multiple = TRUE). specified defaults first value single-select lists values multiple select lists. options list options. See documentation selectize.js(https://selectize.dev/docs/usage) possible options (character option values inside base::() treated literal JavaScript code; see renderDataTable() details). server whether store choices server side, load select options dynamically searching, instead writing choices page (.e., use client-side version selectize.js) data data frame. Used retrieve column names choices selectInput()","code":""},{"path":"/reference/updateSelectInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change the value of a select input on the client — updateSelectInput","text":"input updater functions send message client, telling change settings input object. messages collected sent observers (including outputs) finished running. syntax functions similar functions created inputs first place. example, numericInput() updateNumericInput() take similar set arguments. arguments NULL values ignored; result changes input object client. radioButtons(), checkboxGroupInput() selectInput(), set choices can cleared using choices=character(0). Similarly, inputs, selected item can cleared using selected=character(0).","code":""},{"path":[]},{"path":"/reference/updateSelectInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a select input on the client — updateSelectInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   p(\"The checkbox group controls the select input\"),   checkboxGroupInput(\"inCheckboxGroup\", \"Input checkbox\",     c(\"Item A\", \"Item B\", \"Item C\")),   selectInput(\"inSelect\", \"Select input\",     c(\"Item A\", \"Item B\", \"Item C\")) )  server <- function(input, output, session) {   observe({     x <- input$inCheckboxGroup      # Can use character(0) to remove all choices     if (is.null(x))       x <- character(0)      # Can also set the label and select items     updateSelectInput(session, \"inSelect\",       label = paste(\"Select input label\", length(x)),       choices = x,       selected = tail(x, 1)     )   }) }  shinyApp(ui, server) }"},{"path":"/reference/updateSliderInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Slider Input Widget — updateSliderInput","title":"Update Slider Input Widget — updateSliderInput","text":"Change value slider input client.","code":""},{"path":"/reference/updateSliderInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Slider Input Widget — updateSliderInput","text":"","code":"updateSliderInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL,   min = NULL,   max = NULL,   step = NULL,   timeFormat = NULL,   timezone = NULL )"},{"path":"/reference/updateSliderInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Slider Input Widget — updateSliderInput","text":"session session object passed function given shinyServer. Default getDefaultReactiveDomain(). inputId id input object. label label set input object. value initial value slider, either number, date (class Date), date-time (class POSIXt). length one vector create regular slider; length two vector create double-ended range slider. Must lie min max. min, max minimum maximum values (inclusive) can selected. step Specifies interval selectable value slider. Either NULL, default, uses heuristic determine step size single number. values dates, step days; values date-times, step seconds. timeFormat used values Date POSIXt objects. time format string, passed Javascript strftime library. See https://github.com/samsonjs/strftime details. allowed format specifications similar, identical, R's base::strftime() function. Dates, default \"%F\" (like \"2015-07-01\"), POSIXt, default \"%F %T\" (like \"2015-07-01 15:32:10\"). timezone used values POSIXt objects. string specifying time zone offset displayed times, format \"+HHMM\" \"-HHMM\". NULL (default), times displayed browser's time zone. value \"+0000\" result UTC time.","code":""},{"path":"/reference/updateSliderInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update Slider Input Widget — updateSliderInput","text":"input updater functions send message client, telling change settings input object. messages collected sent observers (including outputs) finished running. syntax functions similar functions created inputs first place. example, numericInput() updateNumericInput() take similar set arguments. arguments NULL values ignored; result changes input object client. radioButtons(), checkboxGroupInput() selectInput(), set choices can cleared using choices=character(0). Similarly, inputs, selected item can cleared using selected=character(0).","code":""},{"path":[]},{"path":"/reference/updateSliderInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Slider Input Widget — updateSliderInput","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   shinyApp(     ui = fluidPage(       sidebarLayout(         sidebarPanel(           p(\"The first slider controls the second\"),           sliderInput(\"control\", \"Controller:\", min=0, max=20, value=10,                        step=1),           sliderInput(\"receive\", \"Receiver:\", min=0, max=20, value=10,                        step=1)         ),         mainPanel()       )     ),     server = function(input, output, session) {       observe({         val <- input$control         # Control the value, min, max, and step.         # Step size is 2 when input value is even; 1 when value is odd.         updateSliderInput(session, \"receive\", value = val,           min = floor(val/2), max = val+4, step = (val+1)%%2 + 1)       })     }   ) }"},{"path":"/reference/updateTabsetPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the selected tab on the client — updateTabsetPanel","title":"Change the selected tab on the client — updateTabsetPanel","text":"Change selected tab client","code":""},{"path":"/reference/updateTabsetPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the selected tab on the client — updateTabsetPanel","text":"","code":"updateTabsetPanel(   session = getDefaultReactiveDomain(),   inputId,   selected = NULL )  updateNavbarPage(   session = getDefaultReactiveDomain(),   inputId,   selected = NULL )  updateNavlistPanel(   session = getDefaultReactiveDomain(),   inputId,   selected = NULL )"},{"path":"/reference/updateTabsetPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the selected tab on the client — updateTabsetPanel","text":"session session object passed function given shinyServer. Default getDefaultReactiveDomain(). inputId id tabsetPanel, navlistPanel, navbarPage object. selected value (, none supplied, title) tab selected default. NULL, first tab selected.","code":""},{"path":[]},{"path":"/reference/updateTabsetPanel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the selected tab on the client — updateTabsetPanel","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(sidebarLayout(   sidebarPanel(     sliderInput(\"controller\", \"Controller\", 1, 3, 1)   ),   mainPanel(     tabsetPanel(id = \"inTabset\",       tabPanel(title = \"Panel 1\", value = \"panel1\", \"Panel 1 content\"),       tabPanel(title = \"Panel 2\", value = \"panel2\", \"Panel 2 content\"),       tabPanel(title = \"Panel 3\", value = \"panel3\", \"Panel 3 content\")     )   ) ))  server <- function(input, output, session) {   observeEvent(input$controller, {     updateTabsetPanel(session, \"inTabset\",       selected = paste0(\"panel\", input$controller)     )   }) }  shinyApp(ui, server) }"},{"path":"/reference/updateTextAreaInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a textarea input on the client — updateTextAreaInput","title":"Change the value of a textarea input on the client — updateTextAreaInput","text":"Change value textarea input client","code":""},{"path":"/reference/updateTextAreaInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a textarea input on the client — updateTextAreaInput","text":"","code":"updateTextAreaInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL,   placeholder = NULL )"},{"path":"/reference/updateTextAreaInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a textarea input on the client — updateTextAreaInput","text":"session session object passed function given shinyServer. Default getDefaultReactiveDomain(). inputId id input object. label label set input object. value Initial value. placeholder character string giving user hint can entered control. Internet Explorer 8 9 support option.","code":""},{"path":"/reference/updateTextAreaInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change the value of a textarea input on the client — updateTextAreaInput","text":"input updater functions send message client, telling change settings input object. messages collected sent observers (including outputs) finished running. syntax functions similar functions created inputs first place. example, numericInput() updateNumericInput() take similar set arguments. arguments NULL values ignored; result changes input object client. radioButtons(), checkboxGroupInput() selectInput(), set choices can cleared using choices=character(0). Similarly, inputs, selected item can cleared using selected=character(0).","code":""},{"path":[]},{"path":"/reference/updateTextAreaInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a textarea input on the client — updateTextAreaInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   sliderInput(\"controller\", \"Controller\", 0, 20, 10),   textAreaInput(\"inText\", \"Input textarea\"),   textAreaInput(\"inText2\", \"Input textarea 2\") )  server <- function(input, output, session) {   observe({     # We'll use the input$controller variable multiple times, so save it as x     # for convenience.     x <- input$controller      # This will change the value of input$inText, based on x     updateTextAreaInput(session, \"inText\", value = paste(\"New text\", x))      # Can also set the label, this time for input$inText2     updateTextAreaInput(session, \"inText2\",       label = paste(\"New label\", x),       value = paste(\"New text\", x))   }) }  shinyApp(ui, server) }"},{"path":"/reference/updateTextInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a text input on the client — updateTextInput","title":"Change the value of a text input on the client — updateTextInput","text":"Change value text input client","code":""},{"path":"/reference/updateTextInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a text input on the client — updateTextInput","text":"","code":"updateTextInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL,   placeholder = NULL )"},{"path":"/reference/updateTextInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a text input on the client — updateTextInput","text":"session session object passed function given shinyServer. Default getDefaultReactiveDomain(). inputId id input object. label label set input object. value Initial value. placeholder character string giving user hint can entered control. Internet Explorer 8 9 support option.","code":""},{"path":"/reference/updateTextInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change the value of a text input on the client — updateTextInput","text":"input updater functions send message client, telling change settings input object. messages collected sent observers (including outputs) finished running. syntax functions similar functions created inputs first place. example, numericInput() updateNumericInput() take similar set arguments. arguments NULL values ignored; result changes input object client. radioButtons(), checkboxGroupInput() selectInput(), set choices can cleared using choices=character(0). Similarly, inputs, selected item can cleared using selected=character(0).","code":""},{"path":[]},{"path":"/reference/updateTextInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a text input on the client — updateTextInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   sliderInput(\"controller\", \"Controller\", 0, 20, 10),   textInput(\"inText\", \"Input text\"),   textInput(\"inText2\", \"Input text 2\") )  server <- function(input, output, session) {   observe({     # We'll use the input$controller variable multiple times, so save it as x     # for convenience.     x <- input$controller      # This will change the value of input$inText, based on x     updateTextInput(session, \"inText\", value = paste(\"New text\", x))      # Can also set the label, this time for input$inText2     updateTextInput(session, \"inText2\",       label = paste(\"New label\", x),       value = paste(\"New text\", x))   }) }  shinyApp(ui, server) }"},{"path":"/reference/urlModal.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a modal dialog that displays a URL — urlModal","title":"Generate a modal dialog that displays a URL — urlModal","text":"modal dialog generated urlModal display URL textarea input, URL text selected can easily copied. result urlModal passed showModal() function display browser.","code":""},{"path":"/reference/urlModal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a modal dialog that displays a URL — urlModal","text":"","code":"urlModal(url, title = \"Bookmarked application link\", subtitle = NULL)"},{"path":"/reference/urlModal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a modal dialog that displays a URL — urlModal","text":"url URL display dialog box. title title dialog box. subtitle Text display underneath URL.","code":""},{"path":"/reference/useBusyIndicators.html","id":null,"dir":"Reference","previous_headings":"","what":"Enable/disable busy indication — useBusyIndicators","title":"Enable/disable busy indication — useBusyIndicators","text":"Busy indicators provide visual cue users server busy calculating outputs otherwise performing tasks (e.g., producing downloads). enabled, spinner shown calculating/recalculating output, pulsing banner shown top page app otherwise busy. Busy indication enabled default UI created bslib, must enabled otherwise. enable/disable, include result function anywhere app's UI.","code":""},{"path":"/reference/useBusyIndicators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enable/disable busy indication — useBusyIndicators","text":"","code":"useBusyIndicators(..., spinners = TRUE, pulse = TRUE)"},{"path":"/reference/useBusyIndicators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enable/disable busy indication — useBusyIndicators","text":"... Currently ignored. spinners Whether show spinner calculating/recalculating output. pulse Whether show pulsing banner top page app busy.","code":""},{"path":"/reference/useBusyIndicators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Enable/disable busy indication — useBusyIndicators","text":"spinners pulse set TRUE, pulse automatically disabled spinner(s) active. spinners pulse set FALSE, busy indication shown (graying recalculating outputs).","code":""},{"path":[]},{"path":"/reference/useBusyIndicators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enable/disable busy indication — useBusyIndicators","text":"","code":"if (FALSE) { # rlang::is_interactive()  library(bslib)  ui <- page_fillable(   useBusyIndicators(),   card(     card_header(       \"A plot\",       input_task_button(\"simulate\", \"Simulate\"),       class = \"d-flex justify-content-between align-items-center\"     ),     plotOutput(\"p\"),   ) )  server <- function(input, output) {   output$p <- renderPlot({     input$simulate     Sys.sleep(4)     plot(x = rnorm(100), y = rnorm(100))   }) }  shinyApp(ui, server) }"},{"path":"/reference/validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate input values and other conditions — validate","title":"Validate input values and other conditions — validate","text":"validate() provides convenient mechanism validating output inputs necessary successful rendering. takes number (unnamed) arguments, representing condition test. condition fails (.e. \"truthy\"), special type error signaled stop execution. error handled application-specific code, displayed user Shiny. use validate() reactive() validation failures automatically propagate outputs use reactive.","code":""},{"path":"/reference/validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate input values and other conditions — validate","text":"","code":"validate(..., errorClass = character(0))  need(expr, message = paste(label, \"must be provided\"), label)"},{"path":"/reference/validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate input values and other conditions — validate","text":"... list tests. test equal NULL success, FALSE silent failure, string failure error message. errorClass CSS class apply. actual CSS string shiny-output-error- prepended value. expr expression test. condition pass expression meets conditions spelled Details. message message convey user validation condition met. message provided, one created using label. fail message, use FALSE message. label human-readable name field may missing. parameter needed message provided, must provided otherwise.","code":""},{"path":"/reference/validate.html","id":"need-","dir":"Reference","previous_headings":"","what":"need()","title":"Validate input values and other conditions — validate","text":"easy way provide arguments validate() use need(), takes expression string. expression \"truthy\" string used error message. \"truthiness\" flexible use case, need explicitly generate logical values. example, want allow NA NULL, can !.null(input$foo). need validation logic differs significantly need(), can create validation test functions. passing test return NULL. failing test return either string providing error display user, failure happen silently, FALSE. Alternatively can use validate() within statement, particularly useful complex conditions:","code":"if (input$x < 0 && input$choice == \"positive\") {    validate(\"If choice is positive then x must be greater than 0\")  }"},{"path":"/reference/validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate input values and other conditions — validate","text":"","code":"## Only run examples in interactive R sessions if (interactive()) { options(device.ask.default = FALSE)  ui <- fluidPage(   checkboxGroupInput('in1', 'Check some letters', choices = head(LETTERS)),   selectizeInput('in2', 'Select a state', choices = c(\"\", state.name)),   plotOutput('plot') )  server <- function(input, output) {   output$plot <- renderPlot({     validate(       need(input$in1, 'Check at least one letter!'),       need(input$in2 != '', 'Please choose a state.')     )     plot(1:10, main = paste(c(input$in1, input$in2), collapse = ', '))   }) }  shinyApp(ui, server)  }"},{"path":"/reference/varSelectInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Select variables from a data frame — varSelectInput","title":"Select variables from a data frame — varSelectInput","text":"Create select list can used choose single multiple items column names data frame.","code":""},{"path":"/reference/varSelectInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select variables from a data frame — varSelectInput","text":"","code":"varSelectInput(   inputId,   label,   data,   selected = NULL,   multiple = FALSE,   selectize = TRUE,   width = NULL,   size = NULL )  varSelectizeInput(inputId, ..., options = NULL, width = NULL)"},{"path":"/reference/varSelectInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select variables from a data frame — varSelectInput","text":"inputId input slot used access value. label Display label control, NULL label. data data frame. Used retrieve column names choices selectInput() selected initially selected value (multiple values multiple = TRUE). specified defaults first value single-select lists values multiple select lists. multiple selection multiple items allowed? selectize Whether use selectize.js . width width input, e.g. '400px', '100%'; see validateCssUnit(). size Number items show selection box; larger number result taller box. compatible selectize=TRUE. Normally, multiple=FALSE, select input drop-list, size set, box instead. ... Arguments passed varSelectInput(). options list options. See documentation selectize.js(https://selectize.dev/docs/usage) possible options (character option values inside base::() treated literal JavaScript code; see renderDataTable() details).","code":""},{"path":"/reference/varSelectInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select variables from a data frame — varSelectInput","text":"variable select list control can added UI definition.","code":""},{"path":"/reference/varSelectInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select variables from a data frame — varSelectInput","text":"default, varSelectInput() selectizeInput() use JavaScript library selectize.js (https://selectize.dev/) instead basic select input element. use standard HTML select input element, use selectInput() selectize=FALSE.","code":""},{"path":"/reference/varSelectInput.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Select variables from a data frame — varSelectInput","text":"variable selectize input created varSelectizeInput() allows deletion selected option even single select input, return empty string value. default behavior selectize.js. However, selectize input created selectInput(..., selectize = TRUE) ignore empty string value single choice input empty string choices argument. keep compatibility selectInput(..., selectize = FALSE).","code":""},{"path":"/reference/varSelectInput.html","id":"server-value","dir":"Reference","previous_headings":"","what":"Server value","title":"Select variables from a data frame — varSelectInput","text":"resulting server input value returned : symbol multiple = FALSE. input value used rlang's rlang::!!(). example, ggplot2::aes(!!input$variable). list symbols multiple = TRUE. input value used rlang's rlang::!!!() expand symbol list individual arguments. example, dplyr::select(mtcars, !!!input$variabls) equivalent dplyr::select(mtcars, !!input$variabls[[1]], !!input$variabls[[2]], ..., !!input$variabls[[length(input$variabls)]]).","code":""},{"path":[]},{"path":"/reference/varSelectInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select variables from a data frame — varSelectInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  library(ggplot2)  # single selection shinyApp(   ui = fluidPage(     varSelectInput(\"variable\", \"Variable:\", mtcars),     plotOutput(\"data\")   ),   server = function(input, output) {     output$data <- renderPlot({       ggplot(mtcars, aes(!!input$variable)) + geom_histogram()     })   } )   # multiple selections if (FALSE) { shinyApp(  ui = fluidPage(    varSelectInput(\"variables\", \"Variable:\", mtcars, multiple = TRUE),    tableOutput(\"data\")  ),  server = function(input, output) {    output$data <- renderTable({       if (length(input$variables) == 0) return(mtcars)       mtcars %>% dplyr::select(!!!input$variables)    }, rownames = TRUE)  } )}  }"},{"path":"/reference/verticalLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"Lay out UI elements vertically — verticalLayout","title":"Lay out UI elements vertically — verticalLayout","text":"Create container includes one rows content (element passed container appear line UI)","code":""},{"path":"/reference/verticalLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lay out UI elements vertically — verticalLayout","text":"","code":"verticalLayout(..., fluid = TRUE)"},{"path":"/reference/verticalLayout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lay out UI elements vertically — verticalLayout","text":"... Elements include within container fluid TRUE use fluid layout; FALSE use fixed layout.","code":""},{"path":[]},{"path":"/reference/verticalLayout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lay out UI elements vertically — verticalLayout","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- fluidPage(   verticalLayout(     a(href=\"http://example.com/link1\", \"Link One\"),     a(href=\"http://example.com/link2\", \"Link Two\"),     a(href=\"http://example.com/link3\", \"Link Three\")   ) ) shinyApp(ui, server = function(input, output) { }) }"},{"path":"/reference/viewer.html","id":null,"dir":"Reference","previous_headings":"","what":"Viewer options — viewer","title":"Viewer options — viewer","text":"Use functions control gadget displayed RStudio (R environments emulate RStudio's viewer pane/dialog APIs). viewer APIs available current R environment, gadget displayed system's default web browser (see utils::browseURL()).","code":""},{"path":"/reference/viewer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Viewer options — viewer","text":"","code":"paneViewer(minHeight = NULL)  dialogViewer(dialogName, width = 600, height = 600)  browserViewer(browser = getOption(\"browser\"))"},{"path":"/reference/viewer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Viewer options — viewer","text":"minHeight minimum height (pixels) desired show gadget viewer pane. positive number, resize pane necessary show least many pixels. NULL, use existing viewer pane size. \"maximize\", use maximum available vertical space. dialogName window title display dialog. width, height desired dialog width/height, pixels. browser See utils::browseURL().","code":""},{"path":"/reference/viewer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Viewer options — viewer","text":"function takes single url parameter, suitable passing viewer argument runGadget().","code":""},{"path":"/reference/wellPanel.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a well panel — wellPanel","title":"Create a well panel — wellPanel","text":"Creates panel slightly inset border grey background. Equivalent Bootstrap's well CSS class.","code":""},{"path":"/reference/wellPanel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a well panel — wellPanel","text":"","code":"wellPanel(...)"},{"path":"/reference/wellPanel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a well panel — wellPanel","text":"... UI elements include inside panel.","code":""},{"path":"/reference/wellPanel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a well panel — wellPanel","text":"newly created panel.","code":""},{"path":"/reference/withMathJax.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the MathJax library and typeset math expressions — withMathJax","title":"Load the MathJax library and typeset math expressions — withMathJax","text":"function adds MathJax page typeset math expressions (found) content .... needs called app unless content rendered page loaded, e.g. via renderUI(), case call explicitly every time write math expressions output.","code":""},{"path":"/reference/withMathJax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the MathJax library and typeset math expressions — withMathJax","text":"","code":"withMathJax(...)"},{"path":"/reference/withMathJax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load the MathJax library and typeset math expressions — withMathJax","text":"... HTML elements apply MathJax ","code":""},{"path":"/reference/withMathJax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load the MathJax library and typeset math expressions — withMathJax","text":"","code":"withMathJax(helpText(\"Some math here $$\\\\alpha+\\\\beta$$\")) #> <span class=\"help-block\">Some math here $$\\alpha+\\beta$$<\/span> #> <script>if (window.MathJax) MathJax.Hub.Queue([\"Typeset\", MathJax.Hub]);<\/script> # now we can just write \"static\" content without withMathJax() div(\"more math here $$\\\\sqrt{2}$$\") #> <div>more math here $$\\sqrt{2}$$<\/div>"},{"path":"/reference/withProgress.html","id":null,"dir":"Reference","previous_headings":"","what":"Reporting progress (functional API) — withProgress","title":"Reporting progress (functional API) — withProgress","text":"Reports progress user long-running operations.","code":""},{"path":"/reference/withProgress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (functional API) — withProgress","text":"","code":"withProgress(   expr,   min = 0,   max = 1,   value = min + (max - min) * 0.1,   message = NULL,   detail = NULL,   style = getShinyOption(\"progress.style\", default = \"notification\"),   session = getDefaultReactiveDomain(),   env = parent.frame(),   quoted = FALSE )  setProgress(   value = NULL,   message = NULL,   detail = NULL,   session = getDefaultReactiveDomain() )  incProgress(   amount = 0.1,   message = NULL,   detail = NULL,   session = getDefaultReactiveDomain() )"},{"path":"/reference/withProgress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reporting progress (functional API) — withProgress","text":"expr work done. expression contain calls setProgress() incProgress(). min value represents starting point progress bar. Must less tham max. Default 0. max value represents end progress bar. Must greater min. Default 1. value Single-element numeric vector; value set progress bar, relative min max. message single-element character vector; message displayed user, NULL hide current message (). detail single-element character vector; detail message displayed user, NULL hide current detail message (). detail message shown de-emphasized appearance relative message. style Progress display style. \"notification\" (default), progress indicator show using Shiny's notification API. \"old\", use HTML CSS used Shiny 0.13.2 (backward-compatibility). session Shiny session object, provided shinyServer server function. default automatically find session using current reactive domain. env environment expr evaluated. quoted Whether expr quoted expression (common). amount incProgress, amount increment status bar. Default 0.1.","code":""},{"path":"/reference/withProgress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reporting progress (functional API) — withProgress","text":"result expr.","code":""},{"path":"/reference/withProgress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reporting progress (functional API) — withProgress","text":"package exposes two distinct programming APIs working progress. Using withProgress incProgress setProgress provide simple function-based interface, Progress() reference class provides object-oriented API. Use withProgress wrap scope work; cause new progress panel created, displayed first time incProgress setProgress called. withProgress exits, corresponding progress panel removed. incProgress function increments status bar specified amount, whereas setProgress function sets specific value, can also set text displayed. Generally, withProgress/incProgress/setProgress sufficient; exception work done asynchronous (common) otherwise encapsulated single scope. case, can use Progress reference class. version 0.14, progress indicators use Shiny's new notification API. want use old styling (example, may used customized CSS), can use style=\"old\" time call withProgress(). want set style time withProgress called, can instead call shinyOptions(progress.style=\"old\") just , inside server function.","code":""},{"path":[]},{"path":"/reference/withProgress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reporting progress (functional API) — withProgress","text":"","code":"## Only run examples in interactive R sessions if (interactive()) { options(device.ask.default = FALSE)  ui <- fluidPage(   plotOutput(\"plot\") )  server <- function(input, output) {   output$plot <- renderPlot({     withProgress(message = 'Calculation in progress',                  detail = 'This may take a while...', value = 0, {       for (i in 1:15) {         incProgress(1/15)         Sys.sleep(0.25)       }     })     plot(cars)   }) }  shinyApp(ui, server) }"},{"path":[]},{"path":"/TODO-promises.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Promises TODO","text":"Motivation – care async? shouldn’t (limitations)? High level technical overview Cookbook-style examples Top-porting sync app async","code":""},{"path":"/TODO-promises.html","id":"core-api","dir":"","previous_headings":"","what":"Core API","title":"Promises TODO","text":".promise() doesn’t convert regular values promises, add promise_resolved(value) promise_rejected(err) functions?","code":""},{"path":"/TODO-promises.html","id":"later","dir":"","previous_headings":"","what":"later","title":"Promises TODO","text":"Add support multiple event loops Add timeout run_now","code":""},{"path":"/TODO-promises.html","id":"error-handlingdebugging","dir":"","previous_headings":"","what":"Error handling/debugging","title":"Promises TODO","text":"..stacktraceon../..stacktraceoff.. stack traces general require opt-options(shiny.error) work promise handlers Detect reactives used across process boundaries, error","code":""},{"path":"/TODO-promises.html","id":"render-functions","dir":"","previous_headings":"","what":"Render functions","title":"Promises TODO","text":"Non-async render functions code execute current tick. Otherwise order execution surprising side effects explicit priorities. Promise domains maybe onExecute, “sync” part kicks async operations also wrapping behavior (like capturing output). Right now, start renderPrint promise(~resolve(TRUE)) execute user code (), just get promise behavior. true tackle error handling (stack trace capture). invisible() doesn’t seem working correctly renderPrint. .visible doesn’t survive promise chaining, e.g. promise(resolve(promise(resolve(invisible(“Hi”))))) %>% (function(x, .visible) { cat(.visible) }) print TRUE, FALSE. renderDataTable support async Support async filename? prevent session continuing download completes (ref count)","code":""},{"path":"/TODO-promises.html","id":"flush-lifecycle","dir":"","previous_headings":"","what":"Flush lifecycle","title":"Promises TODO","text":"async operations running session, hold processing inputs scheduled task items operations complete. Hold outputs/errors async operations complete. Allow sync async outputs displayed outputs done. (opt-)","code":""},{"path":"/TODO-promises.html","id":"testing","dir":"","previous_headings":"","what":"Testing","title":"Promises TODO","text":"App tests built-render functions support async Apps test flush lifecycle, including onFlushed(= FALSE) Apps test invisible() behavior renderPrint, sync async Apps ensure render functions execute synchronous code tick App tests async downloadHandler App verifies inputs/timers don’t fire session async operations pending App verifies req(FALSE), req(FALSE, cancelOutput = TRUE), validate/need, etc. work async","code":""},{"path":"/TODO-promises.html","id":"external-packages","dir":"","previous_headings":"","what":"External packages","title":"Promises TODO","text":"DT htmlwidgets: Don’t require async-aware version Shiny using async Plotly","code":""},{"path":"/TODO-promises.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs","title":"Promises TODO","text":"req(FALSE, cancelOutput = TRUE) shows grey (even without async)","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-and-improvements-development-version","dir":"Changelog","previous_headings":"","what":"New features and improvements","title":"shiny (development version)","text":"Added new functions, useBusyIndicators() busyIndicatorOptions(), enabling customizing busy indication. Busy indicators provide visual cue users server busy calculating outputs otherwise serving requests client. enabled, spinner shown calculating/recalculating output, pulsing banner shown top page app otherwise busy. (#4040) Output bindings now include .recalculating CSS class first bound, first render. makes possible/easier show progress indication output calculating first time. (#4039)","code":""},{"path":"/news/index.html","id":"bug-fixes-development-version","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shiny (development version)","text":"downloadButton() downloadLink() now disabled fully initialized. prevents user clicking button/link download ready. (#4041) Output bindings removed, invalidated, inserted (invalidated) now correctly include .recalculating CSS class. (#4039) Fixed recent issue uiOutput() conditionalPanel() properly lower opacity recalculation (Bootstrap 5 context). (#4027)","code":""},{"path":"/news/index.html","id":"shiny-1811","dir":"Changelog","previous_headings":"","what":"shiny 1.8.1.1","title":"shiny 1.8.1.1","text":"CRAN release: 2024-04-02 v1.8.1, shiny.js starting throwing error input/output bindings duplicate IDs. error now thrown shiny::devmode(TRUE) enabled, issue still made discoverable JS error console, avoids unnecessarily breaking apps happen work duplicate IDs. (#4019)","code":""},{"path":"/news/index.html","id":"shiny-181","dir":"Changelog","previous_headings":"","what":"shiny 1.8.1","title":"shiny 1.8.1","text":"CRAN release: 2024-03-26","code":""},{"path":"/news/index.html","id":"new-features-and-improvements-1-8-1","dir":"Changelog","previous_headings":"","what":"New features and improvements","title":"shiny 1.8.1","text":"Added ExtendedTask, new simple way launch long-running asynchronous tasks truly non-blocking. , even within session, ExtendedTask won’t block main thread flushing reactive graph (.e., UI updates won’t blocked). ExtendedTask pairs nicely new bslib::input_task_button() bslib::bind_task_button() functions, help give user feedback prevent extra button clicks. (#3958) Added JavaScript error dialog, reporting errors previously discoverable opening browser’s devtools open. Since dialog mainly useful debugging development, must enabled shiny::devmode(). (#3931) runExamples() now uses bslib package generate better looking result. also gains package argument packages can leverage function run Shiny app examples. , see ?runExamples. (#3963, #4005) Added onUnhandledError() register function called unhandled error occurs Shiny app. Note handler doesn’t stop error prevent session closing, can used log error clean session-specific resources. (thanks @JohnCoene, #3993)","code":""},{"path":"/news/index.html","id":"changes-1-8-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"shiny 1.8.1","text":"renderDataTable()/dataTableOutput() officially deprecated favor {DT} equivalents. Migrating DT, cases, just requires changing renderDataTable() DT::renderDT() dataTableOutput() DT::DTOutput(). Also, promote migration, recent version DT available, renderDataTable()/dataTableOutput() now automatically use DT equivalent (provide message ). happens degrade existing app, set options(shiny.legacy.datatable = TRUE) get old (.e., non-DT) implementation. (#3998) conditionalPanel() uiOutput() now styled display: contents default Shiny apps use Bootstrap 5. means elements contain positioned direct children parent container holding conditionalPanel() uiOutput(). probably users intend use functions, may break apps applied styles directly container elements created two functions. case, may include CSS rules set display: block .shiny-panel-conditional .shiny-html-output classes. (#3957, #3960)","code":""},{"path":"/news/index.html","id":"bug-fixes-1-8-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shiny 1.8.1","text":"Notifications now constrained width viewport window widths smaller default notification panel size. (#3949) Fixed #2392: downloadButton() now visibly returns HTML tag renders correctly R Markdown Quarto output. (Thanks @fennovj, #2672) Calling updateSelectizeInput() choices selected now clears current selection updating choices selected value. (#3967) Loading Shiny app package-like directory longer warn autoloading disabled presence R/_disable_autoload.R file. (Thanks @krlmlr @tanho63, #3513)","code":""},{"path":"/news/index.html","id":"shiny-180","dir":"Changelog","previous_headings":"","what":"shiny 1.8.0","title":"shiny 1.8.0","text":"CRAN release: 2023-11-17","code":""},{"path":"/news/index.html","id":"breaking-changes-1-8-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"shiny 1.8.0","text":"Since renderContent() calls bindAll() (inserts content), now returns Promise<void> instead void, can useful downstream code needs wait binding complete.","code":""},{"path":"/news/index.html","id":"new-features-and-improvements-1-8-0","dir":"Changelog","previous_headings":"","what":"New features and improvements","title":"shiny 1.8.0","text":"Updated selectizeInput()’s selectize.js dependency v0.12.4 v0.15.2. addition many bug fixes improvements, update also adds several new plugin options. (#3875) Shiny’s CSS styling (things like showNotification(), withProgress(), inputPanel(), etc.), updated bslib’s upcoming CSS-dark mode feature mind. (#3882, #3914) Default styles showNotification() tweaked slightly improve accessibility, sizing, padding. (#3913) Shiny inputs htmlwidgets longer treated draggable inside absolutePanel()/fixedPanel() draggable = TRUE. result, interactions like zooming panning now work expected widgets like plotly leaflet appear draggable panel. (#3752, #3933) InputBindings, .receiveMessage() method can now asynchronous synchronous (previously synchronous). (#3930)","code":""},{"path":"/news/index.html","id":"bug-fixes-1-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shiny 1.8.0","text":"fileInput() longer unwanted round corners applied buttonLabel. (#3879) Fixed #3898: wrapFunctionLabel() longer throws error name longer 10000 bytes. (#3903)","code":""},{"path":"/news/index.html","id":"shiny-1751","dir":"Changelog","previous_headings":"","what":"shiny 1.7.5.1","title":"shiny 1.7.5.1","text":"CRAN release: 2023-10-14","code":""},{"path":"/news/index.html","id":"bug-fixes-1-7-5-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shiny 1.7.5.1","text":"r-devel (R > 4.3.1), isTruthy(NULL) now returns FALSE (older versions R). (#3906)","code":""},{"path":"/news/index.html","id":"shiny-175","dir":"Changelog","previous_headings":"","what":"shiny 1.7.5","title":"shiny 1.7.5","text":"CRAN release: 2023-08-12","code":""},{"path":"/news/index.html","id":"possibly-breaking-changes-1-7-5","dir":"Changelog","previous_headings":"","what":"Possibly breaking changes","title":"shiny 1.7.5","text":"reactiveValues() objects, whenever $names() $values() methods called, keys now returned order inserted. (#3774) value provided options(shiny.json.digits) now interpreted number digits decimal instead significant digits. treat value significant digits, wrap () (e.g., options(shiny.json.digits = (4))). new default behavior helps reducing digits testing snapshots, also consistent jsonlite’s default behavior. (#3819)","code":""},{"path":"/news/index.html","id":"new-features-and-improvements-1-7-5","dir":"Changelog","previous_headings":"","what":"New features and improvements","title":"shiny 1.7.5","text":"Closed #789: Dynamic UI now rendered asynchronously, thanks part newly exported Shiny.renderDependenciesAsync(), Shiny.renderHtmlAsync(), Shiny.renderContentAsync(). Importantly, means <script> tags now loaded asynchronously (old way used XMLHttpRequest, synchronous). addition, Shiny now manages queue async tasks (exposed via Shiny.shinyapp.taskQueue) order execution preserved. (#3666) Fixes #3840: updateSliderInput() now warns attempting set invalid min, max, value values. Sending invalid update message input longer causes update messages fail. (#3843) sliderInput() now larger target area clicking tapping slider handle range. (#3859) Closed #2956: Component authors can now prevent Shiny creating input binding specific elements adding data-shiny--bind-input attribute element. attribute may value; presence prevent binding. feature primarily useful input component authors want use standard HTML input elements without causing Shiny create input binding . Additionally, Shiny now adds custom classes inputs. example, checkboxInput() now shiny-input-checkbox class. custom classes may utilized future updates Shiny’s input binding logic. (#3861) Map objects now initialized load time instead build time. avoids potential problems arise storing fastmap objects built Shiny package. (#3775)","code":""},{"path":"/news/index.html","id":"bug-fixes-1-7-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shiny 1.7.5","text":"Fixed #3771: Sometimes error ion.rangeSlider.min.js: .stopPropagation function appear JavaScript console. (#3772) Fixed #3833: width provided textAreaInput(), now correctly set width <textarea> element. (#3838)","code":""},{"path":"/news/index.html","id":"shiny-1741","dir":"Changelog","previous_headings":"","what":"shiny 1.7.4.1","title":"shiny 1.7.4.1","text":"CRAN release: 2023-07-06","code":""},{"path":"/news/index.html","id":"full-changelog-1-7-4-1","dir":"Changelog","previous_headings":"","what":"Full changelog","title":"shiny 1.7.4.1","text":"Closed #3849: R-devel, warning raised Shiny loaded .numeric_version() called number instead string. (#3850)","code":""},{"path":"/news/index.html","id":"shiny-174","dir":"Changelog","previous_headings":"","what":"shiny 1.7.4","title":"shiny 1.7.4","text":"CRAN release: 2022-12-15","code":""},{"path":[]},{"path":"/news/index.html","id":"breaking-changes-1-7-4","dir":"Changelog","previous_headings":"Full changelog","what":"Breaking changes","title":"shiny 1.7.4","text":"Closed #3719: Output container sizes, available via session$clientData getCurrentOutputInfo(), longer round nearest pixel (.e., now exact, possibly fractional values). (#3720) Closed #3704, #3735, #3740: renderPlot() longer generates error (segfault) executes output visible. Instead, ’ll now use graphics device’s default size ’s initial size. Relatedly, plotPNG() now ignores NULL values width/height (uses device’s default width/height instead). (#3739)","code":""},{"path":"/news/index.html","id":"new-features-and-improvements-1-7-4","dir":"Changelog","previous_headings":"Full changelog","what":"New features and improvements","title":"shiny 1.7.4","text":"plotOutput(), imageOutput(), uiOutput() gain fill argument. TRUE (default plotOutput()), output container allowed grow/shrink fit fill container (created via htmltools::bindFillRole()) opinionated height. means plotOutput() grow/shrink default inside bslib::card_body_fill(), imageOutput() uiOutput() opt-similar behavior fill = TRUE. (#3715) Closed #3687: Updated jQuery-UI v1.13.2. (#3697) Internal: Added clearer strict TypeScript type definitions (#3644)","code":""},{"path":"/news/index.html","id":"shiny-173","dir":"Changelog","previous_headings":"","what":"shiny 1.7.3","title":"shiny 1.7.3","text":"CRAN release: 2022-10-25","code":""},{"path":"/news/index.html","id":"bug-fixes-1-7-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shiny 1.7.3","text":"Shiny 1.7.0 changed icon(lib=\"fontawesome\") implementation bundled copy fontawesome, {fontawesome} package. led issue #3688, icons previously working, now breaking. ’s {fontawesome} 0.3.0 earlier support icon names used Font Awesome 5 earlier, newest icon names used Font Awesome 6. Now, {fontawesome} 0.4.0 restored support older icon names, Shiny 1.7.2.1 updated {fontawesome} requirement >=0.4.0.","code":""},{"path":"/news/index.html","id":"shiny-172","dir":"Changelog","previous_headings":"","what":"shiny 1.7.2","title":"shiny 1.7.2","text":"CRAN release: 2022-07-19","code":""},{"path":[]},{"path":"/news/index.html","id":"breaking-changes-1-7-2","dir":"Changelog","previous_headings":"Full changelog","what":"Breaking changes","title":"shiny 1.7.2","text":"Closed #3626: renderPlot() (plotPNG()) now uses ragg::agg_png() default {ragg} package installed. restore previous behavior, set options(shiny.useragg = FALSE). (#3654)","code":""},{"path":"/news/index.html","id":"new-features-and-improvements-1-7-2","dir":"Changelog","previous_headings":"Full changelog","what":"New features and improvements","title":"shiny 1.7.2","text":"Closed #1545: insertUI() now executes <script> tags. (#3630) fileInput() can set capture attribute facilitates user access device’s media capture mechanism, camera, microphone, within file upload control (W3C HTML Media Capture). (Thanks khaled-alshamaa, #3481) Closed tidyverse/dplyr#5552: Compatibility dplyr 1.0 (rlang chained errors general) req(), validate(), friends. Closed tidyverse/dplyr#6154: Values actionButton() S3 classes incorrect order. Closed #3346: Default ref input runGithub() changed \"master\" \"HEAD\". (#3564) Closed #3619: R 4.2, splitLayout() longer raises warnings incorrect length statement. (Thanks @dmenne, #3625)","code":""},{"path":"/news/index.html","id":"bug-fixes-1-7-2","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 1.7.2","text":"Closed #3250:rlang/{tidyeval} conditions (.e., warnings errors) longer filtered stack traces. (#3602) Closed #3581: Errors throttled/debounced reactive expressions longer cause session exit. (#3624) Closed #3657: throttle.ts Throttler typescript objects provides now function intended. (Thanks gto @dvg-p4, #3659) auto-reload feature (options(shiny.autoreload=TRUE)) activated devmode(TRUE), despite console message asserting . (#3620) Closed #2297: error occurred parsing value bookmark query string, error thrown nothing restored. Now message displayed value ignored. (Thanks @daattali, #3385) Restored previous behavior automatically guessing Content-Type header downloadHandler functions explicit contentType argument supplied. (#3393) Previously, updating input value without corresponding Input binding element trigger JavaScript shiny:inputchanged event. Now, Input binding element found, shiny:inputchanged event triggered window.document. (#3584) Closed #2955: Input output bindings previously attempted use el['data-input-id'], never worked. now use el.getAttribute('data-input-id') instead. (#3538)","code":""},{"path":"/news/index.html","id":"minor-improvements-1-7-2","dir":"Changelog","previous_headings":"Full changelog","what":"Minor improvements","title":"shiny 1.7.2","text":"taking test snapshot, sort order json keys input, output, export fields currently sorted using locale machine. can lead inconsistent test snapshot results. opt-consistent ordering snapshot fields shinytest, please set global option options(shiny.snapshotsortc = TRUE). shinytest2 users need set value. (#3515) Closed rstudio/shinytest2#222: restoring context (.e., bookmarking) URL, Shiny now better handles trailing = _inputs_ _values_. (#3648) Shiny’s internal HTML dependencies now mounted dynamically instead statically. (#3537) HTML dependencies sent dynamic UI now better type checking, longer require dep.src.href field. (#3537)","code":""},{"path":"/news/index.html","id":"shiny-171","dir":"Changelog","previous_headings":"","what":"shiny 1.7.1","title":"shiny 1.7.1","text":"CRAN release: 2021-10-02","code":""},{"path":"/news/index.html","id":"bug-fixes-1-7-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"shiny 1.7.1","text":"Closed #3516: Fix regression repeated calls appendTab() navbarMenu() already present within tabsetPanel()/navbarPage(). (#3518) Re-arranged conditions testthat 1.0.0 compatibility. (#3512)","code":""},{"path":"/news/index.html","id":"shiny-170","dir":"Changelog","previous_headings":"","what":"shiny 1.7.0","title":"shiny 1.7.0","text":"CRAN release: 2021-09-22","code":""},{"path":[]},{"path":"/news/index.html","id":"breaking-changes-1-7-0","dir":"Changelog","previous_headings":"Full changelog","what":"Breaking changes","title":"shiny 1.7.0","text":"format locale arguments sliderInput() removed. deprecated since 0.10.2.2 (released 2014-12-08). Closed #3403: insertTab()’s position parameter now defaults \"\" instead \"\". benefit allowing us fix bug positioning target = NULL, drawback changing default behavior target NULL. (#3404)","code":""},{"path":"/news/index.html","id":"new-features-and-improvements-1-7-0","dir":"Changelog","previous_headings":"Full changelog","what":"New features and improvements","title":"shiny 1.7.0","text":"Bootstrap 5 support. (#3410 rstudio/bslib#304) explained , opt-Bootstrap 5, provide bslib::bs_theme(version = 5) page layout function theme argument (e.g., fluidPage(), navbarPage(), etc). Closed #3322, #3313, #1823, #3321, #3320, #1928, #2310: Various improvements navbarPage(), tabsetPanel(), tabPanel(), navbarMenu(), etc. Also, functions now powered bslib package’s new nav() API (consider using bslib’s API create better looking fully featured navs). (#3388) uses list(...) replaced rlang::list2(...). means can use trailing , without error use rlang’s !!! operator “splice” list argument values .... think ’ll particularly useful passing list tabPanel() consumers (.e., tabsetPanel(), navbarPage(), etc). example, tabs <- list(tabPanel(\"\", \"\"), tabPanel(\"B\", \"b\")); navbarPage(!!!tabs). (#3315 #3328) installExprFunction() exprToFunction() now able handle quosures quoted = TRUE. render-functions call functions (htmlwidgets) can now understand quosures. Users can also use rlang::inject() unquote quosure evaluation. also means render function longer need env quoted parameters; information can embedded quosure passed render function. Better documentation added create render functions. (#3472) icon(lib=\"fontawesome\") now powered fontawesome package, make easier use latest FA icons future (updating fontawesome package). (#3302) Closed #3397: renderPlot() new uses ggplot2::get_alt_text() inform alt text default (ggplot2 plots). (#3398) modalDialog() gains support size = \"xl\". (#3410) Addressed #2521: Updated list TCP ports rejected default runapp.R, adding 5060, 5061 6566. Added documentation describing port range (3000:8000) ports rejected. (#3456)","code":""},{"path":"/news/index.html","id":"other-improvements-1-7-0","dir":"Changelog","previous_headings":"Full changelog","what":"Other improvements","title":"shiny 1.7.0","text":"Shiny’s core JavaScript code converted TypeScript. latest development information, please see README.md ./srcts. (#3296) Switched digest::digest() rlang::hash() hashing. (#3264) Switched internal Stack class fastmap::faststack(), used fastmap::fastqueue(). (#3176) long-deprecated functions function parameters removed. (#3137)","code":""},{"path":"/news/index.html","id":"bug-fixes-1-7-0","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 1.7.0","text":"Closed #3345: Shiny now correctly renders htmltools::htmlDependency()(s) list() script attributes used dynamic UI context. fairly new htmlDependency() feature added htmltools v0.5.1. (#3395) Fixed #2666 #2670: nearPoints() brushedPoints() weren’t properly account missing values (#2666 introduced v1.4.0). (#2668) Closed #3374: quoToFunction() now works correctly nested quosures; result, quasi-quotation rendering function (e.g., renderPrint(), renderPlot(), etc) now works expected nested quosures. (#3373) Exported register_devmode_option(). method described documentation devmode() never exported. See ?devmode() details register Shiny Developer options using register_devmode_option(). (#3364) Closed #3484: RStudio IDE Mac 11.5, selected checkboxes radio buttons visible. (#3485)","code":""},{"path":"/news/index.html","id":"library-updates-1-7-0","dir":"Changelog","previous_headings":"Full changelog","what":"Library updates","title":"shiny 1.7.0","text":"Closed #3286: Updated Font-Awesome 5.15.2. (#3288) Updated jQuery 3.6.0. (#3311)","code":""},{"path":"/news/index.html","id":"shiny-160","dir":"Changelog","previous_headings":"","what":"shiny 1.6.0","title":"shiny 1.6.0","text":"CRAN release: 2021-01-25 release focuses improvements three main areas: Better theming (Bootstrap 4) support: theme argument fluidPage(), navbarPage(), bootstrapPage() now understand bslib::bs_theme() objects, can used opt-Bootstrap 4, use Bootswatch theme, /implement custom themes without writing CSS. session object now includes $setCurrentTheme() $getCurrentTheme() methods dynamically update (obtain) page’s theme initial load, useful things adding dark mode switch app “real-time” theming tool like bslib::bs_themer(). details, see {bslib}’s website Caching reactive() render*() (e.g. renderText(), renderTable(), etc) expressions. expressions automatically cache recent value, helps avoid redundant computation within single “flush” reactivity. new bindCache() function can used cache previous values (long fit cache). cache may optionally scoped within /across user sessions, possibly leading huge performance gains, especially deployed scale across user sessions. details, see help(bindCache, package = \"shiny\") Various improvements accessibility screen-reader keyboard users. details, see accessibility section .","code":""},{"path":[]},{"path":"/news/index.html","id":"breaking-changes-1-6-0","dir":"Changelog","previous_headings":"Full changelog","what":"Breaking changes","title":"shiny 1.6.0","text":"Closed #3074: Shiny longer supports file uploads Internet Explorer 8 9. (#3075) Subtle changes, soft-deprecations, come freezeReactiveValue freezeReactiveVal (#3055). functions fragile best previous releases (issues #1791, #2463, #2946). release, ’ve solved problems know freezeReactiveValue(input, \"x\"), 1) invalidating input$x set NULL whenever freeze, 2) ensuring , freeze, even effect renderUI updateXXXInput set input$x value already , result invalidation (whereas default, Shiny filters spurious assignments). Similar problems may exist using freezeReactiveVal, using freezeReactiveValue non-input reactive values objects. support added mostly symmetry freezeReactiveValue(input), given issues, ’s clear us used successfully past, even want . release, ’re soft-deprecating uses, ’re willing un-deprecate turns people using ; includes , please join conversation https://github.com/rstudio/shiny/issues/3063. meantime, can squelch deprecation messages functions specifically, setting options(shiny.deprecation.messages.freeze = FALSE).","code":""},{"path":"/news/index.html","id":"accessibility-1-6-0","dir":"Changelog","previous_headings":"Full changelog","what":"Accessibility","title":"shiny 1.6.0","text":"Added bootstrap accessibility plugin hood improve accessibility shiny apps screen-reader keyboard users: enhancements include better navigations alert, tooltip, popover, modal dialog, dropdown, tab Panel, collapse, carousel elements. (#2911) Closed #2987: Improved accessibility “live regions” – namely, *Output() bindings update*Input(). (#3042) Added appropriate labels icon() element provide screen-reader users alternative descriptions fontawesome glyphicon: aria-label automatically applied based fontawesome name. example, icon(\"calendar\") announced “calendar icon” screen readers. “presentation” aria role also attached icon() remove redundant semantic info screen readers. (#2917) Closed #2929: Fixed keyboard accessibility file picker button: keyboard users can now tab focus fileInput() widget. (#2937) Fixed #2951: screen readers correctly announce labels date formats dateInput() dateRangeInput() widgets. (#2978) Closed #2847: selectInput() reasonably accessible screen readers even selectize option set TRUE. improve selectize.js accessibility, added selectize-plugin-a11y default. (#2993) Closed #612: Added alt argument renderPlot() renderCachedPlot() specify descriptive texts plotOutput() objects, essential screen readers. default, alt text set static text, “Plot object,” even dynamic text can made reactive function. (#3006, thanks @trafficonese @leonawicz original PR discussion via #2494) Added semantic landmarks mainPanel() sidebarPanel() assistive technologies can recognize “main” “complementary” region respectively. (#3009) Closed #2844: Added lang argument ui *Page() functions (e.g., fluidPage, bootstrapPage) specifies document-level language within app accessibility screen readers search-engine parsers. default, set empty string commonly recognized browser’s default locale. (#2920) Improved accessibility radioButtons() checkboxGroupInput(): options now grouped together semantically assistive technologies. (thanks @jooyoungseo, #3187).","code":""},{"path":"/news/index.html","id":"minor-new-features-and-improvements-1-6-0","dir":"Changelog","previous_headings":"Full changelog","what":"Minor new features and improvements","title":"shiny 1.6.0","text":"Added support Shiny Developer Mode. Developer Mode enables number options() make developer’s life easier, like enabling non-minified JS printing messages deprecated functions options. See ?devmode() details. (#3174) New reactiveConsole() makes easier interactively experiment reactivity console (#2518). UI specified function (e.g. ui <- function(req) { ... }), response can now HTTP response returned (newly exported) httpResponse() function. (#2970) selectInput selectizeInput now warn performance implications thousands choices used, recommend server-side selectize used instead. (#2959) Closed #2980: addResourcePath() now allows paths leading . (thanks @ColinFay). (#2981) Closed #2972: runExample() now supports shiny.port option (thanks @ColinFay). (#2982) Closed #2692: downloadButton() icon can now changed via icon parameter (thanks @ColinFay). (#3010) Closed #2984: improved documentation renderCachedPlot() (thanks @aalucaci). (#3016) reactiveValuesToList() save reactlog label reactiveValuesToList(<ID>) vs .list(<ID>) (#3017) Removed unused (non-exported) cacheContext class. testServer() can accept single server function input (#2965). shinyOptions() now session-level scoping, addition global application-level scoping. (#3080) runApp() now warns running application R package directory. (#3114) Shiny now uses cache_mem cachem package, instead memoryCache diskCache. (#3118) Closed #3140: Added support ... argument icon(). (#3143) Closed #629: update* functions now default value session, issue informative warning missing. (#3195, #3199) Improved error messages reading reactive values outside reactive domain (e.g., reactiveVal()()). (#3007)","code":""},{"path":"/news/index.html","id":"bug-fixes-1-6-0","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 1.6.0","text":"Fixed #1942: Calling runApp(\"app.R\") longer ignores options passed shinyApp(). makes possible Shiny apps specify port/host used default. (#2969) Fixed #3033: DiskCache created max_n max_size, many items get pruned prune() called. (#3034) Fixed #2703: Fixed numerous issues combinations min/value/max causing issues date[Range]Input() updateDate[Range]Input(). (#3038, #3201) Fixed #2936: dateYMD giving warning passed vector dates dateInput greater length 1. length check removed needed. (#3061) Fixed #2266, #2688: radioButtons updateRadioButtons now accept character(0) indicate none options selected (thanks @ColinFay). (#3043) Fixed bug textAreaInput() doesn’t work expected relative width (thanks @shrektan). (#2049) Fixed #2859: renderPlot() wasn’t correctly setting showtext::showtext_opts()’s dpi setting correct resolution high resolution displays; means, font rendered showtext, font sizes look smaller displays. (#2941) Closed #2910, #2909, #1552: sliderInput() warns value outside min max, errors value NULL NA. (#3194)","code":""},{"path":"/news/index.html","id":"library-updates-1-6-0","dir":"Changelog","previous_headings":"Full changelog","what":"Library updates","title":"shiny 1.6.0","text":"Removed html5shiv respond.js, used IE 8 IE 9 compatibility. (#2973) Removed es5-shim library, internally used within selectInput() ECMAScript 5 compatibility. (#2993)","code":""},{"path":"/news/index.html","id":"shiny-150","dir":"Changelog","previous_headings":"","what":"shiny 1.5.0","title":"shiny 1.5.0","text":"CRAN release: 2020-06-23","code":""},{"path":[]},{"path":"/news/index.html","id":"breaking-changes-1-5-0","dir":"Changelog","previous_headings":"Full changelog","what":"Breaking changes","title":"shiny 1.5.0","text":"Fixed #2869: release, renderImage() dangerous default deleteFile = TRUE. (Sorry!) Going forward, calls renderImage() need explicit deleteFile argument; now, failing provide one result warning message, file deleted appears within tempdir(). (#2881)","code":""},{"path":"/news/index.html","id":"new-features-1-5-0","dir":"Changelog","previous_headings":"Full changelog","what":"New features","title":"shiny 1.5.0","text":"new shinyAppTemplate() function creates new template Shiny application, components optional, helper files R/ subdirectory, module, various kinds tests. (#2704) runTests() new function behaves much like R CMD check. runTests() invokes top-level R files tests/ directory inside application, application’s environment. (#2585) testServer() new function testing reactive behavior inside server functions modules. (#2682, #2764, #2807) new moduleServer function provides simpler interface creating using modules. (#2773) Resolved #2732: markdown() new function writing Markdown Github extensions directly Shiny UIs. Markdown rendering performed commonmark package. (#2737) getCurrentOutputInfo() function can now return background color (bg), foreground color (fg), accent (.e., hyperlink) color, font information output’s HTML container. information reported plotOutput(), imageOutput(), output bindings containing class .shiny-report-theme. feature allows developers style output’s contents based container’s CSS styling. (#2740)","code":""},{"path":"/news/index.html","id":"minor-new-features-and-improvements-1-5-0","dir":"Changelog","previous_headings":"Full changelog","what":"Minor new features and improvements","title":"shiny 1.5.0","text":"Fixed #2042, #2628: dateInput dateRangeInput, disabled months years now lighter gray, make easier see disabled. (#2690) getCurrentOutputInfo() previously threw error called outside output; now returns NULL. (#2707 #2858) Added label observer auto-reloads R/ directory avoid confusion using reactlog. (#58) getDefaultReactiveDomain() can now called inside session$onSessionEnded callback return calling session information. (#2757) Added 'function' class reactive() reactiveVal() objects. (#2793) Added new option (type = \"hidden\") tabsetPanel(), making easier set active tab via input controls (e.g., radioButtons()) rather tabs pills. Use option conjunction updateTabsetPanel() new tabsetPanelBody() function (see help(tabsetPanel) example details). (#2814) Added function updateActionLink() update actionLink() label /icon value. (#2811) Fixed #2856: Bumped jQuery 3 3.4.1 3.5.1. (#2857)","code":""},{"path":"/news/index.html","id":"bug-fixes-1-5-0","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 1.5.0","text":"Fixed #2606: debounce() work properly code reactive expression threw error first run. (#2652) Fixed #2653: dataTableOutput() incorrect output certain characters column names. (#2658)","code":""},{"path":[]},{"path":"/news/index.html","id":"library-updates-1-5-0","dir":"Changelog","previous_headings":"Full changelog","what":"Library updates","title":"shiny 1.5.0","text":"Updated Font-Awesome 5.3.1 5.13.0, includes icons related COVID-19. upgrade notes, see https://github.com/FortAwesome/Font-Awesome/blob/master/UPGRADING.md. (#2891)","code":""},{"path":"/news/index.html","id":"shiny-1402","dir":"Changelog","previous_headings":"","what":"shiny 1.4.0.2","title":"shiny 1.4.0.2","text":"CRAN release: 2020-03-13 Minor patch release: fixed timing-dependent tests failed intermittently CRAN build machines.","code":""},{"path":"/news/index.html","id":"shiny-1401","dir":"Changelog","previous_headings":"","what":"shiny 1.4.0.1","title":"shiny 1.4.0.1","text":"CRAN release: 2020-03-12 Minor patch release account changes grid package upcoming R 4.0 release (#2776).","code":""},{"path":"/news/index.html","id":"shiny-140","dir":"Changelog","previous_headings":"","what":"shiny 1.4.0","title":"shiny 1.4.0","text":"CRAN release: 2019-10-10","code":""},{"path":[]},{"path":"/news/index.html","id":"breaking-changes-1-4-0","dir":"Changelog","previous_headings":"Full changelog","what":"Breaking changes","title":"shiny 1.4.0","text":"Resolved #2554: Upgraded jQuery v.1.12.4 v3.4.1 bootstrap v3.3.7 v3.4.1. (#2557). Since jQuery upgrade may introduce breaking changes user code, option switch back old version setting options(shiny.jquery.version = 1). ’ve hard-coded shared/jquery[.min].js HTML Shiny app, order downgrade, ’ll change filepath shared/legacy/jquery[.min].js.","code":""},{"path":"/news/index.html","id":"improvements-1-4-0","dir":"Changelog","previous_headings":"Full changelog","what":"Improvements","title":"shiny 1.4.0","text":"Resolved #1433: plotOutput()’s coordmap info now includes discrete axis limits ggplot2 plots. result, shinytest tests contain ggplot2 plots discrete axes (recorded change) now report differences can safely updated. new coordmap info added correctly infer data points within input brush /near input click/hover scenarios non-trivial discrete axis scale involved (e.g., whenever scale_[x/y]_discrete(limits = ...) /free scales across multiple discrete axes used). (#2410) Resolved #2402: informative warning now thrown mis-specified (date) strings dateInput(), updateDateInput(), dateRangeInput(), updateDateRangeInput(). (#2403) shiny.autoload.r option set TRUE, files ending .r .R contained directory named R/ adjacent application sourced app started. become default Shiny behavior future release (#2547) Resolved #2442: shiny:inputchanged JavaScript event now triggers related input element instead document. Existing event listeners bound document still detect event due event bubbling. (#2446) Fixed #1393, #2223: plots interactions enabled, image longer draggable. (#2460) Resolved #2469: renderText now takes sep argument passed cat. (#2497) Added resourcePaths() removeResourcePaths() functions. (#2459) Resolved #2433: informative warning now thrown subdirectories app’s www/ directory masked resource prefixes /resource prefix mapped different local file paths. (#2434) Resolved #2478: cmd + shift + f3 ctrl + shift + f3 can now used add reactlog mark. reactlog keybindings used reactlog enabled, error page displayed showing enable reactlog recordings. (#2560)","code":""},{"path":"/news/index.html","id":"bug-fixes-1-4-0","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 1.4.0","text":"Partially resolved #2423: Reactivity Shiny leaked memory, R can leak memory whenever new symbols interned, happens whenever new name/key used environment. R now uses fastmap package, avoids problem. (#2429) Fixed #2267: Fixed memory leak invalidateLater. (#2555) Fixed #1548: reactivePoll function leaked observer; observer continue exist even reactivePoll object longer accessible. #2522 Fixed #2116: Fixed issue dynamic tabs added hosted platform. (#2545) Resolved #2515: selectInput() selectizeInput() now deal appropriately named factors. Note updateSelectInput() updateSelectizeInput() yet handle factors; behavior unchanged. (#2524, #2540, #2625) Resolved #2471: Large file uploads Windows computer slow. (#2579) Fixed #2387: Updating sliderInput()’s type numeric date longer changes rate policy debounced immediate. generally, updating input binding new type (longer) incorrectly alter input rate policy. (#2404) Fixed #868: input initialized NULL label, can now updated string. Moreover, input label initialized string, can now removed updating label=character(0) (similar choices selected can cleared updateSelectInput()). (#2406) Fixed #2250: updateSliderInput() now works un-specified (zero-length) min, max, value. (#2416) Fixed #2396: selectInput(\"myID\", ...) resulting extra myID-selectized input (introduced v1.2.0). (#2418) Fixed #2233: verbatimTextOutput() produced wrapped text Safari, text wrapped. (#2353) Fixed #2335: dateInput()’s value unspecified, max /min set Sys.Date(), value set properly. (#2526) Fixed #2591: Providing malformed date-strings min max longer results JS errors dateInput() dateRangeInput(). (#2592) Fixed rstudio/reactlog#36: Changes reactive values displaying accurately reactlog. (#2424) Fixed #2598: Showcase files don’t appear wide window. (#2582) Fixed #2329, #1817: bugs reported fixed Shiny 1.3.0 actually fixed JavaScript changes accidentally included release. fix resolves issues occur withProgressBar() bookmarking combined networkD3 package’s Sankey plot.","code":""},{"path":"/news/index.html","id":"shiny-132","dir":"Changelog","previous_headings":"","what":"shiny 1.3.2","title":"shiny 1.3.2","text":"CRAN release: 2019-04-22","code":""},{"path":"/news/index.html","id":"bug-fixes-1-3-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"shiny 1.3.2","text":"Fixed #2385: Static CSS/JS resources subapps R Markdown documents render properly. (#2386) Fixed #2280: Shiny applications used www/index.html file serve index file. (#2382)","code":""},{"path":"/news/index.html","id":"shiny-131","dir":"Changelog","previous_headings":"","what":"shiny 1.3.1","title":"shiny 1.3.1","text":"CRAN release: 2019-04-12","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-1-3-1","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 1.3.1","text":"Fixed performance issue introduced v1.3.0 using large nested lists within Shiny. (#2377)","code":""},{"path":"/news/index.html","id":"shiny-130","dir":"Changelog","previous_headings":"","what":"shiny 1.3.0","title":"shiny 1.3.0","text":"CRAN release: 2019-04-07","code":""},{"path":[]},{"path":[]},{"path":"/news/index.html","id":"new-features-1-3-0","dir":"Changelog","previous_headings":"Full changelog","what":"New features","title":"shiny 1.3.0","text":"Revamped Shiny’s reactlog viewer debugs reactivity within shiny application. allows users traverse reactivity history shiny application, filter dependency tree selected reactive object, search matching reactive objects. See ?reactlogShow details enable feature. (#2107) Shiny now serves static files background thread. means things like JavaScript CSS assets can served without blocking blocked main R thread, result significantly better performance heavily loaded servers. (#2280)","code":""},{"path":"/news/index.html","id":"minor-new-features-and-improvements-1-3-0","dir":"Changelog","previous_headings":"Full changelog","what":"Minor new features and improvements","title":"shiny 1.3.0","text":"Shiny-Shared-Secret security header now checked using constant-time comparison prevent timing attacks (thanks @dirkschumacher!). (#2319)","code":""},{"path":"/news/index.html","id":"bug-fixes-1-3-0","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 1.3.0","text":"Fixed #2245: updateSelectizeInput() update labels. (#2248) Fixed #2308: restoring bookmarked application, inputs leading . restored. (#2311) Fixed #2305, #2322, #2351: input dynamic UI restored bookmarks, keep getting set value. (#2360) Fixed #2349, #2329, #1817: various bugs triggered presence networkD3 package’s Sankey plot app. Impacted features included dateRangeInput, withProgressBar, bookmarking (#2359)","code":""},{"path":"/news/index.html","id":"documentation-updates-1-3-0","dir":"Changelog","previous_headings":"Full changelog","what":"Documentation Updates","title":"shiny 1.3.0","text":"Fixed #2247: renderCachedPlot now supports using promises either expr cacheKeyExpr. (Shiny v1.2.0 supported async expr, cacheKeyExpr async well; now can use combination sync/async expr cacheKeyExpr.) #2261","code":""},{"path":"/news/index.html","id":"shiny-120","dir":"Changelog","previous_headings":"","what":"shiny 1.2.0","title":"shiny 1.2.0","text":"CRAN release: 2018-11-02 release features plot caching, important new tool improving performance scalability. Using renderCachedPlot place renderPlot can greatly improve responsiveness apps show plot many times (example, dashboard report users view data). Shiny gives fair amount control cache stored cached plots invalidated, sure read article get feature.","code":""},{"path":[]},{"path":"/news/index.html","id":"breaking-changes-1-2-0","dir":"Changelog","previous_headings":"Full changelog","what":"Breaking changes","title":"shiny 1.2.0","text":"URL paths FontAwesome CSS/JS/font assets changed, due upgrade FontAwesome 4 5. shouldn’t affect unless ’re using www/index.html provide UI hardcoded old FontAwesome paths HTML. ’s , consider switching HTML templates, give syntax raw HTML still taking advantage Shiny’s automatic management web dependencies.","code":""},{"path":"/news/index.html","id":"new-features-1-2-0","dir":"Changelog","previous_headings":"Full changelog","what":"New features","title":"shiny 1.2.0","text":"Added renderCachedPlot(), stores plots cache can served almost instantly. (#1997)","code":""},{"path":"/news/index.html","id":"minor-new-features-and-improvements-1-2-0","dir":"Changelog","previous_headings":"Full changelog","what":"Minor new features and improvements","title":"shiny 1.2.0","text":"Upgrade FontAwesome 4.7.0 5.3.1 made icon tags browsable, means display web browser RStudio viewer default (#2186). Note application library depends FontAwesome directly using custom CSS, may need make changes recommended Upgrade Version 4. Font Awesome icons can also now used static R Markdown documents. Address #174: Added datesdisabled daysofweekdisabled new parameters dateInput(). resolves #174 exposes underlying arguments Bootstrap Datepicker. datesdisabled expects character vector values yyyy/mm/dd format daysofweekdisabled expects integer vector day interger ids (Sunday=0, Saturday=6). default value NULL, leaves days selectable. Thanks, @nathancday! (#2147) Support selecting variables data frame output values used within tidy evaluation. Added functions: varSelectInput, varSelectizeInput, updateVarSelectInput, updateVarSelectizeInput. (#2091) Addressed #2042: dates outside min/max date range now lighter shade grey highlight allowed range. (#2087) Added support plot interaction plot scaled. (#2125) Fixed #1933: extended server-side selectize lists optgroups. (#2102) Added namespace support freezing reactiveValue keys. #2080 Upgrade selectize.js 0.12.1 0.12.4 #2028 Addressed #2079: Added coords_img, coords_css, img_css_ratio fields containing x y location information plot brush, hover, click events. #2183","code":""},{"path":"/news/index.html","id":"bug-fixes-1-2-0","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 1.2.0","text":"Fixed #2033: RStudio Viewer window closed shiny::stopApp(). Thanks, @vnijs! #2047 Fixed #1935: correctly returns plot coordinates using outer margins. (#2108) Resolved #2019: updateSliderInput now changes slider formatting input type changes. (#2099) Fixed #2138: Inputs part renderUI longer restoring correctly bookmarked state. #2139 knit_print methods htmltools longer imported shiny exported. Also, shiny’s knit_print methods longer exported. #2166 Fixed #2093: Make sure bookmark scope directory exist trying create . #2168 Fixed #2177: session name now recorded exiting context. Multiple sessions can now view respective reactlogs. #2180 Fixed #2162: selectInput sending spurious duplicate values server using backspace. Thanks, @sada1993! #2187 Fixed #2142: Dropping files fileInputs stopped working recent releases Firefox. Thanks @dmenne reporting! #2203 Fixed #2204: updateDateInput set wrong date days DST begins. (Thanks @GaGaMan1101!) #2212 Fixed #2225: Input event queue can stall apps use async. #2226 Fixed #2228: reactiveTimer fails owned session. Thanks, @P-Bettega! #2229","code":""},{"path":"/news/index.html","id":"documentation-updates-1-2-0","dir":"Changelog","previous_headings":"Full changelog","what":"Documentation Updates","title":"shiny 1.2.0","text":"Addressed #1864 changing optgroup documentation use list instead c. (#2084)","code":""},{"path":"/news/index.html","id":"shiny-110","dir":"Changelog","previous_headings":"","what":"shiny 1.1.0","title":"shiny 1.1.0","text":"CRAN release: 2018-05-17 significant release Shiny, major new feature nearly year making: support asynchronous operations! now, R’s single-threaded nature meant performing long-running calculations tasks Shiny bring app halt users process. release Shiny deeply integrates promises package allow execute tasks asynchronously, including part reactive expressions outputs. See promises documentation learn .","code":""},{"path":[]},{"path":"/news/index.html","id":"breaking-changes-1-1-0","dir":"Changelog","previous_headings":"Full changelog","what":"Breaking changes","title":"shiny 1.1.0","text":"extractStackTrace formatStackTrace deprecated removed future version Shiny. far can tell, nobody using functions, refactor made vestigial; need functionality, please file issue.","code":""},{"path":"/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"Full changelog","what":"New features","title":"shiny 1.1.0","text":"Support asynchronous operations! Built-render functions expected certain kind object yielded expr, now generally can handle promise kind object. Reactive expressions observers now promise-aware well. (#1932) Introduced two changes (undocumented widely used) JavaScript function Shiny.onInputChange(name, value). First, changed function name Shiny.setInputValue (don’t worry–old function name continue work). Second, now, calls Shiny.onInputChange(inputId, value) “deduplicated”; , anytime input set value already , set ignored. Shiny v1.1, can now add options object third parameter: Shiny.setInputValue(\"name\", value, {priority: \"event\"}). priority option set \"event\", Shiny always send value trigger reactivity, whether duplicate . closes #928, upvoted open issue far! Thanks, @daattali. (#2018)","code":""},{"path":"/news/index.html","id":"minor-new-features-and-improvements-1-1-0","dir":"Changelog","previous_headings":"Full changelog","what":"Minor new features and improvements","title":"shiny 1.1.0","text":"Addressed #1978: shiny:value now triggered duplicate output data received server. (Thanks, @andrewsali! #1999) shiny output contains css class shiny-report-size, container height width now reported session$clientData. , output id \"myID\", height/width can accessed via session$clientData[['output_myID_height']]/session$clientData[['output_myID_width']]. Addresses #1980. (Thanks, @cpsievert! #1981) Added new autoclose = TRUE parameter dateInput() dateRangeInput(). closed #1969 duplicate much older issue, #173. default value TRUE since seems common use case. However, cause existing apps date inputs (update version Shiny) datepicker immediately closed date selected. apps, actually desired behavior; wish keep datepicker open user clicks use autoclose = FALSE. (#1987) version Shiny now accessible Javascript, Shiny.version. also new function comparing version strings, Shiny.compareVersion(). (#1826, #1830) Addressed #1851: Stack traces now smaller places .call() used. (#1856) Stack traces improved, aggressive de-noising support deep stack traces (stitching together multiple stack traces conceptually part async operation). Addressed #1859: Server-side selectize now significantly faster. (Thanks @dselivanov #1861) #1989: server side outputs can now removed (e.g. output$plot <- NULL). usually necessary allow objects garbage collected, might matter dynamically creating destroying many outputs. (Thanks, @mmuurr! #2011) Removed (ridiculously outdated) “experimental feature” tag reference documentation renderUI. (#2036) Addressed #1907: ignoreInit argument first added observeEvent. Later, also added eventReactive, forgot update documentation. Now done, thanks @flo12392! (#2036)","code":""},{"path":"/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 1.1.0","text":"Fixed #1006: Slider inputs sometimes showed many digits. (#1956) Fixed #1958: Slider inputs previously displayed commas decimal point. (#1960) internal URLdecode() function previously copy httpuv::decodeURIComponent(), assigned build time; now invokes httpuv function run time. Fixed #1840: release Shiny 1.0.5, accidently changed relative positioning icon title text navbarMenus tabPanels. fix reverts behavior back (.e. icon left text /downward arrow case navbarMenus). (#1848) Fixed #1600: URL-encoded bookmarking work sliders dates date-times. (#1961) Fixed #1962: File dragging dropping broke presence jQuery version 3.0 introduced rhandsontable htmlwidget. (#2005) Improved error handling inside addResourcePath() function, give end users informative error messages directoryPath argument normalized. especially useful runtime: shiny_prerendered Rmd documents, like learnr tutorials. (#1968) Changed script tags reactlog (inst/www/reactive-graph.html) HTTP HTTPS order avoid mixed content blocking browsers. (Thanks, @jekriske-lilly! #1844) Addressed #1784: runApp() avoid port 6697, considered unsafe Chrome. Fixed #2000: Implicit calls xxxOutput working inside modules. (Thanks, @GregorDeCillia! #2010) Fixed #2021: Memory leak reactiveTimer invalidateLater. (#2022)","code":""},{"path":"/news/index.html","id":"library-updates-1-1-0","dir":"Changelog","previous_headings":"Full changelog","what":"Library updates","title":"shiny 1.1.0","text":"Updated ion.rangeSlider 2.2.0. (#1955)","code":""},{"path":"/news/index.html","id":"known-issues-1-1-0","dir":"Changelog","previous_headings":"","what":"Known issues","title":"shiny 1.1.0","text":"rare cases, interrupting application (pressing Ctrl-C Esc) may result message Error execCallbacks(timeoutSecs) : c++ exception (unknown reason). Although message sounds alarming, harmless, go away future version later package (information ).","code":""},{"path":"/news/index.html","id":"shiny-105","dir":"Changelog","previous_headings":"","what":"shiny 1.0.5","title":"shiny 1.0.5","text":"CRAN release: 2017-08-23","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-1-0-5","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 1.0.5","text":"Fixed #1818: conditionalPanel() expressions newline character caused application work. (#1820) Added safe wrapper function internal calls jsonlite::fromJSON(). (#1822) Fixed #1824: HTTP HEAD requests static files caused application stop. (#1825)","code":""},{"path":"/news/index.html","id":"shiny-104","dir":"Changelog","previous_headings":"","what":"shiny 1.0.4","title":"shiny 1.0.4","text":"CRAN release: 2017-08-14 three headlining features release Shiny. now possible add remove tabs tabPanel; new function, onStop(), registers callbacks execute application exits; fileInputs now can files dragged dropped . addition features, release number minor features bug fixes. See full changelog details.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-1-0-4","dir":"Changelog","previous_headings":"Full changelog","what":"New features","title":"shiny 1.0.4","text":"Implemented #1668: dynamic tabs: added functions (insertTab, appendTab, prependTab, removeTab, showTab hideTab) allow actions existing tabsetPanel. (#1794) Implemented #1213: Added new function, onStop(), can used register callback functions invoked application exits, user session ends. (Multiple sessions can connected single running Shiny application.) useful finalization/clean-code run application exits. (#1770 Implemented #1155: Files can now drag--dropped fileInput controls. appearance fileInput controls files dragged can modified overriding shiny-file-input-active shiny-file-input-classes. (#1782)","code":""},{"path":"/news/index.html","id":"minor-new-features-and-improvements-1-0-4","dir":"Changelog","previous_headings":"Full changelog","what":"Minor new features and improvements","title":"shiny 1.0.4","text":"Addressed #1688: trigger new shiny:outputinvalidated event output gets invalidated, time recalculating CSS class added. (#1758, thanks @andrewsali!) Addressed #1508: fileInput now permits file uploaded multiple times. (#1719) Addressed #1501: fileInput control now retains uploaded file extensions server. fixes readxl’s readxl::read_excel functions must recognize file’s extension order work. (#1706) conditionalPanels, Shiny now gives informative messages errors evaluating parsing JavaScript conditional expression. (#1727) Addressed #1586: conditionalPanel function now accepts ns argument. ns argument can used module UI function scope condition expression module’s input output IDs. (#1735) options(shiny.testmode=TRUE), Shiny process send message client response changed input, even outputs changed. helps streamline testing using shinytest package. (#1747) Addressed #1738: updateTextInput updateTextAreaInput functions can now update placeholder. (#1742) Converted examples single file apps, made updates enhancements comments example app scripts. (#1685) Added new snapshotPreprocessInput() snapshotPreprocessOutput() functions, used preprocessing input output values taking test snapshot. (#1760, #1789) HTML generated renderTable() longer includes comments R version, xtable version, timestamp. (#1771) Added function isRunning test whether Shiny app currently running. (#1785) Added function setSerializer, allows authors specify function serializing value custom input. (#1791)","code":""},{"path":"/news/index.html","id":"bug-fixes-1-0-4","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 1.0.4","text":"Fixed #1546: make possible (without hacks) write arbitrary data module’s session$userData (exactly environment parent’s session$userData). clear, allows something like session$userData$x <- TRUE, something like session$userData <- TRUE (allowed context, whether ’re main app, module) (#1732). Fixed #1701: partial argument match generateOptions function. (#1702) Fixed #1710: ReactiveVal objects separate dependents. (#1712) Fixed #1438: unbindAll() called inserting content insertUI(). previous fix (#1449) work correctly. (#1736) Fixed #1755: dynamic htmlwidgets sent path package server client. (#1756) Fixed #1763: Shiny’s private random stream leaked main random stream. (#1768) Fixed #1680: options(warn=2) respected running app. (#1790) Fixed #1772: ensure runApp() respects shinyApp(onStart = function()) argument. (#1770) Fixed #1474: browser() call observer cause error RStudio IDE Windows. (#1802)","code":""},{"path":"/news/index.html","id":"shiny-103","dir":"Changelog","previous_headings":"","what":"shiny 1.0.3","title":"shiny 1.0.3","text":"CRAN release: 2017-04-26 hotfix release Shiny. previous versions Shiny, running application newly-released version R, 3.4.0, print message: Warning body(fun) : argument function. effect application, message alarming users, releasing new version Shiny fixes issue.","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-1-0-3","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 1.0.3","text":"Fixed #1672: error occurred uploading file, progress bar change colors. (#1673) Fixed #1676: R 3.4.0, running Shiny application gave warning: Warning body(fun) : argument function. (#1677)","code":""},{"path":"/news/index.html","id":"shiny-102","dir":"Changelog","previous_headings":"","what":"shiny 1.0.2","title":"shiny 1.0.2","text":"CRAN release: 2017-04-18 hotfix release Shiny. primary reason release web host MathJax JavaScript library scheduled shut next weeks. shut , Shiny applications use MathJax longer able load MathJax library run Shiny 1.0.1 . (don’t know whether application uses MathJax, probably .) information MathJax CDN shutting , see https://www.mathjax.org/cdn-shutting-/.","code":""},{"path":[]},{"path":"/news/index.html","id":"minor-new-features-and-improvements-1-0-2","dir":"Changelog","previous_headings":"Full changelog","what":"Minor new features and improvements","title":"shiny 1.0.2","text":"Added shiny:sessioninitialized Javascript event, fired end initialize method Session object. allows us listen event want get value things like Shiny.user. (#1568) Fixed #1649: allow choices argument checkboxGroupInput() NULL (c()) keep backward compatibility Shiny < 1.0.1. result thing providing choices = character(0). (#1652) official URL accessing MathJax libraries CDN deprecated removed soon. switched new rstudio.com URL support going forward. (#1664)","code":""},{"path":"/news/index.html","id":"bug-fixes-1-0-2","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 1.0.2","text":"Fixed #1653: wrong code example documentation. (#1658)","code":""},{"path":"/news/index.html","id":"shiny-101","dir":"Changelog","previous_headings":"","what":"shiny 1.0.1","title":"shiny 1.0.1","text":"CRAN release: 2017-04-01 maintenance release Shiny, mostly aimed fixing bugs introducing minor features. notable additions version Shiny introduction reactiveVal() function (’s like reactiveValues(), stores single value), choices radioButtons() checkboxGroupInput() can now contain HTML content instead just plain text.","code":""},{"path":[]},{"path":"/news/index.html","id":"breaking-changes-1-0-1","dir":"Changelog","previous_headings":"Full changelog","what":"Breaking changes","title":"shiny 1.0.1","text":"functions radioButtons(), checkboxGroupInput() selectInput() (corresponding updateXXX() functions) longer accept selected argument whose value name choice, instead value choice. feature deprecated since Shiny 0.10 (printed warning message, still tried match name right choice) ’s now completely unsupported.","code":""},{"path":"/news/index.html","id":"new-features-1-0-1","dir":"Changelog","previous_headings":"Full changelog","what":"New features","title":"shiny 1.0.1","text":"Added reactiveVal function, storing single value can (reactively) read written. Similar reactiveValues, except reactiveVal just lets store single value instead storing multiple values name. (#1614)","code":""},{"path":"/news/index.html","id":"minor-new-features-and-improvements-1-0-1","dir":"Changelog","previous_headings":"Full changelog","what":"Minor new features and improvements","title":"shiny 1.0.1","text":"Fixed #1637: Outputs stay faded MS Edge. (#1640) Addressed #1348 #1437 adding two new arguments radioButtons() checkboxGroupInput(): choiceNames (list vector) choiceValues (list vector). can passed alternative choices, added benefit elements choiceNames can arbitrary UI (.e. anything created HTML() tags() functions, like icons images). underlying values choice (passed choiceValues) must still simple text, visual representation app (user actually clicks select different option) can valid HTML element. See ?radioButtons small example. (#1521) Updated tools/README.md detailed instructions. (#1616) Fixed #1565, meant resources spaces names return HTTP 404. (#1566) Exported session$user (exists) client-side; ’s accessible Shiny object: Shiny.user. (#1563) Added support HTML5’s pushState allows pseudo-navigation shiny apps. info, see documentation (?updateQueryString ?getQueryString). (#1447) Fixed #1121: plot interactions ggplot2 now support coord_fixed(). (#1525) Added snapshotExclude function, marks output recorded test snapshot. (#1559) Added shiny:filedownload JavaScript event, triggered downloadButton downloadLink clicked. Also, values downloadHandlers recorded test snapshots, values change every time application run. (#1559) Added support plot interactions ggplot2 > 2.2.1. (#1578) Fixed #1577: Improved escapeHTML (util.js) terms order dependency replacing, XSS risk attack performance. (#1579) shiny:inputchanged JavaScript event now includes two new fields, binding el, contain input binding DOM element, respectively. Additionally, Shiny.onInputChange() now accepts optional argument, opts, can contain fields. (#1596) NS() function now returns vectorized function. (#1613) Fixed #1617: fileInput can customized text button placeholder. (#1619)","code":""},{"path":"/news/index.html","id":"bug-fixes-1-0-1","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 1.0.1","text":"Fixed #1511: fileInputs trigger shiny:inputchanged event client. Also removed shiny:fileuploaded JavaScript event, longer needed fix. (#1541, #1570) Fixed #1472: Progress object, calling set(value=NULL) made progress bar go 100%. Now change value progress bar. documentation also incorrectly said setting value NULL hide progress bar. (#1547) Fixed #162: dynamically-generated input changed different inputType, might incorrectly deduplicated. (#1594) Removed redundant call inputs.setInput. (#1595) Fixed bug dateRangeInput respect weekstart argument. (#1592) Fixed #1598: setBookmarkExclude() work properly inside modules. (#1599) Fixed #1605: sliders move clicked bar area. (#1610) Fixed #1621: reactiveTimer’s session closed first time reactiveTimer fired, reactiveTimer get cleared keep firing indefinitely. (#1623) Fixed #1634: brushing plot causes plot redraw, redraw turn trigger plot redraw . due spurious changes values floating point numbers. (#1641)","code":""},{"path":"/news/index.html","id":"library-updates-1-0-1","dir":"Changelog","previous_headings":"Full changelog","what":"Library updates","title":"shiny 1.0.1","text":"Closed #1500: Updated ion.rangeSlider 2.1.6. (#1540)","code":""},{"path":"/news/index.html","id":"shiny-100","dir":"Changelog","previous_headings":"","what":"shiny 1.0.0","title":"shiny 1.0.0","text":"CRAN release: 2017-01-11 Shiny reached milestone: version 1.0.0! last year, ’ve added two major features considered essential 1.0.0 release: bookmarking, support testing Shiny applications. usual, version Shiny also includes many minor features bug fixes. highlights release. details, see full changelog .","code":""},{"path":"/news/index.html","id":"support-for-testing-shiny-applications-1-0-0","dir":"Changelog","previous_headings":"","what":"Support for testing Shiny applications","title":"shiny 1.0.0","text":"Shiny now supports automated testing applications, shinytest package. Shinytest yet released CRAN, soon. (#18, #1464)","code":""},{"path":"/news/index.html","id":"debouncethrottle-reactives-1-0-0","dir":"Changelog","previous_headings":"","what":"Debounce/throttle reactives","title":"shiny 1.0.0","text":"Now ’s official way slow reactive values expressions invalidate quickly. Pass reactive expression new debounce throttle function, get back modified reactive expression doesn’t invalidate often. (#1510)","code":""},{"path":[]},{"path":"/news/index.html","id":"breaking-changes-1-0-0","dir":"Changelog","previous_headings":"Full changelog","what":"Breaking changes","title":"shiny 1.0.0","text":"Added new placeholder argument verbatimTextOutput(). default FALSE, means , content output, representation slot made UI. Previsouly, even content, ’d see empty rectangle UI served placeholder. can set placeholder = TRUE revert back look. (#1480)","code":""},{"path":"/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"Full changelog","what":"New features","title":"shiny 1.0.0","text":"Added support testing Shiny applications shinytest package. (#18, #1464) Added debounce throttle functions, control rate reactive values expressions invalidate. (#1510)","code":""},{"path":"/news/index.html","id":"minor-new-features-and-improvements-1-0-0","dir":"Changelog","previous_headings":"Full changelog","what":"Minor new features and improvements","title":"shiny 1.0.0","text":"Addressed #1486 adding new argument observeEvent eventReactive, called ignoreInit (defaults FALSE backwards compatibility). set TRUE, action (.e. second argument: handlerExpr valueExpr, respectively) triggered observer/reactive first created/initialized. words, ignoreInit = TRUE ensures observeEvent (eventReactive) never run right away. info, see documentation (?observeEvent). (#1494) Added new argument observeEvent called . set TRUE, results observer destroyed (stop observing) first time handlerExpr run (.e. = TRUE guarantees observer runs, , ). info, see documentation (?observeEvent). (#1494) Addressed #1358: informative error message calling runApp() inside app’s app.R (inside ui.R server.R). (#1482) Added descriptive JS warning insertUI() selector argument match anything DOM. (#1488) Added support injecting JavaScript code shiny.testmode option set TRUE. makes possible record test events interactively. (#1464) Added ability arguments tag function called inside downloadButton() downloadLink(). Closes #986. (#1492) Implemented #1512: added userData environment session, storing arbitrary session-related variables. Generally, session-scoped variables created just declaring normal variables local Shiny server function, session$userData may convenient advanced scenarios. (#1513) Relaxed naming requirements addResourcePath() (first character longer needs letter). (#1529)","code":""},{"path":"/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 1.0.0","text":"Fixed #969: allow navbarPage’s fluid param control containers. (#1481) Fixed #1438: unbindAll() called inserting content insertUI() (#1449) Fixed bug causing <meta> tags associated HTML dependencies Shiny R Markdown files rendered incorrectly. (#1463) Fixed #1359: shinyApp() options argument ignored passed runApp(). (#1483) Fixed #117: Reactive expressions now release references cached values soon invalidated, potentially making cached values eligible garbage collection sooner. Previously, occur next cached value calculated stored. (#1504) Fixed #1013: flushReact called app loads. Observers set outside server functions running first user connects. (#1503) Fixed #1453: using modal dialog easyClose=TRUE Shiny gadget, pressing Esc close modal gadget. Now pressing Esc closes modal. (#1523)","code":""},{"path":"/news/index.html","id":"library-updates-1-0-0","dir":"Changelog","previous_headings":"Full changelog","what":"Library updates","title":"shiny 1.0.0","text":"Updated Font Awesome 4.7.0.","code":""},{"path":"/news/index.html","id":"shiny-0142","dir":"Changelog","previous_headings":"","what":"shiny 0.14.2","title":"shiny 0.14.2","text":"CRAN release: 2016-11-01 maintenance release Shiny, bug fixes minor new features.","code":""},{"path":[]},{"path":"/news/index.html","id":"minor-new-features-and-improvements-0-14-2","dir":"Changelog","previous_headings":"Full changelog","what":"Minor new features and improvements","title":"shiny 0.14.2","text":"Added fade argument modalDialog() – setting FALSE remove usual fade-animation modal window. (#1414) Fixed “duplicate binding” error occurred edge cases involving insertUI nested uiOutput. (#1402) Fixed #1422: using shiny.trace option, allow specifying log SEND RECV messages, . (PR #1428) Fixed #1419: Allow overriding JS custom message handler. (PR #1445) Added exportTestValues() function, allows test driver query session values internal application’s server function. effect shiny.testmode option set TRUE. (#1436)","code":""},{"path":"/news/index.html","id":"bug-fixes-0-14-2","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 0.14.2","text":"Fixed #1427: make sure modals close incorrectly element inside triggered hidden. (#1430) Fixed #1404: stack trace tests compatible byte-code compiler R-devel, now tracks source references. sliderInputBinding.setValue() now sends slider’s value immediately, instead waiting usual 250ms debounce delay. (#1429) Fixed bug , versions R 3.2, Shiny applications crash due bug R’s implementation list2env(). (#1446)","code":""},{"path":"/news/index.html","id":"shiny-0141","dir":"Changelog","previous_headings":"","what":"shiny 0.14.1","title":"shiny 0.14.1","text":"CRAN release: 2016-10-05 maintenance release Shiny, bug fixes minor new features.","code":""},{"path":[]},{"path":"/news/index.html","id":"minor-new-features-and-improvements-0-14-1","dir":"Changelog","previous_headings":"Full changelog","what":"Minor new features and improvements","title":"shiny 0.14.1","text":"Restored file inputs now copied restore, restored application can’t modify bookmarked file. (#1370) Added support plot interaction development version ggplot2, 2.1.0.9000. Also added support ggplot2 plots coord_flip() (development version ggplot2). (hadley/ggplot2#1781, #1392)","code":""},{"path":"/news/index.html","id":"bug-fixes-0-14-1","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 0.14.1","text":"Fixed #1093 better: updateRadioButtons() updateCheckboxGroupInput() working correctly choices given numeric vector. solved #1291, introduced different bug #1396 better fix avoids. (#1370) Fixed #1368: app file input bookmarked restored, restored app bookmarked restored (without uploading new file), fail restore file second time. (#1370) Fixed #1369: sliderInput() allow showing numbers without thousands separator. Fixed #1346 #1107 : jQuery UI’s datepicker conflicted bootstrap-datepicker used Shiny’s dateInput() dateRangeInput(). (#1374)","code":""},{"path":"/news/index.html","id":"library-updates-0-14-1","dir":"Changelog","previous_headings":"Full changelog","what":"Library updates","title":"shiny 0.14.1","text":"Updated bootstrap-datepicker 1.6.4. (#1218, #1374) Updated jQuery UI 1.12.1. Previously, Shiny included build 1.11.4 missing datepicker component due conflict bootstrap-datepicker used Shiny’s dateInput() dateRangeInput(). (#1374)","code":""},{"path":"/news/index.html","id":"shiny-014","dir":"Changelog","previous_headings":"","what":"shiny 0.14","title":"shiny 0.14","text":"CRAN release: 2016-09-10 new Shiny release upon us! many new exciting features, bug fixes, library updates. ’ll just highlight important changes , can browse full changelog details. likely last release shiny 1.0, get party hats!","code":""},{"path":"/news/index.html","id":"bookmarkable-state-0-14","dir":"Changelog","previous_headings":"","what":"Bookmarkable state","title":"shiny 0.14","text":"Shiny now supports bookmarkable state: users can save state application get URL restore application state. two types bookmarking: encoding state URL, saving state server. encoded state, entire state application contained URL’s query string. can see action app: https://gallery.shinyapps.io/113-bookmarking-url/. example bookmark URL app https://gallery.shinyapps.io/113-bookmarking-url/?_inputs_&n=200. state saved server, URL might look something like: https://gallery.shinyapps.io/bookmark-saved/?_state_id_=d80625dc681e913a (note URL active app). Important note: > Saved--server bookmarking currently works Shiny Server Open Source. Support Shiny Server Pro, RStudio Connect, shinyapps.io development testing. However, URL-encoded bookmarking works hosting platforms. See article get started bookmarkable state. also advanced-level article (apps complex state), modules article details use bookmarking conjunction modules.","code":""},{"path":"/news/index.html","id":"notifications-0-14","dir":"Changelog","previous_headings":"","what":"Notifications","title":"shiny 0.14","text":"Shiny can now display notifications client browser using showNotification() function. Use demo app play around notification API. ’s screenshot simple notification (shown button clicked):  ’s article , reference documentation.","code":""},{"path":"/news/index.html","id":"progress-indicators-0-14","dir":"Changelog","previous_headings":"","what":"Progress indicators","title":"shiny 0.14","text":"Shiny app contains computations take long time complete, progress bar can improve user experience communicating far along computation , much left. Progress bars added Shiny 0.10.2. Shiny 0.14, changed use notifications system, gives different look. Important note: > already using progress bars customized CSS, can add style = \"old\" argument withProgress() call (Progress$new()). result appearance . can also call shinyOptions(progress.style = \"old\") app’s server function make progress indicators use old styling. see new progress bars action, see app gallery. can also learn article reference documentation (either easier withProgress functional API complicated, powerful, Progress object-oriented API.","code":""},{"path":"/news/index.html","id":"reconnection-0-14","dir":"Changelog","previous_headings":"","what":"Reconnection","title":"shiny 0.14","text":"Shiny can now automatically reconnect Shiny session temporarily lose network access.","code":""},{"path":"/news/index.html","id":"modal-windows-0-14","dir":"Changelog","previous_headings":"","what":"Modal windows","title":"shiny 0.14","text":"Shiny now built-support displaying modal dialogs like one (live app ):  learn , read article reference documentation.","code":""},{"path":"/news/index.html","id":"insertui-and-removeui-0-14","dir":"Changelog","previous_headings":"","what":"insertUI and removeUI","title":"shiny 0.14","text":"Sometimes Shiny app, arbitrary HTML UI may need created --fly response user input. existing uiOutput renderUI functions let continue using reactive logic call UI functions make results appear predetermined place UI. insertUI removeUI functions, used server code, allow use imperative logic add remove arbitrary chunks HTML (independent one another), many times want, whenever want, wherever want. option may convenient want , example, add new model app time user selects different option (leave previous models unchanged, rather substitute previous one latest one). See simple demo app one use insertUI removeUI insert remove text elements using queue. Also see app demonstrates insert remove common Shiny input objects. Finally, app shows dynamically insert modules using insertUI. , read article dynamic UI generation reference documentation insertUI removeUI.","code":""},{"path":"/news/index.html","id":"documentation-for-connecting-to-an-external-database-0-14","dir":"Changelog","previous_headings":"","what":"Documentation for connecting to an external database","title":"shiny 0.14","text":"Many Shiny users asked best practices accessing external databases Shiny applications. Although database access long possible using various database connector packages R, can challenging use robustly dynamic environment Shiny provides. far, mostly application authors find appropriate database drivers discover manage database connections within application. order demystify process, wrote series articles (first one ) covers basics connecting external database, well security precautions keep mind (e.g. avoid SQL injection attacks). packages look ’re using relational database Shiny app: dplyr DBI packages (featured article linked ), brand new pool package, provides layer abstraction make easier safer use either DBI dplyr. pool yet CRAN. particular, pool take care managing connections, preventing memory leaks, ensuring best performance. See pool basics article advanced-level article ’re feeling adventurous! (articles contain Shiny app examples use DBI connect external MySQL database.) comfortable dplyr DBI, don’t miss article integration pool dplyr. ’re new databases Shiny world, recommend using dplyr pool possible. need greater control dplyr offers (example, need modify data database use transactions), use DBI pool. pool package introduced make life easier, way constrains , don’t envision situation ’d better using . caveat pool yet CRAN, may prefer wait .","code":""},{"path":"/news/index.html","id":"others-0-14","dir":"Changelog","previous_headings":"","what":"Others","title":"shiny 0.14","text":"many minor features, small improvements, bug fixes can cover , ’ll just mention noteworthy ones (full changelog, links relevant issues pull requests, right section): Error Sanitization: now option sanitize error messages; words, content original error message can suppressed doesn’t leak sensitive information. sanitize errors everywhere app, just add options(shiny.sanitize.errors = TRUE) somewhere app. Read article , play demo app. Code Diagnostics: error parsing ui.R, server.R, app.R, global.R, Shiny search code missing commas, extra commas, unmatched braces, parens, brackets, print messages pointing problems. (#1126) Reactlog visualization: default, showReactLog() function (brings reactive graph) also displays time reactive observer active :   new feature can turned showReactLog(time = FALSE). may convenient large graph don’t want new information cluttering . elapsed time info shows relevant node’s label, time also coded color: slowest reactive dark red fastest light red. Additionally, organize graph, can now drag nodes specific position leave . Nicer-looking tables: ’ve made tables generated renderTable() look cleaner modern. won’t break older code, finished look table quite bit different, following image shows:   , read short article update, experiment new features demo app, check reference documentation.","code":""},{"path":[]},{"path":"/news/index.html","id":"breaking-changes-0-14","dir":"Changelog","previous_headings":"Full changelog","what":"Breaking changes","title":"shiny 0.14","text":"Progress indicators can now either use new notification API, using style = \"notification\" (default), displayed previous styling, using style = \"old\". can also call shinyOptions(progress.style = \"old\") server function make progress indicators use old styling. Note customized progress indicators additional CSS, ’ll need use old style want UI look (#1160 #1329). Closed #1161: Deprecated position argument tabsetPanel() since Bootstrap 3 stopped supporting feature. long-deprecated ability pass func argument many render functions removed.","code":""},{"path":"/news/index.html","id":"new-features-0-14","dir":"Changelog","previous_headings":"Full changelog","what":"New features","title":"shiny 0.14","text":"Added ability bookmark restore application state. (main PR: #1209) Added new notification API. R, new functions showNotification hideNotification. JavaScript, new Shiny.notification object controls notifications. (#1141) Progress indicators now use notification API. (#1160) Added ability client browser reconnect new session server, setting session$allowReconnect(TRUE). requires version Shiny Server supports reconnections. (#1074) Added modal dialogs. (#1157) Added insertUI removeUI functions able add remove chunks UI, standalone, independent one another. (#1174 #1189) Improved renderTable() function make tables look prettier also provide user lot parameters customize tables . (#1129) Added support pool package (use Shiny’s timer/scheduler). (#1226)","code":""},{"path":"/news/index.html","id":"minor-new-features-and-improvements-0-14","dir":"Changelog","previous_headings":"Full changelog","what":"Minor new features and improvements","title":"shiny 0.14","text":"Added cancelOutput argument req(). causes currently executing reactive cancel execution, leave previous state alone (opposed clearing output). (#1272) Display: Showcase now displays .js, .html .css files www directory default. order use showcase mode display , include new line Description file: IncludeWWW: False. (#1185) Added error sanitization option: options(shiny.sanitize.errors = TRUE). default, option FALSE. TRUE, normal errors sanitized, displaying generic error message. changes look app errors printed (console log remains ). (#1156) Added option passing arguments xxxOutput() function corresponding renderXXX() function via outputArgs parameter latter. valid snippets Shiny code interactive runtime: shiny Rmd document (never full apps, even embedded Rmd). (#1443) Added updateActionButton() function, user can change actionButton’s (actionLink’s) label /icon. also checks icon argument (creation updating button) valid throws warning otherwise. (#1134) Added code diagnostics: error parsing ui.R, server.R, app.R, global.R, Shiny search code missing commas, extra commas, unmatched braces, parens, brackets, print messages pointing problems. (#1126) Added support horizontal dividers navbarMenu. (#1147) Added placeholder option passwordInput. (#1152) Added session$resetBrush(brushId) (R) Shiny.resetBrush(brushId) (JS) programatically clear brushes imageOutput/plotOutput. (#1197) Added textAreaInput. (thanks, @nuno-agostinho! #1300) Added session$sendBinaryMessage(type, message) method sending custom binary data client. See ?session. (thanks, @daef! #1316 #1320) Almost code examples now runnable example shinyApp(), users can run examples see action. (#1158) resized, plots drawn replayPlot(), instead re-executing plotting code. results faster plot rendering. (#1112) Exported isTruthy() function. (part PR #1272) Reactive log now shows elapsed time reactives observers. (#1132) Nodes reactlog visualization now sticky user drags . (#1283)","code":""},{"path":"/news/index.html","id":"bug-fixes-0-14","dir":"Changelog","previous_headings":"Full changelog","what":"Bug fixes","title":"shiny 0.14","text":"Fixed #1350: Highlighting reactives didn’t work showcase mode. Fixed #1331: renderPlot() now correctly records replays plots execOnResize = FALSE. updateDateInput() updateDateRangeInput() can now clear date input fields. (thanks, @gaborcsardi! #1299, #1315 #1317) Fixed #561: DataTables previously might pop warning data updated extremely frequently. Fixed #776: browsers, plots sometimes flickered updated. Fixed #543 #855: navbarPage() navbarMenu() first item, automatically select item. Fixed #970: navbarPage() previously option set selected tab. Fixed #1253: Memory leak observer destroyed without first invalidated. Fixed #931: Nested observers leak memory. Fixed #1144: updateRadioButton() updateCheckboxGroupInput() broke controls used modules (thanks, @sipemu!). Fixed #1093: updateRadioButtons() updateCheckboxGroupInput() didn’t work choices numeric vector. Fixed #1122: downloadHandler() popped empty browser window file wasn’t present. now gives 404 error code. Fixed #1278: Reactive system flushed often (usually just means -expensive -op necessary). Fixed #803 #1179: handling malformed dates dateInput updateDateInput(). Fixed #1257: updateSelectInput() didn’t work correctly IE 11 Edge. Fixed #971: runApp() give confusing error port numeric. Shiny now avoids using ports Chrome deems unsafe. (#1222) Added workaround quartz graphics device resolution bug, resolution hard-coded 72 ppi.","code":""},{"path":"/news/index.html","id":"library-updates-0-14","dir":"Changelog","previous_headings":"Full changelog","what":"Library updates","title":"shiny 0.14","text":"Updated ion.RangeSlider 2.1.2. Updated Font Awesome 4.6.3. Updated Bootstrap 3.3.7. Updated jQuery 1.12.4.","code":""},{"path":"/news/index.html","id":"shiny-0132","dir":"Changelog","previous_headings":"","what":"shiny 0.13.2","title":"shiny 0.13.2","text":"CRAN release: 2016-03-28 Updated documentation htmlTemplate.","code":""},{"path":"/news/index.html","id":"shiny-0131","dir":"Changelog","previous_headings":"","what":"shiny 0.13.1","title":"shiny 0.13.1","text":"CRAN release: 2016-02-17 flexCol work RStudio Windows Linux. Fixed RStudio debugger integration. BREAKING CHANGE: long-deprecated ability pass functions (rather expressions) reactive() observe() finally removed.","code":""},{"path":"/news/index.html","id":"shiny-0130","dir":"Changelog","previous_headings":"","what":"shiny 0.13.0","title":"shiny 0.13.0","text":"CRAN release: 2016-01-12 Fixed #962: plot interactions work development version ggplot2 (ggplot2 1.0.1). Fixed #902: drag_drop plugin selectize input work. Fixed #933: updateSliderInput() work label updated. Multiple imageOutput/plotOutput calls can now share brush id. Shiny ensure performing brush operation clear brush id. Added placeholder option textInput. Improved support Unicode characters Windows (#968). Fixed bug selectInput selectizeInput values double quotes properly escaped. runApp() can now take path .R file yields shinyApp object; previously, path directory contained app.R file (server.R using separately defined server UI). Similarly, introduced shinyAppFile() function creates shinyApp object .R file path, just shinyAppDir() directory path. Introduced Shiny Modules, designed 1) simplify reuse Shiny UI/server logic 2) make authoring maintaining complex Shiny apps much easier. See article linked ?callModule. invalidateLater reactiveTimer longer require explicit session argument; default value uses current session. Added session$reload() method, equivalent hitting browser’s Reload button. Added shiny.autoreload option, automatically cause browsers reload whenever Shiny app files change disk. intended shorten feedback cycle tweaking UI code. Errors now printed stack traces! make tremendously easier track causes errors Shiny. Try calling stop(\"message\") within output, reactive, observer. Shiny adds lot noise call stack, default, attempts hide relevant levels call stack. can turn behavior setting options(shiny.fullstacktrace=TRUE) app startup. Fixed #1018: selected value selectize input guaranteed selected server-side mode. Added req function, provides simple way prevent reactive, observer, output executing required inputs values available. (Similar functionality available using validate/need, req provides much simpler direct interface.) Improve stability Shiny Server many subapps used, deferring loading subapp iframes connection first established server. Upgrade Font Awesome 4.5.0. Upgraded Bootstrap 3.3.5. Upgraded jQuery 1.12.4 Switched almost-complete build jQuery UI exception datepicker extension, conflicts Shiny’s date picker. Added fillPage function, alternative fluidPage, fixedPage, etc. designed apps fill entire available page width/height. Added fillRow fillCol functions, laying proportional grids fillPage. modern browsers . Added runGadget, paneViewer, dialogViewer, browserViewer functions support Shiny Gadgets. detailed docs gadgets coming soon. Added support new htmltools 0.3 feature htmlTemplate. ’s now possible use regular HTML markup design UI, still use R expressions define inputs, outputs, HTML widgets.","code":""},{"path":"/news/index.html","id":"shiny-0122","dir":"Changelog","previous_headings":"","what":"shiny 0.12.2","title":"shiny 0.12.2","text":"CRAN release: 2015-08-05 GitHub changed URLs gists .tar.gz .zip, runGist updated work new URLs. Callbacks session object now guaranteed execute order registration occurred. Minor bugs sliderInput’s animation behavior fixed. (#852) Updated ion.rangeSlider 2.0.12. Added shiny.minified option, controls whether minified version shiny.js used. Setting FALSe can useful debugging. (#826, #850) Fixed issue outputting plots ggplot objects also additional class whose print method takes precedence print.ggplot. (#840, 841) Added width option Shiny’s input functions. (#589, #834) Added two alias functions updateTabsetPanel() update selected tab: updateNavbarPage() updateNavlistPanel(). (#881) non-base functions now explicitly namespaced, pass checks R-devel. Shiny now correctly handles HTTP HEAD requests. (#876)","code":""},{"path":"/news/index.html","id":"shiny-0121","dir":"Changelog","previous_headings":"","what":"shiny 0.12.1","title":"shiny 0.12.1","text":"CRAN release: 2015-06-12 Fixed issue unbindAll() causes subsequent bindAll() ignored previously bound outputs. (#856) Undeprecate dataTableOutput renderDataTable, deprecated favor new DT package. DT package bit new slightly different API, hasty deprecating existing Shiny functions.","code":""},{"path":"/news/index.html","id":"shiny-0120","dir":"Changelog","previous_headings":"","what":"shiny 0.12.0","title":"shiny 0.12.0","text":"CRAN release: 2015-05-18 addition changes listed (Full Changelog section), infrastructure change affect existing Shiny apps.","code":""},{"path":"/news/index.html","id":"json-serialization-0-12-0","dir":"Changelog","previous_headings":"","what":"JSON serialization","title":"shiny 0.12.0","text":"Shiny 0.12.0, ’ve switched RJSONIO jsonlite. vast majority users, result noticeable changes; however, use packages Shiny apps rely htmlwidgets, also need update htmlwidgets 0.4.0. packages issue message loaded, package needs upgraded. POSIXt objects now serialized JSON UTC8601 format (like “2015-03-20T20:00:00Z”), instead seconds epoch. Shiny app uses sendCustomMessage() send datetime (POSIXt) objects, may need modify Javascript code receive time data format.","code":""},{"path":"/news/index.html","id":"a-note-about-data-tables-0-12-0","dir":"Changelog","previous_headings":"","what":"A note about Data Tables","title":"shiny 0.12.0","text":"Shiny 0.12.0 deprecated Shiny’s dataTableOutput renderDataTable functions instructed migrate nascent DT package instead. (’ll talk DT future blog post.) User feedback indicated transition sudden abrupt, ’ve undeprecated functions 0.12.1. ’ll continue support functions DT time mature.","code":""},{"path":"/news/index.html","id":"full-changelog-0-12-0","dir":"Changelog","previous_headings":"","what":"Full Changelog","title":"shiny 0.12.0","text":"Switched RJSONIO jsonlite. improves consistency speed converting R data structures JSON. One notable change POSIXt objects now serialized JSON UTC8601 format (like “2015-03-20T20:00:00Z”), instead seconds epoch). addition existing support clicking hovering plots created base graphics, added support double-clicking brushing. (#769) Added support clicking, hovering, double-clicking, brushing plots created ggplot2, including support facets. (#802) Added nearPoints brushedPoints functions easily selecting rows data clicked/hovered, brushed. (#802) Added shiny.port option. option set, runApp() listen port default. (#756) runUrl, runGist, runGitHub now can save downloaded applications, destdir argument. (#688) Restored ability set labels selectInput. (#741) Travis continuous integration now uses Travis’s native R support. Fixed encoding issue server receives data client browser. (#742) session object now class ShinySession, making easier test whether object indeed session object. (#720, #746) Fix JavaScript error output appears nested uiOutputs. (Thanks, Gregory Zhang. #749) Eliminate delay receiving new value updateSliderInput(value=...) called. Updated DataTables (Javascript library) 1.10.5. Fixed downloading files filename extension. (#575, #753) Fixed bug nested UI outputs broke outputs. (#749, #750) Removed unneeded HTML ID attributes checkboxGroupInputs radioButtons. (#684) Fixed bug checkboxes still active even Shiny.unbindAll() called. (#206) server side selectize input load first 1000 options default users start type search box. (#823) renderDataTable() dataTableOutput() deprecated shiny removed future versions shiny. Please use DT package instead: http://rstudio.github.io/DT/ (#807)","code":""},{"path":"/news/index.html","id":"shiny-0111","dir":"Changelog","previous_headings":"","what":"shiny 0.11.1","title":"shiny 0.11.1","text":"CRAN release: 2015-02-11 Major client-side performance improvements pages many conditionalPanels, tabPanels, plotOutputs. (#693, #717, #723) tabPanels now use title value default. fixes bug icon title caused problems conditionalPanel’s test condition. (#725, #728) selectInput now size argument control height input box. (#729) navbarPage longer includes first row extra whitespace header=NULL. (#722) selectInputs now use Bootstrap styling selectize=FALSE. (#724) Better vertical spacing label checkbox groups radio buttons. selectInput correctly uses width selectize non-selectize inputs. (#702) wrapper tag generated htmlOutput uiOutput can now type HTML tag, instead just span div. Also, custom classes now allowed tag. (#704) Slider problems IE 11 Chrome touchscreen-equipped Windows computers fixed. (#700) Sliders now work correctly draggable panels. (#711) Fixed arguments fixedPanel. (#709) downloadHandler content callback functions now invoked temp file name extension final filename used download. deal fact file writing functions R auto-append extension file type (pdf, zip).","code":""},{"path":"/news/index.html","id":"shiny-011","dir":"Changelog","previous_headings":"","what":"shiny 0.11","title":"shiny 0.11","text":"CRAN release: 2015-01-17 Shiny 0.11 switches away Bootstrap 2 web framework next version, Bootstrap 3. part Bootstrap 2 longer developed, part allows us tap ecosystem Bootstrap 3 themes.","code":""},{"path":"/news/index.html","id":"known-issues-for-migration-0-11","dir":"Changelog","previous_headings":"","what":"Known issues for migration","title":"shiny 0.11","text":"Bootstrap 3, images <img> tags longer automatically scaled width container. use img() UI code, <img> tags raw HTML source, ’s possible large new version Shiny. address can add img-responsive class: sliders replaced. Previously, Shiny used jslider library, now uses ion.RangeSlider. new sliders updated appearance, allowed us fix many long-standing interface issues sliders. sliderInput() function longer uses format locale options. Instead, can use pre, post, sep options control prefix, postfix, thousands separator. updateSliderInput() can now control min, max, value, step size slider. Previously, value controlled way, wanted change values, needed use Shiny’s dynamic UI. HTML using custom CSS classes specific Bootstrap, may need update Bootstrap 3. See Bootstrap migration guide. encounter migration issues, please let us know shiny-discuss mailing list, Shiny issue tracker.","code":"```r img(src = \"picture.png\", class = \"img-responsive\") ```  The R code above will generate the following HTML:  ```html <img src=\"picture.png\" class=\"img-responsive\"> ```"},{"path":"/news/index.html","id":"using-shinybootstrap2-0-11","dir":"Changelog","previous_headings":"","what":"Using shinybootstrap2","title":"shiny 0.11","text":"like use Shiny 0.11 Bootstrap 2, can use shinybootstrap2 package. Installation usage instructions available project page. recommend temporary solution future development Shiny use Bootstrap 3.","code":""},{"path":"/news/index.html","id":"installing-an-older-version-of-shiny-0-11","dir":"Changelog","previous_headings":"","what":"Installing an older version of Shiny","title":"shiny 0.11","text":"want install specific version Shiny latest CRAN release, can use install_version() function devtools:","code":"# Install devtools if you don't already have it: install.package(\"devtools\")  # Install the last version of Shiny prior to 0.11 devtools::install_version(\"shiny\", \"0.10.2.2\")"},{"path":"/news/index.html","id":"themes-0-11","dir":"Changelog","previous_headings":"","what":"Themes","title":"shiny 0.11","text":"Along release Shiny 0.11, ’ve packaged Bootstrap 3 themes shinythemes package. package makes easy use Bootstrap themes Shiny.","code":""},{"path":"/news/index.html","id":"full-changelog-0-11","dir":"Changelog","previous_headings":"","what":"Full Changelog","title":"shiny 0.11","text":"Changed sliders jquery-slider ion.rangeSlider. sliders improved appearance, support updating properties server, can controlled keyboard input. Switched Bootstrap 2 Bootstrap 3. users, work seamlessly, users may need use shinybootstrap2 package backward compatibility. UI Shiny app can now body tag. useful CSS templates use classes body tag. actionButton actionLink now pass ... arguments underlying tag function. (#607) Added observeEvent eventReactive functions clearer, concise handling actionButton, plot clicks, naturally-imperative inputs. Errors happen reactives longer prevent remaining pending observers executing. also now possible users control errors handled, ‘shiny.observer.error’ global option. (#603, #604) Added escape argument renderDataTable() escape HTML entities data table security reasons. might break tables previous versions shiny use raw HTML table content, old behavior can brought back escape = FALSE aware security implications. (#627) Changed URI encoding/decoding functions internally use encodeURI(), encodeURIComponent(), decodeURIComponent() httpuv package instead utils::URLencode() utils::URLdecode(). (#630) Shiny’s web assets now minified. default reactive domain now available event handler functions. (#669) Password input fields can now used, passwordInput(). (#672)","code":""},{"path":"/news/index.html","id":"shiny-01022","dir":"Changelog","previous_headings":"","what":"shiny 0.10.2.2","title":"shiny 0.10.2.2","text":"CRAN release: 2014-12-08 Remove use rstudio::viewer code example, R CMD check.","code":""},{"path":"/news/index.html","id":"shiny-01021","dir":"Changelog","previous_headings":"","what":"shiny 0.10.2.1","title":"shiny 0.10.2.1","text":"CRAN release: 2014-10-01 Changed examples use instead .","code":""},{"path":"/news/index.html","id":"shiny-0102","dir":"Changelog","previous_headings":"","what":"shiny 0.10.2","title":"shiny 0.10.2","text":"CRAN release: 2014-09-30 minimal version R required shiny package 3.0.0 now. Shiny apps can now consist single file, app.R, instead ui.R server.R. Upgraded DataTables 1.9.4 1.10.2. might breaking change customized DataTables options apps. (info: https://github.com/rstudio/shiny/pull/558) File uploading via fileInput() works Internet Explorer 8 9 now. Note: IE8/9 support multiple files single file input. need upload multiple files, use one file input file. Switched away reference classes R6. Reactive log performance greatly improved. Added Progress withProgress, display progress computation client browser. Fixed #557: updateSelectizeInput(choices, server = TRUE) work choices character vector. Searching DataTables case-insensitive search strings treated regular expressions default now. want case-sensitive searching regular expressions, can use configuration options search$caseInsensitive search$regex, e.g. renderDataTable(..., options = list(search = list(caseInsensitve = FALSE, regex = TRUE))). Added support htmltools::htmlDependency’s new attachment parameter renderUI/uiOutput. Exported createWebDependency. takes htmltools::htmlDependency object makes available Shiny’s built-web server. Custom output bindings can now render htmltools::htmlDependency objects runtime using Shiny.renderDependencies(). Fixes rounding behavior sliderInput. (#301, #502) Updated selectize.js version 0.11.2. (#596) Added position parameter navbarPage.","code":""},{"path":"/news/index.html","id":"shiny-0101","dir":"Changelog","previous_headings":"","what":"shiny 0.10.1","title":"shiny 0.10.1","text":"CRAN release: 2014-07-26 Added Unicode support Windows. Shiny apps running Windows must use UTF-8 encoding ui.R server.R (also optional global.R) contain non-ASCII characters. See article details examples: http://shiny.rstudio.com/gallery/unicode-characters.html (#516) runGitHub() also allows ‘username/repo’ syntax now, equivalent runGitHub('repo', 'username'). (#427) navbarPage() now accepts windowTitle parameter set web browser page title something title displayed navbar. Added inline argument textOutput(), imageOutput(), plotOutput(), htmlOutput(). inline = TRUE, outputs put span() instead default div(). occurs automatically outputs created via inline expressions (e.g. r renderText(expr)) R Markdown documents. See R Markdown example http://shiny.rstudio.com/gallery/inline-output.html (#512) Added support option groups select/selectize inputs. choices argument selectInput()/selectizeInput() list sub-lists sub-list length greater 1, HTML tag <optgroup> used. See example http://shiny.rstudio.com/gallery/option-groups--selectize-input.html (#542)","code":""},{"path":"/news/index.html","id":"shiny-0100","dir":"Changelog","previous_headings":"","what":"shiny 0.10.0","title":"shiny 0.10.0","text":"CRAN release: 2014-06-14 BREAKING CHANGE: default, observers now terminate created session session ends. See ?domains details. Shiny can now used R Markdown v2 documents, create “Shiny Docs”: reports presentations combine narrative, statically computed output, fully dynamic inputs outputs. info, including examples, see http://rmarkdown.rstudio.com/authoring_shiny.html. session object can passed server function (e.g. shinyServer(function(input, output, session) {…})) now documented: see ?session. inputs can now accept NULL label values omit label altogether. New actionLink input control; like actionButton, appearance normal link. renderPlot now calls print result ’s visible (.e. explicit print() required ggplot2). Introduced Shiny app objects (see ?shinyApp). essentially replace little-advertised ability runApp take list(ui=..., server=...) first argument instead directory (though ability remains backward compatibility). Unlike lists, Shiny app objects tagged class shiny.appobj can run simply printing . Added maskReactiveContext function. blocks current reactive context, evaluate expressions shouldn’t use reactive sources directly. (commonly needed.) Added flowLayout, splitLayout, inputPanel functions putting UI elements side side. flowLayout lays children left--right, top--bottom arrangement. splitLayout evenly divides horizontal space among children (unevenly divides cellWidths argument provided). inputPanel like flowPanel, light grey background, intended used encapsulate small input controls wherever vertical space premium. Added serverInfo obtain info Shiny Server app served . Added inline argument (TRUE/FALSE) checkboxGroupInput() radioButtons() allow horizontal layout (inline = TRUE) checkboxes radio buttons. (Thanks, @saurfang, #481) sliderInput selectizeInput/selectInput now use standard horizontal size instead filling available horizontal space. Pass width=\"100%\" explicitly old behavior. Added updateSelectizeInput() function make possible process searching server side (.e. using R), can much faster client side processing (.e. using HTML JavaScript). See article http://shiny.rstudio.com/articles/selectize.html detailed introduction. Fixed bug renderDataTable() data object 1 row 1 column. (Thanks, ZJ Dai, #429) renderPrint gained new argument ‘width’ control width text output, e.g. renderPrint({mtcars}, width = 40). Fixed #220: zip file directory created programs may directory name first entry, case runUrl() can fail. (#220) runGitHub() can also take value form “username/repo” first argument, e.g. runGitHub(“shiny_example”, “rstudio”) runGitHub(“rstudio/shiny_example”) valid ways run GitHub repo.","code":""},{"path":"/news/index.html","id":"shiny-091","dir":"Changelog","previous_headings":"","what":"shiny 0.9.1","title":"shiny 0.9.1","text":"CRAN release: 2014-03-19 Fixed warning ‘Error Context$new : find function “loadMethod”’ happening dependent packages “R CMD check”.","code":""},{"path":"/news/index.html","id":"shiny-090","dir":"Changelog","previous_headings":"","what":"shiny 0.9.0","title":"shiny 0.9.0","text":"CRAN release: 2014-03-18 BREAKING CHANGE: Added host parameter runApp() runExample(), defaults shiny.host option non-NULL, “127.0.0.1” otherwise. means default, Shiny applications can accessed machine served. allow clients connect, previous versions Shiny, use “0.0.0.0” (IP address one network interfaces, care explicit ). Added new function selectizeInput() use JavaScript library selectize.js (https://github.com/brianreavis/selectize.js), extends basic select input many aspects. selectInput() function also gained new argument selectize = TRUE makes use selectize.js default. want revert back original select input, call selectInput(…, selectize = FALSE). Added Showcase mode, displays R code app right app . can invoke Showcase mode passing display.mode=\"showcase\" runApp() function. , app designed run Showcase mode default, add DESCRIPTION file app dir Title, Author, License fields; “Type: Shiny”; “DisplayMode: Showcase”. Upgraded Bootstrap 2.3.2 jQuery 1.11.0. Make tags$head() singleton() behave correctly used renderUI() uiOutput(). Previously, “hoisting content head” “rendering items single time” features worked page initially loading, dynamic rendering. Files now sourced keep.source option, help debugging profiling. Support user-defined input parsers data coming JavaScript using parseShinyInput method. Fixed bug #299: renderDataTable() can deal 0-row data frames now. (reported Harlan Harris) Added navbarPage() navbarMenu() functions create applications multiple top level panels. Added navlistPanel() function create layouts bootstrap navlist left tabPanels right Added type parameter tabsetPanel() enable use pill style tabs addition standard ones. Added position paramter tabsetPanel() enable positioning tabs , , left, right tab content. Added fluidPage() fixedPage() functions well related row column layout functions creating arbitrary bootstrap grid layouts. Added hr() builder function creating horizontal rules. Automatically concatenate duplicate attributes tag definitions Added responsive parameter page building functions opting-bootstrap responsive css. Added theme parameter page building functions specifying alternate bootstrap css styles. Added icon() function embedding icons font awesome icon library Added makeReactiveBinding function turn “regular” variable reactive one (.e. reading variable makes current reactive context dependent , setting variable source reactivity). Added function withMathJax() include MathJax library app. argument selected checkboxGroupInput(), selectInput(), radioButtons() refers value(s) instead name(s) argument choices now. example, value selected argument selectInput(…, choices = c(‘Label 1’ = ‘x1’, ‘Label 2’ = ‘x2’), selected = ‘Label 2’) must updated ‘x2’, although names/labels automatically converted values internally backward compatibility. change applies updateCheckboxGroupInput(), updateSelectInput(), updateRadioButtons() well. (#340) Now possible update value checkbox group, select input, radio buttons using selected argument without providing choices argument updateCheckboxGroupInput(), updateSelectInput(), updateRadioButtons(), respectively. (#340) Added absolutePanel fixedPanel functions creating absolute- fixed-position panels. can easily made user-draggable specifying draggable = TRUE. options argument function renderDataTable(), can pass literal JavaScript code DataTables library via (). makes possible use JavaScript object options, e.g. JavaScript function (supported JSON). See ?renderDataTable details examples. DataTables also works IE8 now. Fixed bug DataTables pagination searching turned , caused failures matrices well empty rows displaying data frames using renderDataTable(). options argument renderDataTable() can also take function returns list. makes possible use reactive values options. (#392) renderDataTable() respects DataTables options now: (1) either bPaginate = FALSE iDisplayLength = -1 disable pagination (.e. rows returned data); besides, means can also use -1 length menu, e.g. aLengthMenu = list(c(10, 30, -1), list(10, 30, ‘’)); (2) can disable searching individual columns bSearchable option, e.g. aoColumns = list(list(bSearchable = FALSE), list(bSearchable = TRUE),…) (search box first column hidden); (3) can turn searching entirely (global searching individual columns) using option bFilter = FALSE. Added argument callback renderDataTable() custom JavaScript function can applied DataTable object. makes much easier use DataTables plug-ins. numeric columns DataTable, search boxes support lower upper bounds now: search query form “lower,upper” (without quotes) indicates limits [lower, upper]. column X, means rows corresponding X >= lower & X <= upper returned. omit either lower limit upper limit, limit used, e.g. “,upper” means X <= upper. updateNumericInput(value) tries preserve numeric precision avoiding scientific notation possible, e.g. 102145 longer rounded 1.0214e+05 = 102140. (Thanks, Martin Loos. #401) sliderInput() longer treats label wrapped HTML() plain text, e.g. label sliderInput(…, label = HTML(‘Label’)) escaped . (#119) Fixed #306: trailing slash path fail addResourcePath() Windows. (Thanks, ZJ Dai) Dots now legal characters inputId/outputId. (Thanks, Kevin Lindquist. #358)","code":""},{"path":"/news/index.html","id":"shiny-080","dir":"Changelog","previous_headings":"","what":"shiny 0.8.0","title":"shiny 0.8.0","text":"CRAN release: 2013-10-30 Debug hooks registered user-provided functions (reactive) expressions (e.g., renderPlot()), makes possible set breakpoints functions using latest version RStudio IDE, RStudio visual debugging tools can used debug Shiny apps. Internally, registration done via installExprFunction(), new function introduced version replace exprToFunction() registration can automatically done. Added new function renderDataTable() display tables using JavaScript library DataTables. includes basic features like pagination, searching (global search search individual columns), sorting (single multiple columns). features implemented R side; example, can use R regular expressions searching. Besides, also uses Bootstrap CSS style. See full documentation examples tutorial: http://rstudio.github.io/shiny/tutorial/#datatables Added new option shiny.error can take function error handler. called error occurs app (user-provided code), e.g., set options(shiny.error = recover), can enter specified environment call stack debug code error occurs. argument launch.browser runApp() can also function, takes URL shiny app input value. runApp() uses random port 3000 8000 instead 8100 now. try 20 ports case certain ports available. Fixed bug conditional panels: value input.id condition correctly retrieved input widget type, numericInput(). (reported Jason Bryer) Fixed two bugs plotOutput(); clickId hoverId give correct coordinates Firefox, axis limits plot changed. (reported Chris Warth Greg D) minimal required version httpuv package increased 1.2 (CRAN now).","code":""},{"path":"/news/index.html","id":"shiny-070","dir":"Changelog","previous_headings":"","what":"shiny 0.7.0","title":"shiny 0.7.0","text":"CRAN release: 2013-08-27 Stopped sending websocket subprotocol. fixes compatibility issue Google Chrome 30. input output objects now also accessible via session$input session$output. Added click hover events static plots; see ?plotOutput details. Added optional logging execution states reactive program, tools visualizing log data. use, start new R session call options(shiny.reactlog=TRUE). launch Shiny app interact . Press Ctrl+F3 (Mac, Cmd+F3) browser launch interactive visualization reactivity occurred. See ?showReactLog information. Added includeScript() includeCSS() functions. Reactive expressions now class=“reactive” attribute. Also added .reactive() .reactivevalues() functions. New stopApp() function, stops app returns value caller runApp(). Added shiny.usecairo option, can used tell Shiny use Cairo PNG output even installed. (Defaults TRUE.) Speed increases selectInput() radioButtons(), corresponding updater functions, many options. Added tagSetChildren() tagAppendChildren() functions. HTTP request object created websocket now accessible session object, session$request. Rook-like request environment can used access HTTP headers, among things. (Note: running Shiny Server environment, request reflect proxy HTTP request made Shiny Server process R process, request made web browser Shiny Server.) Fix getComputedStyle issue, IE8 browser compatibility (#196). Note: Shiny Server still required IE8/9 compatibility. Add shiny.sharedSecret option, require HTTP header Shiny-Shared-Secret set given value.","code":""},{"path":"/news/index.html","id":"shiny-060","dir":"Changelog","previous_headings":"","what":"shiny 0.6.0","title":"shiny 0.6.0","text":"CRAN release: 2013-06-05 tabsetPanel() can directed start specific tab selected. Fix bug multiple file uploads 3 files result incorrect data. Add withTags() function. Add dateInput dateRangeInput. shinyServer() now takes optional session argument, used communication session object. Add functions update values existing inputs page, instead replacing entirely. Allow listening domain sockets. Added actionButton() Shiny. server can now send custom JSON messages client. client side, functions can registered handle messages. Callbacks can registered called end client session. Add ability set priority observers outputs. priority level gets queue. Fix bug presence submit button prevent sending metadata button clicked. reactiveTimer() invalidateLater() default longer invalidate reactive objects client session closed. Shiny apps can run without server.r ui.r file.","code":""},{"path":"/news/index.html","id":"shiny-050","dir":"Changelog","previous_headings":"","what":"shiny 0.5.0","title":"shiny 0.5.0","text":"CRAN release: 2013-03-29 Switch websockets package handling websocket connections httpuv. New method detecting hidden output objects. Instead checking height width 0, checks object ancestor DOM style display:none. Add clientData reactive values object, carries information client. includes hidden status output objects, height/width plot output objects, URL browser. Add parseQueryString() function. Add renderImage() function sending arbitrary image files client, counterpart, imageOutput(). Add support high-resolution (Retina) displays. Fix bug #55, renderTable() throw error empty data frame.","code":""},{"path":"/news/index.html","id":"shiny-041","dir":"Changelog","previous_headings":"","what":"shiny 0.4.1","title":"shiny 0.4.1","text":"Fix bug width height weren’t passed along properly reactivePlot renderPlot. Fix bug infinite recursion happen reactivePlot passed function width height.","code":""},{"path":"/news/index.html","id":"shiny-040","dir":"Changelog","previous_headings":"","what":"shiny 0.4.0","title":"shiny 0.4.0","text":"CRAN release: 2013-02-22 Added suspend/resume capability observers. Output objects automatically suspended hidden user’s web browser. runGist() accepts GitHub’s new URL format, includes username. reactive() observe() now take expressions instead functions. reactiveText(), reactivePlot(), , renamed renderText(), renderPlot(), etc. also now take expressions instead functions. Fixed bug empty values numericInput sent R process 0. now sent NA.","code":""},{"path":"/news/index.html","id":"shiny-031","dir":"Changelog","previous_headings":"","what":"shiny 0.3.1","title":"shiny 0.3.1","text":"Fix issue #91: bug downloading files work. Add [[<- operator shinyoutput object, making possible assign values output[['plot1']] <- .... Reactive functions now preserve visible/invisible state returned values.","code":""},{"path":"/news/index.html","id":"shiny-030","dir":"Changelog","previous_headings":"","what":"shiny 0.3.0","title":"shiny 0.3.0","text":"CRAN release: 2013-01-24 Reactive functions now evaluated lazily. Add reactiveValues(). Using .list() convert reactivevalues object (like input) list deprecated. new function reactiveValuesToList() used instead. Add isolate(). function used accessing reactive functions, without invalidating parent contexts. Fix issue #58: bug reactive functions re-run items checkboxGroup unchecked. Fix issue #71, reactiveTable() return blank first element data frame NA. plotOutput, better validation CSS units specifying width height. reactivePrint() longer displays invisible output. reactiveText() longer displays printed output, return value function. runGitHub() runUrl() functions added, running Shiny apps GitHub repositories zip/tar files remote URLs. Fix issue #64, pressing Enter textbox cause form submit.","code":""},{"path":"/news/index.html","id":"shiny-024","dir":"Changelog","previous_headings":"","what":"shiny 0.2.4","title":"shiny 0.2.4","text":"CRAN release: 2012-12-18 runGist updated use new download URLs https://gist.github.com. Shiny now uses CairoPNG() output, Cairo package available. provides better-looking output Linux Windows.","code":""},{"path":"/news/index.html","id":"shiny-023","dir":"Changelog","previous_headings":"","what":"shiny 0.2.3","title":"shiny 0.2.3","text":"CRAN release: 2012-12-01 Ignore request variables routing purposes","code":""},{"path":"/news/index.html","id":"shiny-022","dir":"Changelog","previous_headings":"","what":"shiny 0.2.2","title":"shiny 0.2.2","text":"Fix CRAN warning (assigning global environment)","code":""},{"path":"/news/index.html","id":"shiny-021","dir":"Changelog","previous_headings":"","what":"shiny 0.2.1","title":"shiny 0.2.1","text":"[BREAKING] Modify API downloadHandler: content function now takes file path, writable connection, argument. makes much easier work APIs write file paths, connections.","code":""},{"path":"/news/index.html","id":"shiny-020","dir":"Changelog","previous_headings":"","what":"shiny 0.2.0","title":"shiny 0.2.0","text":"Fix subtle name resolution bug–usual symptom S4 methods invoked correctly called inside ui.R server.R","code":""},{"path":"/news/index.html","id":"shiny-0114","dir":"Changelog","previous_headings":"","what":"shiny 0.1.14","title":"shiny 0.1.14","text":"Fix slider animator, broke 0.1.10","code":""},{"path":"/news/index.html","id":"shiny-0113","dir":"Changelog","previous_headings":"","what":"shiny 0.1.13","title":"shiny 0.1.13","text":"Fix temp file leak reactivePlot","code":""},{"path":"/news/index.html","id":"shiny-0112","dir":"Changelog","previous_headings":"","what":"shiny 0.1.12","title":"shiny 0.1.12","text":"Fix problems runGist Windows Add feature --fly file downloads (e.g. CSV data, PDFs) Add CSS hooks app-wide busy indicators","code":""},{"path":"/news/index.html","id":"shiny-0111-1","dir":"Changelog","previous_headings":"","what":"shiny 0.1.11","title":"shiny 0.1.11","text":"Fix input binding IE8 Shiny Server Fix issue #41: reactiveTable allow print options Allow dynamic sizing reactivePlot (.e. using function instead fixed value)","code":""},{"path":"/news/index.html","id":"shiny-0110","dir":"Changelog","previous_headings":"","what":"shiny 0.1.10","title":"shiny 0.1.10","text":"Support MIME types serving www Fix issue #35: Allow modification untar args headerPanel can take explicit window title parameter checkboxInput uses correct attribute checked instead selected Fix plot rendering IE8 Shiny Server","code":""},{"path":"/news/index.html","id":"shiny-019","dir":"Changelog","previous_headings":"","what":"shiny 0.1.9","title":"shiny 0.1.9","text":"Much less flicker updating plots customizable error display Add includeText, includeHTML, includeMarkdown functions putting text, HTML, Markdown content external files application’s UI.","code":""},{"path":"/news/index.html","id":"shiny-018","dir":"Changelog","previous_headings":"","what":"shiny 0.1.8","title":"shiny 0.1.8","text":"Add runGist function conveniently running Shiny app published gist.github.com. Fix issue #27: Warnings cause reactive functions stop executing. server.R ui.R filenames now case insensitive. Add wellPanel function creating inset areas page. Add bootstrapPage function creating new Bootstrap based layouts scratch.","code":""},{"path":"/news/index.html","id":"shiny-017","dir":"Changelog","previous_headings":"","what":"shiny 0.1.7","title":"shiny 0.1.7","text":"Fix issue #26: Shiny.OutputBindings correctly exported. Add repeatable function making easily repeatable versions random number generating functions. Transcode JSON UTF-8 (prevents non-ASCII reactivePrint values causing errors Windows).","code":""},{"path":"/news/index.html","id":"shiny-016","dir":"Changelog","previous_headings":"","what":"shiny 0.1.6","title":"shiny 0.1.6","text":"Import package dependencies, instead attaching (exception websockets, doesn’t currently work unless attached). conditionalPanel animated, now . bindAll correctly sending initial values server; fixed.","code":""},{"path":"/news/index.html","id":"shiny-015","dir":"Changelog","previous_headings":"","what":"shiny 0.1.5","title":"shiny 0.1.5","text":"BREAKING CHANGE: JS APIs Shiny.bindInput Shiny.bindOutput removed replaced Shiny.bindAll; Shiny.unbindInput Shiny.unbindOutput removed replaced Shiny.unbindAll. Add file upload support (currently works Chrome Firefox). Use normal HTML file input, call fileInput UI function. Shiny.unbindOutputs work, now . Generally improved robustness dynamic input/output bindings. Add conditionalPanel UI function allow showing/hiding UI based JS expression; example, whether input particular value. Also works raw HTML (add data-display-attribute element shown/hidden). htmlOutput (CSS class shiny-html-output) can contain inputs outputs.","code":""},{"path":"/news/index.html","id":"shiny-014-1","dir":"Changelog","previous_headings":"","what":"shiny 0.1.4","title":"shiny 0.1.4","text":"Allow Bootstrap tabsets act reactive inputs; value indicates tab active Upgrade Bootstrap 2.1 Add checkboxGroupInput control, presents list checkboxes returns vector selected values Add addResourcePath, intended reusable component authors access CSS, JavaScript, image files, etc. package directories Add Shiny.bindInputs(scope), .unbindInputs(scope), .bindOutputs(scope), .unbindOutputs(scope) JS API calls allow dynamic binding/unbinding HTML elements","code":""},{"path":"/news/index.html","id":"shiny-013","dir":"Changelog","previous_headings":"","what":"shiny 0.1.3","title":"shiny 0.1.3","text":"Introduce Shiny.inputBindings.register JS API InputBinding class, creating custom input controls Add step parameter numericInput Read names input using names(input) Access snapshot input list using .list(input) Fix issue #10: Plots tabsets rendered","code":""},{"path":"/news/index.html","id":"shiny-012","dir":"Changelog","previous_headings":"","what":"shiny 0.1.2","title":"shiny 0.1.2","text":"Initial private beta release!","code":""}]
